{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1578669302608},{"_id":"themes/BlueLake/README.en.md","hash":"d63a2af0b9d371e3756bc65e688a8919a3593c25","modified":1578669302608},{"_id":"themes/BlueLake/README.md","hash":"deee306387e676de24721c7327f5190e34ff1dc2","modified":1578669302608},{"_id":"themes/BlueLake/_config.yml","hash":"eed0f64f9f1da37389238c346e0b97ac07a83960","modified":1578669302609},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1578669302615},{"_id":"source/_posts/db-index.md","hash":"2802b5ee54d43e45ce409d2e84b7750bd79e21c8","modified":1578669302606},{"_id":"source/_posts/debug-k8s.md","hash":"76a3831bd875fca35f637e7d807fabf903c5feb6","modified":1578669302607},{"_id":"source/_posts/docker-operate.md","hash":"760c93f96f159eac75afd653da044f69d32076cd","modified":1578669302607},{"_id":"source/_posts/gitlab-deploy-md.md","hash":"07e0a62af27b17d0f620671d07044349ffbf8258","modified":1578669302607},{"_id":"source/_posts/golang-errors.md","hash":"b446d773bd15e6e7e99a5f3ea71fa50b0006f2fb","modified":1578669302607},{"_id":"source/_posts/hello-world.md","hash":"30d057dd20612411297679884957c77c2b0dad80","modified":1578669302607},{"_id":"source/_posts/injection.md","hash":"ee88f7ca5dde6ca0f17d875e78af81ad30b9060d","modified":1578669302607},{"_id":"source/_posts/rancher-k8s-deploy.md","hash":"1aa70b6f7a6399a5b0d8a93feb1bca8c5c7e7d18","modified":1578669302608},{"_id":"source/_posts/redis-skiplist.md","hash":"09093512cd0d2055f66ffcb9bbeecc10533f6f4b","modified":1578669302608},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"9a6f8a63f5cdd7f579bf8310398301a759c2a6d2","modified":1578669302609},{"_id":"themes/BlueLake/languages/en.yml","hash":"a0f828574b5e90b83eeca4c5a80958459113f2b4","modified":1578669302609},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"bb4b241b45840234922ad4a170d42c9582c0c2ce","modified":1578669302609},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"420566a5a200394e45841a2e2223b3fb9625680d","modified":1578669302609},{"_id":"themes/BlueLake/languages/ko.yml","hash":"27bac975b25998012fe7317b2cf3e6c253bc2ab2","modified":1578669302609},{"_id":"themes/BlueLake/languages/tr.yml","hash":"89a834a6b6616ac7289968cace76e2fbf0335787","modified":1578669302610},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"7cb3fd09b74c39fbbed2b0e079d453c45b2085bf","modified":1578669302610},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"f0ce05b7f99d7e8a37ce899b4875e5b03133cf2c","modified":1578669302610},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1578669302614},{"_id":"themes/BlueLake/layout/base.jade","hash":"7ffc6e45a3693ce5c80ce8eb37fb394b4b3de453","modified":1578669302614},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1578669302614},{"_id":"themes/BlueLake/layout/index.jade","hash":"ec2a52c8e38c0f164efe591540d39602f82925b1","modified":1578669302614},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1578669302614},{"_id":"themes/BlueLake/layout/post.jade","hash":"fcca4a1bb09cc5b7f1328f5871ef2b5d36abcb49","modified":1578669302614},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1578669302614},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1578669302615},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1578669302616},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"e8e98c99b8f9e5f260403903b875a2f08bfb2577","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"4a89bf43d750e0f53d2c2223057679e87baf411d","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"ebde5da62af045c5ff36882bbae08757c48c0cae","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"7736811d57583aa792f966ed260fb1e9b5a8e505","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1578669302611},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1578669302612},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1578669302612},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"095cd4eb2346c07dd30b166e7318d6e78449bd84","modified":1578669302612},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1578669302612},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1578669302612},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"7e09dd56147047f6b193e25e60d8adcaf54d458a","modified":1578669302612},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1578669302612},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1578669302613},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1578669302613},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1578669302613},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1578669302613},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1578669302613},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"e6079d1bfdb68b37b111bccc08e4f7d2be9f5eaa","modified":1578669302615},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1578669302615},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"368f86bf495dca4ab1d5b2e731a402adc062274e","modified":1578669302616},{"_id":"themes/BlueLake/source/css/style.styl","hash":"f32bdfcad9d86cdbe68a6459bd304c982c9fd2d5","modified":1578669302616},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1578669302616},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1578669302617},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1578669302617},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1578669302617},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1578669302620},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1578669302620},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1578669302620},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1578669302619},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1578669302618},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"dea3b7a6adb17969e57e5c3d71876245016be21a","modified":1578669302620},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1578669302621},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1578669302621},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1578669302621},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1578669302622},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1578669302622},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1578669302622},{"_id":"public/content.json","hash":"9a7636f1101285b5ec99d16e9c8014000afd8fa9","modified":1580047721339},{"_id":"public/2020/01/08/injection/index.html","hash":"ead9cf0965a14b4e059b7ca2cad68f41801ef416","modified":1578732995624},{"_id":"public/2020/01/06/db-index/index.html","hash":"ef933f98268794cc2bb145c64428e7ce64c7b5e1","modified":1578732995624},{"_id":"public/2020/01/06/redis-skiplist/index.html","hash":"f3d92c33632e5eda561694104196f03cc9437914","modified":1578732995624},{"_id":"public/2020/01/04/docker-operate/index.html","hash":"57adc20f3594a75ac0450329326e513185c3fba3","modified":1578732995624},{"_id":"public/2020/01/03/rancher-k8s-deploy/index.html","hash":"3cee9012343ecce358c20e1c142d2c344f342353","modified":1578732995624},{"_id":"public/2020/01/03/gitlab-deploy-md/index.html","hash":"07c821b0b801f08a9a6f9c461d6d3360b455175b","modified":1578732995624},{"_id":"public/2020/01/03/debug-k8s/index.html","hash":"3efa0c67a3cfcf87f49de48cbbc8ce60e22e1db4","modified":1578732995624},{"_id":"public/2020/01/03/hello-world/index.html","hash":"cbf13b98ad9144815810486ed09267ee1c4414d6","modified":1578732995624},{"_id":"public/archives/index.html","hash":"7b8e137653459e6fd0f758efa6eb7b2539e34f23","modified":1580047721339},{"_id":"public/archives/2020/index.html","hash":"334603009c0feea66aea03fdc7fd3fcc35b93afd","modified":1580047721339},{"_id":"public/archives/2020/01/index.html","hash":"3c353da30ebd90d8a0246aeb25d6c4e2b89b9000","modified":1580047721339},{"_id":"public/index.html","hash":"b0262396d947bb24f3cc7b9a8bc3baea105a8018","modified":1580047721339},{"_id":"public/tags/数据库/index.html","hash":"0054a49832306e549e8e0f78e8abc9c99f809230","modified":1578732995624},{"_id":"public/tags/kubernates/index.html","hash":"74b48227bfabe6518275c60514fb796f87a2a2d6","modified":1578732995624},{"_id":"public/tags/Go/index.html","hash":"e2d60c24984ee883d6a060fec44ca3d052a21b45","modified":1578732995624},{"_id":"public/tags/redis/index.html","hash":"a42e053994d6cb2254bcd78713026b4b28499e9a","modified":1578732995624},{"_id":"public/2020/01/06/golang-errors/index.html","hash":"5b6a67c157ab2a40726efbca34afac37ebeeaf67","modified":1578732995624},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1578669887329},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1578669887329},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1578669887329},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1578669887329},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1578669887329},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1578669887329},{"_id":"public/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1578669887329},{"_id":"public/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1578669887329},{"_id":"public/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1578669887329},{"_id":"public/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1578669887329},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1578669887329},{"_id":"public/css/highlight-dark.css","hash":"8bb8e85dacc5cae5c7e8ad0478ccb79ad6913c6f","modified":1578669887329},{"_id":"public/css/highlight.css","hash":"a1b0ae73703be0e5b0e0c3b5379c7adc3074374f","modified":1578669887329},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1578669887329},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1578669887329},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1578669887329},{"_id":"public/share/css/share.css","hash":"5adab1c310173c8726cf848dd7a57a968d001418","modified":1578669887329},{"_id":"public/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1578669887329},{"_id":"public/css/style.css","hash":"c5fb3fbad6951cb32c2704677c359fa4676e5cb4","modified":1578669887329},{"_id":"public/css/style-dark.css","hash":"b047820cbc89c91eba022e3e4899625d6370358a","modified":1578669887329},{"_id":"public/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1578669887329},{"_id":"public/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1578669887329},{"_id":"source/_posts/指南/Code_Splitting.md","hash":"86ede3fc08fda2827afba2184aac9bae265ac10c","modified":1578552180133},{"_id":"source/_posts/指南/Philosophy.md","hash":"fa6cb91dac57ccc118c14774a78911bba90f3e3d","modified":1578557448855},{"_id":"source/_posts/指南/Primary_Components.md","hash":"62080419e4770b71854c8b279a0de2dc4ad6eca8","modified":1578548166684},{"_id":"source/_posts/指南/Redux整合.md","hash":"b1c9b150d1cfc6f70e9a7b362a9b3cde0be20672","modified":1578559384840},{"_id":"source/_posts/指南/Scroll_Restoration.md","hash":"7fc6ff64fcf23c20fad3758fa71ce72cd64347c7","modified":1578555901256},{"_id":"source/_posts/指南/Server_Rendering.md","hash":"f610dc54b980e930e0ad75ac73d3167d77a16d7b","modified":1578551334359},{"_id":"source/_posts/指南/Start.md","hash":"9f638b4b60809aef95ab58389c9bc892e774f2b5","modified":1578544665995},{"_id":"source/_posts/指南/Static_Routes.md","hash":"2a44beaf1991f2899dc1812fb78efac11bf0385c","modified":1578559477778},{"_id":"source/_posts/指南/Testing.md","hash":"7bff43ac93ac116b36041feeecbe06f003ed5f29","modified":1578558900942},{"_id":"public/2020/01/09/指南/Static_Routes/index.html","hash":"180a423d5efb20830b51a1b1f3d84ce5bc63ad7c","modified":1578732697281},{"_id":"public/2020/01/09/指南/Redux整合/index.html","hash":"2d6e4a04acc8c6a0ae29007247ce7c599e268307","modified":1578732697281},{"_id":"public/2020/01/09/指南/Code_Splitting/index.html","hash":"ff5b8346066282d2f99f2b71722000ddcacf5991","modified":1578732697281},{"_id":"public/archives/page/2/index.html","hash":"7157c8bbb89450b190e4788fc0dc7dce403bb342","modified":1580047721339},{"_id":"public/archives/2020/page/2/index.html","hash":"e8b636fb9ae04978ae45553526b21d145cf08915","modified":1580047721339},{"_id":"public/archives/2020/01/page/2/index.html","hash":"e976264a4008ed2578e914873b3afca617d98250","modified":1580047721339},{"_id":"public/page/2/index.html","hash":"cd6fa79066f222bd2b7bcc370d7169942fa18471","modified":1580047721339},{"_id":"public/2020/01/09/指南/Testing/index.html","hash":"30b86bf3ac41d31922fbfb156eaf7245313f0886","modified":1578732697281},{"_id":"public/2020/01/09/指南/Philosophy/index.html","hash":"bbc70dda9ff8c1405694d2969c7606a869f44695","modified":1578732697281},{"_id":"public/2020/01/09/指南/Scroll_Restoration/index.html","hash":"ced4fe53a570d46167e66b1712ccc94508087de0","modified":1578732697281},{"_id":"public/2020/01/09/指南/Server_Rendering/index.html","hash":"386b5e595ef39870478ad8bee8c783a9915e2e3c","modified":1578732697281},{"_id":"public/2020/01/09/指南/Primary_Components/index.html","hash":"59031fe8a1d55aa1b7a93a20486535003dfcaa54","modified":1578732697281},{"_id":"public/2020/01/09/指南/Start/index.html","hash":"74336ac34b9abcdeaa6eef51aba92768cd06f361","modified":1578732697281},{"_id":"source/_posts/Api/Router.md","hash":"d169126a3bad1397b0a609680d0e768202f851ea","modified":1578732682528},{"_id":"source/_posts/Api/Switch.md","hash":"ffd07cfd29b263d03e135b6006783a050ab8fd1c","modified":1578645369619},{"_id":"source/_posts/examples/Basic.md","hash":"c14b6dd455d2061f92d6babfb9b8ea893f3b5d74","modified":1578580569022},{"_id":"source/_posts/Api/history.md","hash":"6564820da933ceab17faec63b778c936f82b5b35","modified":1578647545321},{"_id":"source/_posts/Api/location.md","hash":"58bd00eac45b6149295389868742fdd525d80142","modified":1578648611774},{"_id":"source/_posts/examples/custom_link.md","hash":"accb9013a82afd4060831e0f7ca55208d398968f","modified":1578639638312},{"_id":"source/_posts/examples/redirect.md","hash":"c67fc44ab1cb7468b345c2f62c50cf748e4efbb5","modified":1578586259700},{"_id":"source/_posts/examples/url_parameters.md","hash":"0ae65634e964d32358c144e8058b66ef7ce13b73","modified":1578584824680},{"_id":"source/_posts/examples/嵌套.md","hash":"e337f3d9318f6602f73f2d8f540d91051f297094","modified":1578582737179},{"_id":"source/_posts/Api/Route.md","hash":"888de2c8de90576028dbf849a4987a71cb608334","modified":1578643454469},{"_id":"public/2020/01/10/Api/location/index.html","hash":"91681d568069d1acac529c22e62b0a1ee282bec3","modified":1578732697281},{"_id":"public/2020/01/10/Api/history/index.html","hash":"3cc6726ed520ca83a6573a9ced6590de4e127575","modified":1578732697281},{"_id":"public/2020/01/10/Api/Router/index.html","hash":"eb3bb43a682d9ded1c22b44f184d4c6806388860","modified":1578732697281},{"_id":"public/2020/01/10/examples/custom_link/index.html","hash":"00dfdf6f44557a4e94eb540fa72f0de2a792e493","modified":1578732697281},{"_id":"public/2020/01/09/examples/url_parameters/index.html","hash":"ff120479fbc4e28569ed29a5f1ed3b03760d6b9d","modified":1578732697281},{"_id":"public/2020/01/09/examples/Basic/index.html","hash":"d6f1b0d0a408114f74e46deb1891ebcb777893bb","modified":1578732697281},{"_id":"public/archives/page/3/index.html","hash":"38b605720b8f65260debddfe2308e8f1f86deb6d","modified":1580047721339},{"_id":"public/archives/2020/page/3/index.html","hash":"e73601f9de0e445c8677858d129e04f201ea0d9e","modified":1580047721339},{"_id":"public/archives/2020/01/page/3/index.html","hash":"bd13138b635ec895249cbe2976a2426bfba2dbe7","modified":1580047721339},{"_id":"public/page/3/index.html","hash":"0a863ed882638fffb9a20260dff19f885b20c193","modified":1580047721339},{"_id":"public/2020/01/10/Api/Switch/index.html","hash":"e37e3edbf1a659c1671368ce2e680d4b354ae2f8","modified":1578732697281},{"_id":"public/2020/01/10/Api/Route/index.html","hash":"d87211272d0ad88b10c98726f025b9facf980c9d","modified":1578732697281},{"_id":"public/2020/01/10/examples/redirect/index.html","hash":"9f32c736e0111d9d12ce809be827ccc9aed758a6","modified":1578732697281},{"_id":"public/2020/01/09/examples/嵌套/index.html","hash":"ce005b99eb3eec946c8b30b4bf0e1aa880bd86c0","modified":1578732697281},{"_id":"source/_posts/react_router/Api/Route.md","hash":"888de2c8de90576028dbf849a4987a71cb608334","modified":1578643454469},{"_id":"source/_posts/react_router/Api/Router.md","hash":"d916db87dad4147813ba255a04629a2cacafb983","modified":1578732991951},{"_id":"source/_posts/react_router/Api/Switch.md","hash":"ffd07cfd29b263d03e135b6006783a050ab8fd1c","modified":1578645369619},{"_id":"source/_posts/react_router/Api/history.md","hash":"6564820da933ceab17faec63b778c936f82b5b35","modified":1578647545321},{"_id":"source/_posts/react_router/Api/location.md","hash":"58bd00eac45b6149295389868742fdd525d80142","modified":1578648611774},{"_id":"source/_posts/react_router/examples/Basic.md","hash":"c14b6dd455d2061f92d6babfb9b8ea893f3b5d74","modified":1578580569022},{"_id":"source/_posts/react_router/examples/custom_link.md","hash":"fc4890500042ba0a2ac79cda7dadb4c843302482","modified":1578912152359},{"_id":"source/_posts/react_router/examples/redirect.md","hash":"c67fc44ab1cb7468b345c2f62c50cf748e4efbb5","modified":1578586259700},{"_id":"source/_posts/react_router/examples/url_parameters.md","hash":"3f1389142d561150eef9d09fa343f1dcfeea9bef","modified":1578904973369},{"_id":"source/_posts/react_router/examples/嵌套.md","hash":"e337f3d9318f6602f73f2d8f540d91051f297094","modified":1578582737179},{"_id":"source/_posts/react_router/指南/Code_Splitting.md","hash":"86ede3fc08fda2827afba2184aac9bae265ac10c","modified":1578552180133},{"_id":"source/_posts/react_router/指南/Philosophy.md","hash":"fa6cb91dac57ccc118c14774a78911bba90f3e3d","modified":1578557448855},{"_id":"source/_posts/react_router/指南/Primary_Components.md","hash":"62080419e4770b71854c8b279a0de2dc4ad6eca8","modified":1578548166684},{"_id":"source/_posts/react_router/指南/Redux整合.md","hash":"b1c9b150d1cfc6f70e9a7b362a9b3cde0be20672","modified":1578559384840},{"_id":"source/_posts/react_router/指南/Scroll_Restoration.md","hash":"7fc6ff64fcf23c20fad3758fa71ce72cd64347c7","modified":1578555901256},{"_id":"source/_posts/react_router/指南/Server_Rendering.md","hash":"f610dc54b980e930e0ad75ac73d3167d77a16d7b","modified":1578551334359},{"_id":"source/_posts/react_router/指南/Start.md","hash":"9f638b4b60809aef95ab58389c9bc892e774f2b5","modified":1578544665995},{"_id":"source/_posts/react_router/指南/Static_Routes.md","hash":"2a44beaf1991f2899dc1812fb78efac11bf0385c","modified":1578559477778},{"_id":"source/_posts/react_router/指南/Testing.md","hash":"7bff43ac93ac116b36041feeecbe06f003ed5f29","modified":1578558900942},{"_id":"public/2020/01/10/react_router/Api/location/index.html","hash":"96188e58962c321f9b285719fc222fabb86bee19","modified":1580047721339},{"_id":"public/2020/01/10/react_router/Api/history/index.html","hash":"7a47a44afe75fafc7354df508a4618f275b1167a","modified":1580047721339},{"_id":"public/2020/01/10/react_router/Api/Router/index.html","hash":"c03802cfc81dc604a0337e186ac30e312120c9a8","modified":1580047721339},{"_id":"public/2020/01/10/react_router/examples/custom_link/index.html","hash":"def0af85bc60e6b653c5dee3c212a44d4ee7c257","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Static_Routes/index.html","hash":"ebbc80c05a373328fc69258d14118606456862b7","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Redux整合/index.html","hash":"c0c5a83a1fe47e8713e6478013548e882df66fbd","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Code_Splitting/index.html","hash":"9a558653ab4164e1fa0e54a4bf77c095fb801aea","modified":1580047721339},{"_id":"public/2020/01/10/react_router/Api/Switch/index.html","hash":"4e44bfbfc8db13c4d990c88fcc34b64727a745cf","modified":1580047721339},{"_id":"public/2020/01/10/react_router/Api/Route/index.html","hash":"2d1a19bd09c7c0b5dd26a7a5fdd62f2592065ae3","modified":1580047721339},{"_id":"public/2020/01/10/react_router/examples/redirect/index.html","hash":"20d6e73844c0429042a48cc63ab3d76a86b905a4","modified":1580047721339},{"_id":"public/2020/01/09/react_router/examples/嵌套/index.html","hash":"0847b6ed4e3422e56c2723faa6fcd4b4ca1d178f","modified":1580047721339},{"_id":"public/2020/01/09/react_router/examples/url_parameters/index.html","hash":"45cf415911d832132650ed0d3be54980b0c42dbc","modified":1580047721339},{"_id":"public/2020/01/09/react_router/examples/Basic/index.html","hash":"c94b9d3e96ba4232046bdd9b1e03719ab17e2a67","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Testing/index.html","hash":"b67c8a0e21ff642b6199730766ba3fa49e2920be","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Philosophy/index.html","hash":"87d1c0172eca0748311460346517ca03a4db92c6","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Scroll_Restoration/index.html","hash":"4b6767f1f685862e8ade223895dc07d145e241be","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Server_Rendering/index.html","hash":"f9df5ec035a6d1dfc0548017aba04adbcfa81896","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Primary_Components/index.html","hash":"93c34770229a75777581ca9d6e011a194f543ef9","modified":1580047721339},{"_id":"public/2020/01/09/react_router/指南/Start/index.html","hash":"c79125355a7919f9e71aba8edf4062eafcf46c5c","modified":1580047721339},{"_id":"source/_posts/react_router/Api/BrowserRouter.md","hash":"0b8171db9ace52634f2be50f1746911d46bd90b6","modified":1578904718642},{"_id":"source/_posts/react_router/Api/HashRouter.md","hash":"b12baed26c3cb94bdcf3871ab6f11717f45c1954","modified":1578904399505},{"_id":"source/_posts/react_router/Api/Hooks.md","hash":"e36f35de57be9e3f8999041f5c7a125e5da022fd","modified":1578896813189},{"_id":"source/_posts/react_router/Api/Link.md","hash":"3161fce4e476edefb460ac320d32748faec67d29","modified":1578898725280},{"_id":"source/_posts/react_router/Api/MemoryRouter.md","hash":"4487e1280fb40664e7faae6b7ce5d4e2325a66e4","modified":1578903846731},{"_id":"source/_posts/react_router/Api/NavLink.md","hash":"a7f8aa6ed4799676a4a060ed5e9a5e8941cb04a9","modified":1578900633097},{"_id":"source/_posts/react_router/Api/Prompt.md","hash":"6e5e986de8deb5c89c7e347950b84167a5e34132","modified":1578903908197},{"_id":"source/_posts/react_router/Api/StaticRouter.md","hash":"ad4f5cccfc1a656efaef2b8e2f5c3b95dc517d8b","modified":1578903554079},{"_id":"source/_posts/react_router/Api/match.md","hash":"3030a4b7f67849239c444a1882ba580ca6381160","modified":1578902880828},{"_id":"source/_posts/react_router/Api/matchPath.md","hash":"5468df99ca9c5aeab4cc9fac03e3b56c5b257d0a","modified":1578900917653},{"_id":"source/_posts/react_router/Api/withRouter.md","hash":"4e27a81b62a2d5de706add92fd2821876bd73ff7","modified":1578901635104},{"_id":"public/2020/01/13/react_router/Api/BrowserRouter/index.html","hash":"ffad9d1153b080e4679c2977afb67f5e7fc1b041","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/HashRouter/index.html","hash":"0f9587aea88e998f889c8fdd122c905435587cac","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/Prompt/index.html","hash":"5ac0fa68a29b4497ef323c86548b148f83b46211","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/MemoryRouter/index.html","hash":"112efc9a5fd01e4db73382daa28748a32f8ddd69","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/StaticRouter/index.html","hash":"21228886933e88fb12d79eeac4d6e736c26dfa7b","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/match/index.html","hash":"a5dd8548bec719cc6fbe9d5f74d2343fed481128","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/withRouter/index.html","hash":"39c1f42670ec01187d4a530f17ef7346dfc3e314","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/matchPath/index.html","hash":"9b1e8473d8e6093007c477ae50eec91c53ba1280","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/NavLink/index.html","hash":"748c675009066e452b754463212e64ec38a166af","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/Link/index.html","hash":"b350467207f6f4a8ab6f9a6a3a6d2b4250d57997","modified":1580047721339},{"_id":"public/2020/01/13/react_router/Api/Hooks/index.html","hash":"dc04a94476dc79b64b0f86fd9b0cb4e6a613cdca","modified":1580047721339},{"_id":"source/_posts/react_router/examples/Animated_Transitions.md","hash":"33700fa2371d9cab6afbd1444751ccca0be8459d","modified":1578913461650},{"_id":"source/_posts/react_router/examples/Modal_Gallery.md","hash":"9f50e484780007caecd981f3b0666a446bcd2df2","modified":1578913125726},{"_id":"source/_posts/react_router/examples/No_Match.md","hash":"b6f575128bfd4565b0290f2995e91d66d1369a01","modified":1578914297273},{"_id":"source/_posts/react_router/examples/Preventing_Transition.md","hash":"17ece86f065047537ba5b2a24a1aa459d8a0eb42","modified":1578914749919},{"_id":"source/_posts/react_router/examples/Query_Paramenters.md","hash":"e0e5dac60fc0e80e19ebfea50c0fa11b557939c8","modified":1578912516871},{"_id":"source/_posts/react_router/examples/Recursive_Paths.md","hash":"0889e02c7f70ca88efebec37f51ba2a853f3db1e","modified":1578914076107},{"_id":"source/_posts/react_router/examples/Route_Config.md","hash":"cc788bf1ac6de9a0191a7d5b65d5e0735381dc65","modified":1578913332146},{"_id":"source/_posts/react_router/examples/StaticRouter_Context.md","hash":"dccd97552fb3eb594348e0ff0d1b7688edbcc1ef","modified":1578912715744},{"_id":"source/_posts/react_router/examples/Siderbar.md","hash":"587ee635b0b3fb8157d0c09d6243b60f6d43a6ea","modified":1578913587881},{"_id":"public/2020/01/13/react_router/examples/Animated_Transitions/index.html","hash":"0959d469348c983251dc00b86ef1be644483662b","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/StaticRouter_Context/index.html","hash":"0f6eeeb73c02b23898605ce3eb409594a019bc89","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Query_Paramenters/index.html","hash":"c1a447280ed7abc8db6a53dff6c9096435485d3e","modified":1580047721339},{"_id":"public/archives/page/4/index.html","hash":"227ff265c527de402f8102487a94fd274ee79665","modified":1580047721339},{"_id":"public/archives/2020/page/4/index.html","hash":"d495f74682bd0129655c8eb59800cb49f0ebec11","modified":1580047721339},{"_id":"public/archives/2020/01/page/4/index.html","hash":"a2425700c4e01b2ed93cdb2b75828e1456a382e9","modified":1580047721339},{"_id":"public/page/4/index.html","hash":"165d392ebc6967399249d421c9be8e057e20ba18","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Preventing_Transition/index.html","hash":"2684f0c472a0f14bb1df6ea10206dae2febc7c99","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Recursive_Paths/index.html","hash":"e3eadba8fecd98d19f0f977deb5e1035ce5f514d","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/No_Match/index.html","hash":"599f474f2bb6386296be3676ff4d4f7dc55e3f59","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Siderbar/index.html","hash":"f5c9528b086a8d8f10ceac345597a84bde462376","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Route_Config/index.html","hash":"168dd7b5c0a1440d71c5a6f05873b681db55df75","modified":1580047721339},{"_id":"public/2020/01/13/react_router/examples/Modal_Gallery/index.html","hash":"9b713ffe6b9820e438c79e11c82df54781442d54","modified":1580047721339},{"_id":"source/_posts/面试题/react_面试题.md","hash":"e7150e5034f8d58fa6b2ed3d00ebbae5cb2d463d","modified":1578974812668},{"_id":"public/2020/01/14/面试题/react_面试题/index.html","hash":"705e882f8122929fb00830b6c644d2c055c91c63","modified":1580047721339},{"_id":"source/_posts/docker/error.md","hash":"a15709779a05bd74a53f24c3bfdd3a120799db31","modified":1578995205105},{"_id":"source/_posts/NodeJS/MongoDB.md","hash":"9738504704528e829e1e37b7130c58b08358e4a1","modified":1578991815042},{"_id":"public/2020/01/14/docker/error/index.html","hash":"b49437bc66a03a0a3e88bdb8f58c1c9fd136f1fe","modified":1580047721339},{"_id":"public/2020/01/14/NodeJS/MongoDB/index.html","hash":"da418c8594595588bbbb410a6a7d2b9bef4b1424","modified":1580047721339},{"_id":"public/page/5/index.html","hash":"a3093ed3d0eae86711a50650944372068743a94d","modified":1580047721339},{"_id":"public/archives/2020/01/page/5/index.html","hash":"5268cdaf17bbc900fa4d8b8c1a23d86f231c8f76","modified":1580047721339},{"_id":"public/archives/page/5/index.html","hash":"a11fd1927d4dc9b065b46a7f58a290528625d22a","modified":1580047721339},{"_id":"public/archives/2020/page/5/index.html","hash":"13f1c40f88ed7ee9e4ce286701d4bff361689a5f","modified":1580047721339},{"_id":"source/_posts/NodeJS/MySQL.md","hash":"97ef1079639a842f3ecfa097a49333c64946444d","modified":1579529094149},{"_id":"source/_posts/eggjs/service.md","hash":"8a2f259948db45462a06055924a2f0a3d51c6542","modified":1579267090051},{"_id":"source/_posts/面试题/javascript面试题.md","hash":"c44f2a77013efca06cc368e74c1042314f649327","modified":1579523798116},{"_id":"source/_posts/面试题/nodejs与javascript的区别.md","hash":"fd6115a1452a6153754ebb88e4d264d6bc18904d","modified":1579523798114},{"_id":"public/2020/01/20/面试题/javascript面试题/index.html","hash":"a0b47cec635cc1a9968dea7caa92b01c5fbf551d","modified":1580047721339},{"_id":"public/2020/01/16/eggjs/service/index.html","hash":"f45a0e45f584688fdd479aa487175e199700eb9a","modified":1580047721339},{"_id":"public/2020/01/19/面试题/nodejs与javascript的区别/index.html","hash":"7076f6e9595aa9fc3958794f694e87f7472b2d47","modified":1580047721339},{"_id":"public/2020/01/20/NodeJS/MySQL/index.html","hash":"fbf9b5b6c68e4e28117f227d900ce750496f2d46","modified":1580047721339},{"_id":"source/_posts/docker/mongoDBError.md","hash":"a15709779a05bd74a53f24c3bfdd3a120799db31","modified":1579586841488},{"_id":"source/_posts/docker/mysqlError.md","hash":"14ae88179dfd2f2b9fc1162f116d35ef9323da15","modified":1579586791293},{"_id":"public/2020/01/21/docker/mysqlError/index.html","hash":"e32e37d03e34c68c47706a2883455fe73f00ef9e","modified":1580047721339},{"_id":"public/2020/01/14/docker/mongoDBError/index.html","hash":"e3297a4e1dab9f5e9481f81ec0add99990a20c73","modified":1580047721339},{"_id":"source/_posts/gitError.md","hash":"eec0865478856fab5d7fcf7d6a78da8ecdce5c68","modified":1580047699658},{"_id":"public/2020/01/26/gitError/index.html","hash":"94aec65bbac660b18a4db6417b111e036ece3927","modified":1580047721339}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"\n##\tRoute render methods\n建议使用`<Route>`渲染某些内容的方法是使用子元素，如上所示。但是，还有一些其他方法可用于使用`<Route>`渲染内容。提供这些主要是为了支持在引入`hook`之前使用早期版本的路由器构建的应用程序。\n\n- `<Route component>`\n- `<Route render>`\n- ` <Route children> function`\n 您应该在给定的<Route>上仅使用这些道具之一。请参阅下面的说明以了解它们之间的区别。\n \n ###\tRoute props\n 所有这三种渲染方法将通过相同的三个路由道具。\n - match\n - location\n - history\n\n ###  component\n 一个仅在位置匹配时才呈现的React组件。它将与路线道具一起渲染。\n \n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// All route props (match, location and history) are available to User\nfunction User(props) {\n  return <h1>Hello {props.match.params.username}!</h1>;\n}\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/user/:username\" component={User} />\n  </Router>,\n  node\n);```\n\n当您使用组件（而不是下面的渲染器或子组件）时，路由器会使用React.createElement从给定的组件中创建一个新的React元素。这意味着，如果您向组件prop提供内联函数，则将在每个渲染中创建一个新组件。这将导致现有组件的卸载和新组件的安装，而不仅仅是更新现有组件。使用内联函数进行内联渲染时，请使用render或children道具（如下）。\n\n###\t\trender: func\n这样可以方便地进行内联渲染和包装，而无需进行上述不必要的重新安装。无需使用组件prop为您创建新的React元素，而是可以传递位置匹配时要调用的函数。渲染道具功能可以访问与组件渲染道具相同的所有路线道具（匹配，位置和历史）。\n\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// convenient inline rendering\nReactDOM.render(\n  <Router>\n    <Route path=\"/home\" render={() => <div>Home</div>} />\n  </Router>,\n  node\n);\n\n// wrapping/composing\n// You can spread routeProps to make them available to your rendered Component\nfunction FadingRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={routeProps => (\n        <FadeIn>\n          <Component {...routeProps} />\n        </FadeIn>\n      )}\n    />\n  );\n}\n\nReactDOM.render(\n  <Router>\n    <FadingRoute path=\"/cool\" component={Something} />\n  </Router>,\n  node\n);\n```\n**警告**：`<Route组件>`优先于`<Route渲染>`，因此请勿在同一`<Route>`中同时使用两者。\n\n###\tchildren: func\n有时您需要渲染路径是否与位置匹配。在这种情况下，您可以使用child道具功能。它与render完全一样，除了是否存在匹配项而被调用。\n\n子级渲染道具将接收与组件和渲染方法相同的所有路由道具，除非当路线未能与URL匹配时，则match为null。这使您可以根据路由是否匹配来动态调整UI。如果路线匹配，我们在此处添加一个活动班级。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route\n} from \"react-router-dom\";\n\nfunction ListItemLink({ to, ...rest }) {\n  return (\n    <Route\n      path={to}\n      children={({ match }) => (\n        <li className={match ? \"active\" : \"\"}>\n          <Link to={to} {...rest} />\n        </li>\n      )}\n    />\n  );\n}\n\nReactDOM.render(\n  <Router>\n    <ul>\n      <ListItemLink to=\"/somewhere\" />\n      <ListItemLink to=\"/somewhere-else\" />\n    </ul>\n  </Router>,\n  node\n);\n```\n这对于动画也可能有用：\n```js\n<Route\n  children={({ match, ...rest }) => (\n    {/* Animate will always render, so you can use lifecycles\n        to animate its child in and out */}\n    <Animate>\n      {match && <Something {...rest}/>}\n    </Animate>\n  )}\n/>\n```\n**警告**：`<Route children>`优先于`<Route component>`和`<Route render>`，因此请不要在同一`<Route>`中使用多个\n\n###\tpath: string | string[]\npath-to-regexp@^1.7.0可以理解的任何有效URL路径或路径数组。\n```js\n<Route path=\"/users/:id\">\n  <User />\n</Route>\n```\n```js\n<Route path={[\"/users/:id\", \"/profile/:id\"]}>\n  <User />\n</Route>\n```\n 没有路径的路线总是匹配的。\n \n ### exact: bool\nexact:true时，只有在路径与location.pathname完全匹配时才匹配\n\n|  path | location.pathname  |exact   |  matches ?|\n| :------------ | :------------ | :------------ | :------------ |\n| /one  |   /one/two|   true| no   |\n|  /one  | /one/two  |  false |  yes |\n\n###\tstrict: bool\n设置为true时，带有斜杠的路径将只匹配带有斜杠的location.pathname。当location.pathname中有其他URL段时，这无效。\n ```js\n <Route strict path=\"/one/\">\n  <About />\n</Route>\n```\n| path  | location.pathname  |  matches? |\n| :------------ | :------------ | :------------ |\n|/one/   |/one/   | no   |\n| /one/  |  /one/ |  yes |\n|  /one/ |  /one/two |  yes |\n\n**警告**：strict可以用于强制location.pathname不带斜杠，但是要做到这一点，strict和精确都必须为真。\n```js\n<Route exact strict path=\"/one\">\n  <About />\n</Route>\n```\n\n| path  | location.pathname  |  matches? |\n| :------------ | :------------ | :------------ |\n|/one/   |/one/   | yes   |\n| /one/  |  /one/ |no |\n|  /one/ |  /one/two |  no |\n\n###\tlocation: object\n`<Route>`元素尝试将其路径与当前历史记录位置（通常是当前浏览器URL）匹配。但是，也可以传递路径名不同的位置进行匹配。\n\n如需要将`<Route>`匹配到当前历史记录位置以外的位置时，这很有用，如Animated Transitions示例所示。\n\n如果`<Route>`元素包装在`<Switch>`中并且与传递给`<Switch>`的位置（或当前历史记录位置）相匹配，则传递给`<Route>`的位置prop将被<Switch >（在此处给出）。\n\n### sensitive: bool\n为true时，如果路径区分大小写，则将匹配。\n```js\n<Route sensitive path=\"/one\">\n  <About />\n</Route>\n```\n|  path | location.pathname  |sensitive   |  matches? |\n| :------------ | :------------ | :------------ | :------------ |\n| /one  |   /one/two|   true| no   |\n|  /one  | /one/two  |  false |  yes |\n\n\n\n\n\n\n","source":"_posts/react_router/Api/Route.md","raw":"\n##\tRoute render methods\n建议使用`<Route>`渲染某些内容的方法是使用子元素，如上所示。但是，还有一些其他方法可用于使用`<Route>`渲染内容。提供这些主要是为了支持在引入`hook`之前使用早期版本的路由器构建的应用程序。\n\n- `<Route component>`\n- `<Route render>`\n- ` <Route children> function`\n 您应该在给定的<Route>上仅使用这些道具之一。请参阅下面的说明以了解它们之间的区别。\n \n ###\tRoute props\n 所有这三种渲染方法将通过相同的三个路由道具。\n - match\n - location\n - history\n\n ###  component\n 一个仅在位置匹配时才呈现的React组件。它将与路线道具一起渲染。\n \n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// All route props (match, location and history) are available to User\nfunction User(props) {\n  return <h1>Hello {props.match.params.username}!</h1>;\n}\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/user/:username\" component={User} />\n  </Router>,\n  node\n);```\n\n当您使用组件（而不是下面的渲染器或子组件）时，路由器会使用React.createElement从给定的组件中创建一个新的React元素。这意味着，如果您向组件prop提供内联函数，则将在每个渲染中创建一个新组件。这将导致现有组件的卸载和新组件的安装，而不仅仅是更新现有组件。使用内联函数进行内联渲染时，请使用render或children道具（如下）。\n\n###\t\trender: func\n这样可以方便地进行内联渲染和包装，而无需进行上述不必要的重新安装。无需使用组件prop为您创建新的React元素，而是可以传递位置匹配时要调用的函数。渲染道具功能可以访问与组件渲染道具相同的所有路线道具（匹配，位置和历史）。\n\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// convenient inline rendering\nReactDOM.render(\n  <Router>\n    <Route path=\"/home\" render={() => <div>Home</div>} />\n  </Router>,\n  node\n);\n\n// wrapping/composing\n// You can spread routeProps to make them available to your rendered Component\nfunction FadingRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={routeProps => (\n        <FadeIn>\n          <Component {...routeProps} />\n        </FadeIn>\n      )}\n    />\n  );\n}\n\nReactDOM.render(\n  <Router>\n    <FadingRoute path=\"/cool\" component={Something} />\n  </Router>,\n  node\n);\n```\n**警告**：`<Route组件>`优先于`<Route渲染>`，因此请勿在同一`<Route>`中同时使用两者。\n\n###\tchildren: func\n有时您需要渲染路径是否与位置匹配。在这种情况下，您可以使用child道具功能。它与render完全一样，除了是否存在匹配项而被调用。\n\n子级渲染道具将接收与组件和渲染方法相同的所有路由道具，除非当路线未能与URL匹配时，则match为null。这使您可以根据路由是否匹配来动态调整UI。如果路线匹配，我们在此处添加一个活动班级。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route\n} from \"react-router-dom\";\n\nfunction ListItemLink({ to, ...rest }) {\n  return (\n    <Route\n      path={to}\n      children={({ match }) => (\n        <li className={match ? \"active\" : \"\"}>\n          <Link to={to} {...rest} />\n        </li>\n      )}\n    />\n  );\n}\n\nReactDOM.render(\n  <Router>\n    <ul>\n      <ListItemLink to=\"/somewhere\" />\n      <ListItemLink to=\"/somewhere-else\" />\n    </ul>\n  </Router>,\n  node\n);\n```\n这对于动画也可能有用：\n```js\n<Route\n  children={({ match, ...rest }) => (\n    {/* Animate will always render, so you can use lifecycles\n        to animate its child in and out */}\n    <Animate>\n      {match && <Something {...rest}/>}\n    </Animate>\n  )}\n/>\n```\n**警告**：`<Route children>`优先于`<Route component>`和`<Route render>`，因此请不要在同一`<Route>`中使用多个\n\n###\tpath: string | string[]\npath-to-regexp@^1.7.0可以理解的任何有效URL路径或路径数组。\n```js\n<Route path=\"/users/:id\">\n  <User />\n</Route>\n```\n```js\n<Route path={[\"/users/:id\", \"/profile/:id\"]}>\n  <User />\n</Route>\n```\n 没有路径的路线总是匹配的。\n \n ### exact: bool\nexact:true时，只有在路径与location.pathname完全匹配时才匹配\n\n|  path | location.pathname  |exact   |  matches ?|\n| :------------ | :------------ | :------------ | :------------ |\n| /one  |   /one/two|   true| no   |\n|  /one  | /one/two  |  false |  yes |\n\n###\tstrict: bool\n设置为true时，带有斜杠的路径将只匹配带有斜杠的location.pathname。当location.pathname中有其他URL段时，这无效。\n ```js\n <Route strict path=\"/one/\">\n  <About />\n</Route>\n```\n| path  | location.pathname  |  matches? |\n| :------------ | :------------ | :------------ |\n|/one/   |/one/   | no   |\n| /one/  |  /one/ |  yes |\n|  /one/ |  /one/two |  yes |\n\n**警告**：strict可以用于强制location.pathname不带斜杠，但是要做到这一点，strict和精确都必须为真。\n```js\n<Route exact strict path=\"/one\">\n  <About />\n</Route>\n```\n\n| path  | location.pathname  |  matches? |\n| :------------ | :------------ | :------------ |\n|/one/   |/one/   | yes   |\n| /one/  |  /one/ |no |\n|  /one/ |  /one/two |  no |\n\n###\tlocation: object\n`<Route>`元素尝试将其路径与当前历史记录位置（通常是当前浏览器URL）匹配。但是，也可以传递路径名不同的位置进行匹配。\n\n如需要将`<Route>`匹配到当前历史记录位置以外的位置时，这很有用，如Animated Transitions示例所示。\n\n如果`<Route>`元素包装在`<Switch>`中并且与传递给`<Switch>`的位置（或当前历史记录位置）相匹配，则传递给`<Route>`的位置prop将被<Switch >（在此处给出）。\n\n### sensitive: bool\n为true时，如果路径区分大小写，则将匹配。\n```js\n<Route sensitive path=\"/one\">\n  <About />\n</Route>\n```\n|  path | location.pathname  |sensitive   |  matches? |\n| :------------ | :------------ | :------------ | :------------ |\n| /one  |   /one/two|   true| no   |\n|  /one  | /one/two  |  false |  yes |\n\n\n\n\n\n\n","slug":"react_router/Api/Route","published":1,"date":"2020-01-10T07:11:34.794Z","updated":"2020-01-10T08:04:14.469Z","title":"react_router/Api/Route","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4g70000mkco99ll9831","content":"<h2 id=\"Route-render-methods\"><a href=\"#Route-render-methods\" class=\"headerlink\" title=\"Route render methods\"></a>Route render methods</h2><p>建议使用<code>&lt;Route&gt;</code>渲染某些内容的方法是使用子元素，如上所示。但是，还有一些其他方法可用于使用<code>&lt;Route&gt;</code>渲染内容。提供这些主要是为了支持在引入<code>hook</code>之前使用早期版本的路由器构建的应用程序。</p>\n<ul>\n<li><p><code>&lt;Route component&gt;</code></p>\n</li>\n<li><p><code>&lt;Route render&gt;</code></p>\n</li>\n<li><p><code>&lt;Route children&gt; function</code><br>您应该在给定的<Route>上仅使用这些道具之一。请参阅下面的说明以了解它们之间的区别。</p>\n<h3 id=\"Route-props\"><a href=\"#Route-props\" class=\"headerlink\" title=\"Route props\"></a>Route props</h3><p>所有这三种渲染方法将通过相同的三个路由道具。</p>\n<ul>\n<li>match</li>\n<li>location</li>\n<li>history</li>\n</ul>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><p>一个仅在位置匹配时才呈现的React组件。它将与路线道具一起渲染。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All route props (match, location and history) are available to User</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello &#123;props.match.params.username&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/user/:username\"</span> component=&#123;User&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>当您使用组件（而不是下面的渲染器或子组件）时，路由器会使用React.createElement从给定的组件中创建一个新的React元素。这意味着，如果您向组件prop提供内联函数，则将在每个渲染中创建一个新组件。这将导致现有组件的卸载和新组件的安装，而不仅仅是更新现有组件。使用内联函数进行内联渲染时，请使用render或children道具（如下）。</p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a>render: func</h3><p>这样可以方便地进行内联渲染和包装，而无需进行上述不必要的重新安装。无需使用组件prop为您创建新的React元素，而是可以传递位置匹配时要调用的函数。渲染道具功能可以访问与组件渲染道具相同的所有路线道具（匹配，位置和历史）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// convenient inline rendering</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ wrapping/</span>composing</span><br><span class=\"line\"><span class=\"comment\">// You can spread routeProps to make them available to your rendered Component</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FadingRoute</span>(<span class=\"params\">&#123; component: Component, ...rest &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      &#123;...rest&#125;</span><br><span class=\"line\">      render=&#123;routeProps =&gt; (</span><br><span class=\"line\">        &lt;FadeIn&gt;</span><br><span class=\"line\">          &lt;Component &#123;...routeProps&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/FadeIn&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;FadingRoute path=<span class=\"string\">\"/cool\"</span> component=&#123;Something&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p><strong>警告</strong>：<code>&lt;Route组件&gt;</code>优先于<code>&lt;Route渲染&gt;</code>，因此请勿在同一<code>&lt;Route&gt;</code>中同时使用两者。</p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a>children: func</h3><p>有时您需要渲染路径是否与位置匹配。在这种情况下，您可以使用child道具功能。它与render完全一样，除了是否存在匹配项而被调用。</p>\n<p>子级渲染道具将接收与组件和渲染方法相同的所有路由道具，除非当路线未能与URL匹配时，则match为null。这使您可以根据路由是否匹配来动态调整UI。如果路线匹配，我们在此处添加一个活动班级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Route</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItemLink</span>(<span class=\"params\">&#123; to, ...rest &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=&#123;to&#125;</span><br><span class=\"line\">      children=&#123;(&#123; match &#125;) =&gt; (</span><br><span class=\"line\">        &lt;li className=&#123;match ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"\"</span>&#125;&gt;</span><br><span class=\"line\">          &lt;Link to=&#123;to&#125; &#123;...rest&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;ListItemLink to=<span class=\"string\">\"/somewhere\"</span> /&gt;</span><br><span class=\"line\">      &lt;ListItemLink to=<span class=\"string\">\"/somewhere-else\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Router&gt;,</span><br><span class=\"line\">  node</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这对于动画也可能有用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route</span><br><span class=\"line\">  children=&#123;(&#123; match, ...rest &#125;) =&gt; (</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* Animate will always render, so you can use lifecycles</span></span><br><span class=\"line\"><span class=\"comment\">        to animate its child in and out */</span>&#125;</span><br><span class=\"line\">    &lt;Animate&gt;</span><br><span class=\"line\">      &#123;match &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></span></span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>警告</strong>：<code>&lt;Route children&gt;</code>优先于<code>&lt;Route component&gt;</code>和<code>&lt;Route render&gt;</code>，因此请不要在同一<code>&lt;Route&gt;</code>中使用多个</p>\n<h3 id=\"path-string-string\"><a href=\"#path-string-string\" class=\"headerlink\" title=\"path: string | string[]\"></a>path: string | string[]</h3><p>path-to-regexp@^1.7.0可以理解的任何有效URL路径或路径数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/users/:id\"</span>&gt;</span><br><span class=\"line\">  &lt;User /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path=&#123;[<span class=\"string\">\"/users/:id\"</span>, <span class=\"string\">\"/profile/:id\"</span>]&#125;&gt;</span><br><span class=\"line\">  &lt;User /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 没有路径的路线总是匹配的。</p>\n<h3 id=\"exact-bool\"><a href=\"#exact-bool\" class=\"headerlink\" title=\"exact: bool\"></a>exact: bool</h3><p>exact:true时，只有在路径与location.pathname完全匹配时才匹配</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">exact</th>\n<th align=\"left\">matches ?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">true</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">false</td>\n<td align=\"left\">yes</td>\n</tr>\n</tbody></table>\n<h3 id=\"strict-bool\"><a href=\"#strict-bool\" class=\"headerlink\" title=\"strict: bool\"></a>strict: bool</h3><p>设置为true时，带有斜杠的路径将只匹配带有斜杠的location.pathname。当location.pathname中有其他URL段时，这无效。<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Route strict path=<span class=\"string\">\"/one/\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure><br>| path  | location.pathname  |  matches? |<br>| :———— | :———— | :———— |<br>|/one/   |/one/   | no   |<br>| /one/  |  /one/ |  yes |<br>|  /one/ |  /one/two |  yes |</p>\n<p><strong>警告</strong>：strict可以用于强制location.pathname不带斜杠，但是要做到这一点，strict和精确都必须为真。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact strict path=<span class=\"string\">\"/one\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/</td>\n<td align=\"left\">yes</td>\n</tr>\n<tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">no</td>\n</tr>\n</tbody></table>\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p><code>&lt;Route&gt;</code>元素尝试将其路径与当前历史记录位置（通常是当前浏览器URL）匹配。但是，也可以传递路径名不同的位置进行匹配。</p>\n<p>如需要将<code>&lt;Route&gt;</code>匹配到当前历史记录位置以外的位置时，这很有用，如Animated Transitions示例所示。</p>\n<p>如果<code>&lt;Route&gt;</code>元素包装在<code>&lt;Switch&gt;</code>中并且与传递给<code>&lt;Switch&gt;</code>的位置（或当前历史记录位置）相匹配，则传递给<code>&lt;Route&gt;</code>的位置prop将被<Switch >（在此处给出）。</p>\n<h3 id=\"sensitive-bool\"><a href=\"#sensitive-bool\" class=\"headerlink\" title=\"sensitive: bool\"></a>sensitive: bool</h3><p>为true时，如果路径区分大小写，则将匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route sensitive path=<span class=\"string\">\"/one\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">sensitive</th>\n<th align=\"left\">matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">true</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">false</td>\n<td align=\"left\">yes</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Route-render-methods\"><a href=\"#Route-render-methods\" class=\"headerlink\" title=\"Route render methods\"></a>Route render methods</h2><p>建议使用<code>&lt;Route&gt;</code>渲染某些内容的方法是使用子元素，如上所示。但是，还有一些其他方法可用于使用<code>&lt;Route&gt;</code>渲染内容。提供这些主要是为了支持在引入<code>hook</code>之前使用早期版本的路由器构建的应用程序。</p>\n<ul>\n<li><p><code>&lt;Route component&gt;</code></p>\n</li>\n<li><p><code>&lt;Route render&gt;</code></p>\n</li>\n<li><p><code>&lt;Route children&gt; function</code><br>您应该在给定的<Route>上仅使用这些道具之一。请参阅下面的说明以了解它们之间的区别。</p>\n<h3 id=\"Route-props\"><a href=\"#Route-props\" class=\"headerlink\" title=\"Route props\"></a>Route props</h3><p>所有这三种渲染方法将通过相同的三个路由道具。</p>\n<ul>\n<li>match</li>\n<li>location</li>\n<li>history</li>\n</ul>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><p>一个仅在位置匹配时才呈现的React组件。它将与路线道具一起渲染。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All route props (match, location and history) are available to User</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello &#123;props.match.params.username&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/user/:username\"</span> component=&#123;User&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>当您使用组件（而不是下面的渲染器或子组件）时，路由器会使用React.createElement从给定的组件中创建一个新的React元素。这意味着，如果您向组件prop提供内联函数，则将在每个渲染中创建一个新组件。这将导致现有组件的卸载和新组件的安装，而不仅仅是更新现有组件。使用内联函数进行内联渲染时，请使用render或children道具（如下）。</p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a>render: func</h3><p>这样可以方便地进行内联渲染和包装，而无需进行上述不必要的重新安装。无需使用组件prop为您创建新的React元素，而是可以传递位置匹配时要调用的函数。渲染道具功能可以访问与组件渲染道具相同的所有路线道具（匹配，位置和历史）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// convenient inline rendering</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ wrapping/</span>composing</span><br><span class=\"line\"><span class=\"comment\">// You can spread routeProps to make them available to your rendered Component</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FadingRoute</span>(<span class=\"params\">&#123; component: Component, ...rest &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      &#123;...rest&#125;</span><br><span class=\"line\">      render=&#123;routeProps =&gt; (</span><br><span class=\"line\">        &lt;FadeIn&gt;</span><br><span class=\"line\">          &lt;Component &#123;...routeProps&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/FadeIn&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;FadingRoute path=<span class=\"string\">\"/cool\"</span> component=&#123;Something&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p><strong>警告</strong>：<code>&lt;Route组件&gt;</code>优先于<code>&lt;Route渲染&gt;</code>，因此请勿在同一<code>&lt;Route&gt;</code>中同时使用两者。</p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a>children: func</h3><p>有时您需要渲染路径是否与位置匹配。在这种情况下，您可以使用child道具功能。它与render完全一样，除了是否存在匹配项而被调用。</p>\n<p>子级渲染道具将接收与组件和渲染方法相同的所有路由道具，除非当路线未能与URL匹配时，则match为null。这使您可以根据路由是否匹配来动态调整UI。如果路线匹配，我们在此处添加一个活动班级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Route</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItemLink</span>(<span class=\"params\">&#123; to, ...rest &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=&#123;to&#125;</span><br><span class=\"line\">      children=&#123;(&#123; match &#125;) =&gt; (</span><br><span class=\"line\">        &lt;li className=&#123;match ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"\"</span>&#125;&gt;</span><br><span class=\"line\">          &lt;Link to=&#123;to&#125; &#123;...rest&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;ListItemLink to=<span class=\"string\">\"/somewhere\"</span> /&gt;</span><br><span class=\"line\">      &lt;ListItemLink to=<span class=\"string\">\"/somewhere-else\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Router&gt;,</span><br><span class=\"line\">  node</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这对于动画也可能有用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route</span><br><span class=\"line\">  children=&#123;(&#123; match, ...rest &#125;) =&gt; (</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* Animate will always render, so you can use lifecycles</span></span><br><span class=\"line\"><span class=\"comment\">        to animate its child in and out */</span>&#125;</span><br><span class=\"line\">    &lt;Animate&gt;</span><br><span class=\"line\">      &#123;match &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></span></span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>警告</strong>：<code>&lt;Route children&gt;</code>优先于<code>&lt;Route component&gt;</code>和<code>&lt;Route render&gt;</code>，因此请不要在同一<code>&lt;Route&gt;</code>中使用多个</p>\n<h3 id=\"path-string-string\"><a href=\"#path-string-string\" class=\"headerlink\" title=\"path: string | string[]\"></a>path: string | string[]</h3><p>path-to-regexp@^1.7.0可以理解的任何有效URL路径或路径数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/users/:id\"</span>&gt;</span><br><span class=\"line\">  &lt;User /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path=&#123;[<span class=\"string\">\"/users/:id\"</span>, <span class=\"string\">\"/profile/:id\"</span>]&#125;&gt;</span><br><span class=\"line\">  &lt;User /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 没有路径的路线总是匹配的。</p>\n<h3 id=\"exact-bool\"><a href=\"#exact-bool\" class=\"headerlink\" title=\"exact: bool\"></a>exact: bool</h3><p>exact:true时，只有在路径与location.pathname完全匹配时才匹配</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">exact</th>\n<th align=\"left\">matches ?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">true</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">false</td>\n<td align=\"left\">yes</td>\n</tr>\n</tbody></table>\n<h3 id=\"strict-bool\"><a href=\"#strict-bool\" class=\"headerlink\" title=\"strict: bool\"></a>strict: bool</h3><p>设置为true时，带有斜杠的路径将只匹配带有斜杠的location.pathname。当location.pathname中有其他URL段时，这无效。<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Route strict path=<span class=\"string\">\"/one/\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure><br>| path  | location.pathname  |  matches? |<br>| :———— | :———— | :———— |<br>|/one/   |/one/   | no   |<br>| /one/  |  /one/ |  yes |<br>|  /one/ |  /one/two |  yes |</p>\n<p><strong>警告</strong>：strict可以用于强制location.pathname不带斜杠，但是要做到这一点，strict和精确都必须为真。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact strict path=<span class=\"string\">\"/one\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/</td>\n<td align=\"left\">yes</td>\n</tr>\n<tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one/</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">no</td>\n</tr>\n</tbody></table>\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p><code>&lt;Route&gt;</code>元素尝试将其路径与当前历史记录位置（通常是当前浏览器URL）匹配。但是，也可以传递路径名不同的位置进行匹配。</p>\n<p>如需要将<code>&lt;Route&gt;</code>匹配到当前历史记录位置以外的位置时，这很有用，如Animated Transitions示例所示。</p>\n<p>如果<code>&lt;Route&gt;</code>元素包装在<code>&lt;Switch&gt;</code>中并且与传递给<code>&lt;Switch&gt;</code>的位置（或当前历史记录位置）相匹配，则传递给<code>&lt;Route&gt;</code>的位置prop将被<Switch >（在此处给出）。</p>\n<h3 id=\"sensitive-bool\"><a href=\"#sensitive-bool\" class=\"headerlink\" title=\"sensitive: bool\"></a>sensitive: bool</h3><p>为true时，如果路径区分大小写，则将匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route sensitive path=<span class=\"string\">\"/one\"</span>&gt;</span><br><span class=\"line\">  &lt;About /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">path</th>\n<th align=\"left\">location.pathname</th>\n<th align=\"left\">sensitive</th>\n<th align=\"left\">matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">true</td>\n<td align=\"left\">no</td>\n</tr>\n<tr>\n<td align=\"left\">/one</td>\n<td align=\"left\">/one/two</td>\n<td align=\"left\">false</td>\n<td align=\"left\">yes</td>\n</tr>\n</tbody></table>\n"},{"_content":"##  Switch\n\n渲染与位置匹配的第一个子元素`<Route>`或`<Redirect>`。\n\n**这与仅使用`<Route>`有什么不同？**\n`<Switch>`的独特之处在于它专门呈现一条路由。相反，每个与该位置匹配的`<Route>`都将进行包含性渲染。考虑这些路线。\n```js\nimport { Route } from \"react-router\";\n\nlet routes = (\n  <div>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n    <Route path=\"/:user\">\n      <User />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </div>\n);\n```\n如果URL是/ about，则`<About>`，`<User>`和`<NoMatch>`将全部呈现，因为它们都与路径匹配。这是设计使然，允许我们以多种方式将\t`<Route>`组合到我们的应用中，例如边栏和面包屑，引导程序标签等。\n\n但是，有时我们只选择一个`<Route>`进行渲染。如果我们位于/ about，我们不想同时匹配/：user（或显示“ 404”页面）。使用Switch的方法如下：\n\n```js\nimport { Route, Switch } from \"react-router\";\n\nlet routes = (\n  <Switch>\n    <Route exact path=\"/\">\n      <Home />\n    </Route>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n    <Route path=\"/:user\">\n      <User />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\n```\n现在，如果我们位于/ about，`<Switch>`将开始寻找匹配的`<Route>`。`<Route path =“ / about” />`将匹配，而`<Switch>`将停止寻找匹配并呈现`<About>`。同样，如果我们在/ michael位置，则会显示`<User>`。\n\n这对于动画过渡也很有用，因为匹配的`<Route>`呈现在与上一个相同的位置。\n```js\nlet routes = (\n  <Fade>\n    <Switch>\n      {/* 这里只有一个child */}\n      <Route />\n      <Route />\n    </Switch>\n  </Fade>\n);\n\nlet routes = (\n  <Fade>\n    {/* 这里有两个，一个可能会变为null，但会进行过渡解决起来比较麻烦*/}\n    <Route />\n    <Route />\n  </Fade>\n);\n```\n\n### location: object\n用于匹配子元素的位置对象，而不是当前历史记录位置（通常是当前浏览器URL）。\n\n### children: node\n`<Switch>`的所有子代应为`<Route>`或`<Redirect>`元素。仅第一个与当前位置匹配的child会被渲染。\n`<Route>`元素使用其路径属性进行匹配，而`<Redirect>`元素使用其from属性进行匹配。没有路径属性的`<Route>`或没有from属性的`<Redirect>`将始终与当前位置匹配。\n在`<Switch>`中包含`<Redirect>`时，它可以使用`<Route>`的任何位置匹配道具：path, exact, and strict。from只是路径属性的别名。\n如果为`<Switch>`提供了位置提示，它将覆盖匹配的子元素上的位置提示。\n```js\nimport { Redirect, Route, Switch } from \"react-router\";\n\nlet routes = (\n  <Switch>\n    <Route exact path=\"/\">\n      <Home />\n    </Route>\n\n    <Route path=\"/users\">\n      <Users />\n    </Route>\n    <Redirect from=\"/accounts\" to=\"/users\" />\n\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\n```\n","source":"_posts/react_router/Api/Switch.md","raw":"##  Switch\n\n渲染与位置匹配的第一个子元素`<Route>`或`<Redirect>`。\n\n**这与仅使用`<Route>`有什么不同？**\n`<Switch>`的独特之处在于它专门呈现一条路由。相反，每个与该位置匹配的`<Route>`都将进行包含性渲染。考虑这些路线。\n```js\nimport { Route } from \"react-router\";\n\nlet routes = (\n  <div>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n    <Route path=\"/:user\">\n      <User />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </div>\n);\n```\n如果URL是/ about，则`<About>`，`<User>`和`<NoMatch>`将全部呈现，因为它们都与路径匹配。这是设计使然，允许我们以多种方式将\t`<Route>`组合到我们的应用中，例如边栏和面包屑，引导程序标签等。\n\n但是，有时我们只选择一个`<Route>`进行渲染。如果我们位于/ about，我们不想同时匹配/：user（或显示“ 404”页面）。使用Switch的方法如下：\n\n```js\nimport { Route, Switch } from \"react-router\";\n\nlet routes = (\n  <Switch>\n    <Route exact path=\"/\">\n      <Home />\n    </Route>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n    <Route path=\"/:user\">\n      <User />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\n```\n现在，如果我们位于/ about，`<Switch>`将开始寻找匹配的`<Route>`。`<Route path =“ / about” />`将匹配，而`<Switch>`将停止寻找匹配并呈现`<About>`。同样，如果我们在/ michael位置，则会显示`<User>`。\n\n这对于动画过渡也很有用，因为匹配的`<Route>`呈现在与上一个相同的位置。\n```js\nlet routes = (\n  <Fade>\n    <Switch>\n      {/* 这里只有一个child */}\n      <Route />\n      <Route />\n    </Switch>\n  </Fade>\n);\n\nlet routes = (\n  <Fade>\n    {/* 这里有两个，一个可能会变为null，但会进行过渡解决起来比较麻烦*/}\n    <Route />\n    <Route />\n  </Fade>\n);\n```\n\n### location: object\n用于匹配子元素的位置对象，而不是当前历史记录位置（通常是当前浏览器URL）。\n\n### children: node\n`<Switch>`的所有子代应为`<Route>`或`<Redirect>`元素。仅第一个与当前位置匹配的child会被渲染。\n`<Route>`元素使用其路径属性进行匹配，而`<Redirect>`元素使用其from属性进行匹配。没有路径属性的`<Route>`或没有from属性的`<Redirect>`将始终与当前位置匹配。\n在`<Switch>`中包含`<Redirect>`时，它可以使用`<Route>`的任何位置匹配道具：path, exact, and strict。from只是路径属性的别名。\n如果为`<Switch>`提供了位置提示，它将覆盖匹配的子元素上的位置提示。\n```js\nimport { Redirect, Route, Switch } from \"react-router\";\n\nlet routes = (\n  <Switch>\n    <Route exact path=\"/\">\n      <Home />\n    </Route>\n\n    <Route path=\"/users\">\n      <Users />\n    </Route>\n    <Redirect from=\"/accounts\" to=\"/users\" />\n\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\n```\n","slug":"react_router/Api/Switch","published":1,"date":"2020-01-10T08:10:15.787Z","updated":"2020-01-10T08:36:09.619Z","title":"react_router/Api/Switch","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gc0001mkco5yfbdk8r","content":"<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><p>渲染与位置匹配的第一个子元素<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>。</p>\n<p><strong>这与仅使用<code>&lt;Route&gt;</code>有什么不同？</strong><br><code>&lt;Switch&gt;</code>的独特之处在于它专门呈现一条路由。相反，每个与该位置匹配的<code>&lt;Route&gt;</code>都将进行包含性渲染。考虑这些路线。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">      &lt;About /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/</span>:user<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;User /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果URL是/ about，则<code>&lt;About&gt;</code>，<code>&lt;User&gt;</code>和<code>&lt;NoMatch&gt;</code>将全部呈现，因为它们都与路径匹配。这是设计使然，允许我们以多种方式将    <code>&lt;Route&gt;</code>组合到我们的应用中，例如边栏和面包屑，引导程序标签等。</p>\n<p>但是，有时我们只选择一个<code>&lt;Route&gt;</code>进行渲染。如果我们位于/ about，我们不想同时匹配/：user（或显示“ 404”页面）。使用Switch的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">      &lt;Home /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route path=\"</span>/:user<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;User /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>现在，如果我们位于/ about，<code>&lt;Switch&gt;</code>将开始寻找匹配的<code>&lt;Route&gt;</code>。<code>&lt;Route path =“ / about” /&gt;</code>将匹配，而<code>&lt;Switch&gt;</code>将停止寻找匹配并呈现<code>&lt;About&gt;</code>。同样，如果我们在/ michael位置，则会显示<code>&lt;User&gt;</code>。</p>\n<p>这对于动画过渡也很有用，因为匹配的<code>&lt;Route&gt;</code>呈现在与上一个相同的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Fade&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/* 这里只有一个child */</span>&#125;</span><br><span class=\"line\">      &lt;Route /&gt;</span><br><span class=\"line\">      &lt;Route /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Fade&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Fade&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* 这里有两个，一个可能会变为null，但会进行过渡解决起来比较麻烦*/</span>&#125;</span><br><span class=\"line\">    &lt;Route /&gt;</span><br><span class=\"line\">    &lt;Route /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Fade&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>用于匹配子元素的位置对象，而不是当前历史记录位置（通常是当前浏览器URL）。</p>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p><code>&lt;Switch&gt;</code>的所有子代应为<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>元素。仅第一个与当前位置匹配的child会被渲染。<br><code>&lt;Route&gt;</code>元素使用其路径属性进行匹配，而<code>&lt;Redirect&gt;</code>元素使用其from属性进行匹配。没有路径属性的<code>&lt;Route&gt;</code>或没有from属性的<code>&lt;Redirect&gt;</code>将始终与当前位置匹配。<br>在<code>&lt;Switch&gt;</code>中包含<code>&lt;Redirect&gt;</code>时，它可以使用<code>&lt;Route&gt;</code>的任何位置匹配道具：path, exact, and strict。from只是路径属性的别名。<br>如果为<code>&lt;Switch&gt;</code>提供了位置提示，它将覆盖匹配的子元素上的位置提示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Redirect, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">      &lt;Home /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/u</span>sers<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Users /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Redirect from=\"</span>/accounts<span class=\"string\">\" to=\"</span>/users<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><p>渲染与位置匹配的第一个子元素<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>。</p>\n<p><strong>这与仅使用<code>&lt;Route&gt;</code>有什么不同？</strong><br><code>&lt;Switch&gt;</code>的独特之处在于它专门呈现一条路由。相反，每个与该位置匹配的<code>&lt;Route&gt;</code>都将进行包含性渲染。考虑这些路线。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">      &lt;About /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/</span>:user<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;User /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果URL是/ about，则<code>&lt;About&gt;</code>，<code>&lt;User&gt;</code>和<code>&lt;NoMatch&gt;</code>将全部呈现，因为它们都与路径匹配。这是设计使然，允许我们以多种方式将    <code>&lt;Route&gt;</code>组合到我们的应用中，例如边栏和面包屑，引导程序标签等。</p>\n<p>但是，有时我们只选择一个<code>&lt;Route&gt;</code>进行渲染。如果我们位于/ about，我们不想同时匹配/：user（或显示“ 404”页面）。使用Switch的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">      &lt;Home /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route path=\"</span>/:user<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;User /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>现在，如果我们位于/ about，<code>&lt;Switch&gt;</code>将开始寻找匹配的<code>&lt;Route&gt;</code>。<code>&lt;Route path =“ / about” /&gt;</code>将匹配，而<code>&lt;Switch&gt;</code>将停止寻找匹配并呈现<code>&lt;About&gt;</code>。同样，如果我们在/ michael位置，则会显示<code>&lt;User&gt;</code>。</p>\n<p>这对于动画过渡也很有用，因为匹配的<code>&lt;Route&gt;</code>呈现在与上一个相同的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Fade&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/* 这里只有一个child */</span>&#125;</span><br><span class=\"line\">      &lt;Route /&gt;</span><br><span class=\"line\">      &lt;Route /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Fade&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Fade&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* 这里有两个，一个可能会变为null，但会进行过渡解决起来比较麻烦*/</span>&#125;</span><br><span class=\"line\">    &lt;Route /&gt;</span><br><span class=\"line\">    &lt;Route /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Fade&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>用于匹配子元素的位置对象，而不是当前历史记录位置（通常是当前浏览器URL）。</p>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p><code>&lt;Switch&gt;</code>的所有子代应为<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>元素。仅第一个与当前位置匹配的child会被渲染。<br><code>&lt;Route&gt;</code>元素使用其路径属性进行匹配，而<code>&lt;Redirect&gt;</code>元素使用其from属性进行匹配。没有路径属性的<code>&lt;Route&gt;</code>或没有from属性的<code>&lt;Redirect&gt;</code>将始终与当前位置匹配。<br>在<code>&lt;Switch&gt;</code>中包含<code>&lt;Redirect&gt;</code>时，它可以使用<code>&lt;Route&gt;</code>的任何位置匹配道具：path, exact, and strict。from只是路径属性的别名。<br>如果为<code>&lt;Switch&gt;</code>提供了位置提示，它将覆盖匹配的子元素上的位置提示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Redirect, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = (</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">      &lt;Home /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route path=\"/u</span>sers<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Users /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Redirect from=\"</span>/accounts<span class=\"string\">\" to=\"</span>/users<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"## Router\n所有路由器组件的通用底层接口。通常，应用将使用高级路由器之一代替：\n- `<BrowserRouter>`\n- `<HashRouter>`\n- `<MemoryRouter>`\n- `<NativeRouter>`\n- `<StaticRouter>`\n\n使用底层`<Router>`的最常见用例是将自定义历史记录与状态管理库（如Redux或Mobx）进行同步。请注意，并不需要将状态管理库与React Router一起使用，它仅用于深度集成。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router\";\nimport { createBrowserHistory } from \"source/_posts/react_router/Api/history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  node\n);\n```\n### history: object\n用于导航的历史对象。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst customHistory = createBrowserHistory();\n\nReactDOM.render(<Router history={customHistory} />, node);\n```\n### children: node\n要渲染的子元素。\n```js\n <Router>\n  \t<App />\n</Router>\n```\n","source":"_posts/react_router/Api/Router.md","raw":"## Router\n所有路由器组件的通用底层接口。通常，应用将使用高级路由器之一代替：\n- `<BrowserRouter>`\n- `<HashRouter>`\n- `<MemoryRouter>`\n- `<NativeRouter>`\n- `<StaticRouter>`\n\n使用底层`<Router>`的最常见用例是将自定义历史记录与状态管理库（如Redux或Mobx）进行同步。请注意，并不需要将状态管理库与React Router一起使用，它仅用于深度集成。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router\";\nimport { createBrowserHistory } from \"source/_posts/react_router/Api/history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  node\n);\n```\n### history: object\n用于导航的历史对象。\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst customHistory = createBrowserHistory();\n\nReactDOM.render(<Router history={customHistory} />, node);\n```\n### children: node\n要渲染的子元素。\n```js\n <Router>\n  \t<App />\n</Router>\n```\n","slug":"react_router/Api/Router","published":1,"date":"2020-01-10T08:05:24.784Z","updated":"2020-01-11T08:56:31.951Z","title":"react_router/Api/Router","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gd0002mkcocbk16nmn","content":"<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><p>所有路由器组件的通用底层接口。通常，应用将使用高级路由器之一代替：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code></li>\n<li><code>&lt;HashRouter&gt;</code></li>\n<li><code>&lt;MemoryRouter&gt;</code></li>\n<li><code>&lt;NativeRouter&gt;</code></li>\n<li><code>&lt;StaticRouter&gt;</code></li>\n</ul>\n<p>使用底层<code>&lt;Router&gt;</code>的最常见用例是将自定义历史记录与状态管理库（如Redux或Mobx）进行同步。请注意，并不需要将状态管理库与React Router一起使用，它仅用于深度集成。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"source/_posts/react_router/Api/history\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory();</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"history-object\"><a href=\"#history-object\" class=\"headerlink\" title=\"history: object\"></a>history: object</h3><p>用于导航的历史对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"history\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> customHistory = createBrowserHistory();</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;customHistory&#125;</span> /&gt;</span>, node);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Router&gt;</span><br><span class=\"line\">  \t&lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Router&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><p>所有路由器组件的通用底层接口。通常，应用将使用高级路由器之一代替：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code></li>\n<li><code>&lt;HashRouter&gt;</code></li>\n<li><code>&lt;MemoryRouter&gt;</code></li>\n<li><code>&lt;NativeRouter&gt;</code></li>\n<li><code>&lt;StaticRouter&gt;</code></li>\n</ul>\n<p>使用底层<code>&lt;Router&gt;</code>的最常见用例是将自定义历史记录与状态管理库（如Redux或Mobx）进行同步。请注意，并不需要将状态管理库与React Router一起使用，它仅用于深度集成。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"source/_posts/react_router/Api/history\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> history = createBrowserHistory();</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"history-object\"><a href=\"#history-object\" class=\"headerlink\" title=\"history: object\"></a>history: object</h3><p>用于导航的历史对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createBrowserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"history\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> customHistory = createBrowserHistory();</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;customHistory&#125;</span> /&gt;</span>, node);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Router&gt;</span><br><span class=\"line\">  \t&lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Router&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"## history\n本文档中的术语“历史记录”和“历史记录对象”是指历史记录包，它是React Router仅有的两个主要依赖项之一（除了React本身），并提供了多种不同的实现来管理JavaScript中的会话历史记录。环境。\n使用的语法：\n   - “browser history”————Dom特殊的实现，在支持HTML5历史记录API的Web浏览器中很有用。\n   -    “hash history“————遗留Web浏览器的DOM特定实现。\n   -    “memory history”————内存历史记录实现，可用于测试和非DOM环境（例如React Native）\n   \n历史记录对象通常具有以下属性和方法：\n- length ——(number) 历史记录堆栈中的条目数。\n- action ——(string)当前 action (PUSH, REPLACE, or POP)\n- location ——(object) 当前位置，具有以下属性：\n\t\tpathname——（string）URL的路径\n\t\tsearch——（string)URL查询字符串\n\t\thash———（string)URL哈希片段\n\t\tstate——（object)提供给例如当此位置被压入堆栈时，push（path，state）。仅在浏览器和内存历史记录中可用。\n- push(path, [state])——（function）将新条目推入历史记录堆栈\n- replace(path, [state]) ——(function)替换历史记录堆栈上的当前条目\n- go(n)——(function)将历史记录返回n个。\n- goBack()——(function)相当于go(-1)\n- goForward()——(function)相当于go(1)\n- block(prompt)——(function) 防止导航（请参阅历史记录文档）\n### history is mutable\n历史对象是可变的。因此建议访问位置使用props`<Route>`的渲染，而不是history.location访问位置。这可以确保您对React的假设在生命周期挂钩中是正确的。例如：\n\n```js\nclass Comp extends React.Component {\n  componentDidUpdate(prevProps) {\n    // will be true\n    const locationChanged =\n      this.props.location !== prevProps.location;\n\n    // INCORRECT, will *always* be false because history is mutable.\n    const locationChanged =\n      this.props.history.location !== prevProps.history.location;\n  }\n}\n\n<Route component={Comp} />;\n```\n根据您所使用的实现方式，可能还会显示其他属性。请参阅历史记录文档以获取更多详细信息。\n","source":"_posts/react_router/Api/history.md","raw":"## history\n本文档中的术语“历史记录”和“历史记录对象”是指历史记录包，它是React Router仅有的两个主要依赖项之一（除了React本身），并提供了多种不同的实现来管理JavaScript中的会话历史记录。环境。\n使用的语法：\n   - “browser history”————Dom特殊的实现，在支持HTML5历史记录API的Web浏览器中很有用。\n   -    “hash history“————遗留Web浏览器的DOM特定实现。\n   -    “memory history”————内存历史记录实现，可用于测试和非DOM环境（例如React Native）\n   \n历史记录对象通常具有以下属性和方法：\n- length ——(number) 历史记录堆栈中的条目数。\n- action ——(string)当前 action (PUSH, REPLACE, or POP)\n- location ——(object) 当前位置，具有以下属性：\n\t\tpathname——（string）URL的路径\n\t\tsearch——（string)URL查询字符串\n\t\thash———（string)URL哈希片段\n\t\tstate——（object)提供给例如当此位置被压入堆栈时，push（path，state）。仅在浏览器和内存历史记录中可用。\n- push(path, [state])——（function）将新条目推入历史记录堆栈\n- replace(path, [state]) ——(function)替换历史记录堆栈上的当前条目\n- go(n)——(function)将历史记录返回n个。\n- goBack()——(function)相当于go(-1)\n- goForward()——(function)相当于go(1)\n- block(prompt)——(function) 防止导航（请参阅历史记录文档）\n### history is mutable\n历史对象是可变的。因此建议访问位置使用props`<Route>`的渲染，而不是history.location访问位置。这可以确保您对React的假设在生命周期挂钩中是正确的。例如：\n\n```js\nclass Comp extends React.Component {\n  componentDidUpdate(prevProps) {\n    // will be true\n    const locationChanged =\n      this.props.location !== prevProps.location;\n\n    // INCORRECT, will *always* be false because history is mutable.\n    const locationChanged =\n      this.props.history.location !== prevProps.history.location;\n  }\n}\n\n<Route component={Comp} />;\n```\n根据您所使用的实现方式，可能还会显示其他属性。请参阅历史记录文档以获取更多详细信息。\n","slug":"react_router/Api/history","published":1,"date":"2020-01-10T08:37:10.940Z","updated":"2020-01-10T09:12:25.321Z","title":"react_router/Api/history","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gf0003mkco37px8r5t","content":"<h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><p>本文档中的术语“历史记录”和“历史记录对象”是指历史记录包，它是React Router仅有的两个主要依赖项之一（除了React本身），并提供了多种不同的实现来管理JavaScript中的会话历史记录。环境。<br>使用的语法：</p>\n<ul>\n<li>“browser history”————Dom特殊的实现，在支持HTML5历史记录API的Web浏览器中很有用。</li>\n<li>“hash history“————遗留Web浏览器的DOM特定实现。</li>\n<li>“memory history”————内存历史记录实现，可用于测试和非DOM环境（例如React Native）</li>\n</ul>\n<p>历史记录对象通常具有以下属性和方法：</p>\n<ul>\n<li>length ——(number) 历史记录堆栈中的条目数。</li>\n<li>action ——(string)当前 action (PUSH, REPLACE, or POP)</li>\n<li>location ——(object) 当前位置，具有以下属性：<pre><code>pathname——（string）URL的路径\nsearch——（string)URL查询字符串\nhash———（string)URL哈希片段\nstate——（object)提供给例如当此位置被压入堆栈时，push（path，state）。仅在浏览器和内存历史记录中可用。</code></pre></li>\n<li>push(path, [state])——（function）将新条目推入历史记录堆栈</li>\n<li>replace(path, [state]) ——(function)替换历史记录堆栈上的当前条目</li>\n<li>go(n)——(function)将历史记录返回n个。</li>\n<li>goBack()——(function)相当于go(-1)</li>\n<li>goForward()——(function)相当于go(1)</li>\n<li>block(prompt)——(function) 防止导航（请参阅历史记录文档）<h3 id=\"history-is-mutable\"><a href=\"#history-is-mutable\" class=\"headerlink\" title=\"history is mutable\"></a>history is mutable</h3>历史对象是可变的。因此建议访问位置使用props<code>&lt;Route&gt;</code>的渲染，而不是history.location访问位置。这可以确保您对React的假设在生命周期挂钩中是正确的。例如：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// will be true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> locationChanged =</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.location !== prevProps.location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// INCORRECT, will *always* be false because history is mutable.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> locationChanged =</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.history.location !== prevProps.history.location;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Route component=&#123;Comp&#125; /&gt;;</span><br></pre></td></tr></table></figure>\n<p>根据您所使用的实现方式，可能还会显示其他属性。请参阅历史记录文档以获取更多详细信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><p>本文档中的术语“历史记录”和“历史记录对象”是指历史记录包，它是React Router仅有的两个主要依赖项之一（除了React本身），并提供了多种不同的实现来管理JavaScript中的会话历史记录。环境。<br>使用的语法：</p>\n<ul>\n<li>“browser history”————Dom特殊的实现，在支持HTML5历史记录API的Web浏览器中很有用。</li>\n<li>“hash history“————遗留Web浏览器的DOM特定实现。</li>\n<li>“memory history”————内存历史记录实现，可用于测试和非DOM环境（例如React Native）</li>\n</ul>\n<p>历史记录对象通常具有以下属性和方法：</p>\n<ul>\n<li>length ——(number) 历史记录堆栈中的条目数。</li>\n<li>action ——(string)当前 action (PUSH, REPLACE, or POP)</li>\n<li>location ——(object) 当前位置，具有以下属性：<pre><code>pathname——（string）URL的路径\nsearch——（string)URL查询字符串\nhash———（string)URL哈希片段\nstate——（object)提供给例如当此位置被压入堆栈时，push（path，state）。仅在浏览器和内存历史记录中可用。</code></pre></li>\n<li>push(path, [state])——（function）将新条目推入历史记录堆栈</li>\n<li>replace(path, [state]) ——(function)替换历史记录堆栈上的当前条目</li>\n<li>go(n)——(function)将历史记录返回n个。</li>\n<li>goBack()——(function)相当于go(-1)</li>\n<li>goForward()——(function)相当于go(1)</li>\n<li>block(prompt)——(function) 防止导航（请参阅历史记录文档）<h3 id=\"history-is-mutable\"><a href=\"#history-is-mutable\" class=\"headerlink\" title=\"history is mutable\"></a>history is mutable</h3>历史对象是可变的。因此建议访问位置使用props<code>&lt;Route&gt;</code>的渲染，而不是history.location访问位置。这可以确保您对React的假设在生命周期挂钩中是正确的。例如：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// will be true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> locationChanged =</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.location !== prevProps.location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// INCORRECT, will *always* be false because history is mutable.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> locationChanged =</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.history.location !== prevProps.history.location;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Route component=&#123;Comp&#125; /&gt;;</span><br></pre></td></tr></table></figure>\n<p>根据您所使用的实现方式，可能还会显示其他属性。请参阅历史记录文档以获取更多详细信息。</p>\n"},{"_content":"##\tlocation\nlocation表示该应用程序现在的位置，您希望其运行的位置，甚至是以前的位置。看起来像这样：\n```json\n{\n  key: 'ac3df4', // not with HashHistory!\n  pathname: '/somewhere',\n  search: '?some=search-string',\n  hash: '#howdy',\n  state: {\n    [userDefined]: true\n  }\n}\n```\n路由器提供位置对象：\n- Route component as this.props.location\n- Route render as ({ location }) => ()\n- Route children as ({ location }) => ()\n- withRouter as this.props.location\n也可以在history.location上找到它，但是您不应使用它，因为它是可变的。您可以在历史记录文档中阅读有关此内容的更多信息。\n位置对象永远不会发生变化，因此您可以在生命周期挂钩中使用它来确定什么时候进行导航，这对于数据获取和动画处理非常有用。\n```js\ncomponentWillReceiveProps(nextProps) {\n  if (nextProps.location !== this.props.location) {\n    // navigated!\n  }\n}\n```\n您可以提供locations替换各个地方的导航：\n- Web Link to\n- Native Link to\n- Redirect to\n- history.push\n- history.replace\n通常，您只使用字符串，但是如果您需要添加一些“location state”，只要应用返回到该特定位置，该状态就会可用，则可以使用位置对象代替。如果您要基于导航历史而不是仅基于路径（如模式）来分支UI，这将非常有用。\n\n```js\n// usually all you need\n<Link to=\"/somewhere\"/>\n\n// but you can use a location instead\nconst location = {\n  pathname: '/somewhere',\n  state: { fromDashboard: true }\n}\n\n<Link to={location}/>\n<Redirect to={location}/>\nhistory.push(location)\nhistory.replace(location)\n```\n最后，您可以将位置传递给以下组件：\n- Route\n- Switch\n\n这样可以防止他们在路由器状态下使用实际位置。这对于动画和待处理的导航很有用，或者在您想要诱使组件在与真实位置不同的位置进行渲染时，这很有用。\n \n","source":"_posts/react_router/Api/location.md","raw":"##\tlocation\nlocation表示该应用程序现在的位置，您希望其运行的位置，甚至是以前的位置。看起来像这样：\n```json\n{\n  key: 'ac3df4', // not with HashHistory!\n  pathname: '/somewhere',\n  search: '?some=search-string',\n  hash: '#howdy',\n  state: {\n    [userDefined]: true\n  }\n}\n```\n路由器提供位置对象：\n- Route component as this.props.location\n- Route render as ({ location }) => ()\n- Route children as ({ location }) => ()\n- withRouter as this.props.location\n也可以在history.location上找到它，但是您不应使用它，因为它是可变的。您可以在历史记录文档中阅读有关此内容的更多信息。\n位置对象永远不会发生变化，因此您可以在生命周期挂钩中使用它来确定什么时候进行导航，这对于数据获取和动画处理非常有用。\n```js\ncomponentWillReceiveProps(nextProps) {\n  if (nextProps.location !== this.props.location) {\n    // navigated!\n  }\n}\n```\n您可以提供locations替换各个地方的导航：\n- Web Link to\n- Native Link to\n- Redirect to\n- history.push\n- history.replace\n通常，您只使用字符串，但是如果您需要添加一些“location state”，只要应用返回到该特定位置，该状态就会可用，则可以使用位置对象代替。如果您要基于导航历史而不是仅基于路径（如模式）来分支UI，这将非常有用。\n\n```js\n// usually all you need\n<Link to=\"/somewhere\"/>\n\n// but you can use a location instead\nconst location = {\n  pathname: '/somewhere',\n  state: { fromDashboard: true }\n}\n\n<Link to={location}/>\n<Redirect to={location}/>\nhistory.push(location)\nhistory.replace(location)\n```\n最后，您可以将位置传递给以下组件：\n- Route\n- Switch\n\n这样可以防止他们在路由器状态下使用实际位置。这对于动画和待处理的导航很有用，或者在您想要诱使组件在与真实位置不同的位置进行渲染时，这很有用。\n \n","slug":"react_router/Api/location","published":1,"date":"2020-01-10T09:13:26.126Z","updated":"2020-01-10T09:30:11.774Z","title":"react_router/Api/location","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gf0004mkco5jpoa4f0","content":"<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><p>location表示该应用程序现在的位置，您希望其运行的位置，甚至是以前的位置。看起来像这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  key: 'ac3df4', // not with HashHistory!</span><br><span class=\"line\">  pathname: '/somewhere',</span><br><span class=\"line\">  search: '?some=search-string',</span><br><span class=\"line\">  hash: '#howdy',</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    [userDefined]: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由器提供位置对象：</p>\n<ul>\n<li>Route component as this.props.location</li>\n<li>Route render as ({ location }) =&gt; ()</li>\n<li>Route children as ({ location }) =&gt; ()</li>\n<li>withRouter as this.props.location<br>也可以在history.location上找到它，但是您不应使用它，因为它是可变的。您可以在历史记录文档中阅读有关此内容的更多信息。<br>位置对象永远不会发生变化，因此您可以在生命周期挂钩中使用它来确定什么时候进行导航，这对于数据获取和动画处理非常有用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextProps.location !== <span class=\"keyword\">this</span>.props.location) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// navigated!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n您可以提供locations替换各个地方的导航：</li>\n<li>Web Link to</li>\n<li>Native Link to</li>\n<li>Redirect to</li>\n<li>history.push</li>\n<li>history.replace<br>通常，您只使用字符串，但是如果您需要添加一些“location state”，只要应用返回到该特定位置，该状态就会可用，则可以使用位置对象代替。如果您要基于导航历史而不是仅基于路径（如模式）来分支UI，这将非常有用。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// usually all you need</span></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/somewhere\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// but you can use a location instead</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> location = &#123;</span><br><span class=\"line\">  pathname: <span class=\"string\">'/somewhere'</span>,</span><br><span class=\"line\">  state: &#123; <span class=\"attr\">fromDashboard</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link to=&#123;location&#125;/&gt;</span><br><span class=\"line\">&lt;Redirect to=&#123;location&#125;/&gt;</span><br><span class=\"line\">history.push(location)</span><br><span class=\"line\">history.replace(location)</span><br></pre></td></tr></table></figure>\n<p>最后，您可以将位置传递给以下组件：</p>\n<ul>\n<li>Route</li>\n<li>Switch</li>\n</ul>\n<p>这样可以防止他们在路由器状态下使用实际位置。这对于动画和待处理的导航很有用，或者在您想要诱使组件在与真实位置不同的位置进行渲染时，这很有用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><p>location表示该应用程序现在的位置，您希望其运行的位置，甚至是以前的位置。看起来像这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  key: 'ac3df4', // not with HashHistory!</span><br><span class=\"line\">  pathname: '/somewhere',</span><br><span class=\"line\">  search: '?some=search-string',</span><br><span class=\"line\">  hash: '#howdy',</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    [userDefined]: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由器提供位置对象：</p>\n<ul>\n<li>Route component as this.props.location</li>\n<li>Route render as ({ location }) =&gt; ()</li>\n<li>Route children as ({ location }) =&gt; ()</li>\n<li>withRouter as this.props.location<br>也可以在history.location上找到它，但是您不应使用它，因为它是可变的。您可以在历史记录文档中阅读有关此内容的更多信息。<br>位置对象永远不会发生变化，因此您可以在生命周期挂钩中使用它来确定什么时候进行导航，这对于数据获取和动画处理非常有用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextProps.location !== <span class=\"keyword\">this</span>.props.location) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// navigated!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n您可以提供locations替换各个地方的导航：</li>\n<li>Web Link to</li>\n<li>Native Link to</li>\n<li>Redirect to</li>\n<li>history.push</li>\n<li>history.replace<br>通常，您只使用字符串，但是如果您需要添加一些“location state”，只要应用返回到该特定位置，该状态就会可用，则可以使用位置对象代替。如果您要基于导航历史而不是仅基于路径（如模式）来分支UI，这将非常有用。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// usually all you need</span></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/somewhere\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// but you can use a location instead</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> location = &#123;</span><br><span class=\"line\">  pathname: <span class=\"string\">'/somewhere'</span>,</span><br><span class=\"line\">  state: &#123; <span class=\"attr\">fromDashboard</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link to=&#123;location&#125;/&gt;</span><br><span class=\"line\">&lt;Redirect to=&#123;location&#125;/&gt;</span><br><span class=\"line\">history.push(location)</span><br><span class=\"line\">history.replace(location)</span><br></pre></td></tr></table></figure>\n<p>最后，您可以将位置传递给以下组件：</p>\n<ul>\n<li>Route</li>\n<li>Switch</li>\n</ul>\n<p>这样可以防止他们在路由器状态下使用实际位置。这对于动画和待处理的导航很有用，或者在您想要诱使组件在与真实位置不同的位置进行渲染时，这很有用。</p>\n"},{"_content":"```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n{/*\n本网站共有3页，所有页面均已呈现\n 在浏览器中动态显示（不呈现服务器）。\n尽管页面永远不会刷新，但请注意\n 当您浏览时，React Router使URL保持最新\n 通过网站. 保留 the browser history,\n making sure 后退按钮和书签之类的东西\n*/} \nexport default function BasicExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/dashboard\">Dashboard</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        {/*\n          <Switch>遍历其所有子节点<Route>\n          elements and renders 第一个路径\n          matches the current URL. 随时使用 a <Switch> \n          你有很多的routes, but you want 一个一次渲染\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// 你可以将这些组件视为页面\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n\n```\n\n","source":"_posts/react_router/examples/Basic.md","raw":"```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n{/*\n本网站共有3页，所有页面均已呈现\n 在浏览器中动态显示（不呈现服务器）。\n尽管页面永远不会刷新，但请注意\n 当您浏览时，React Router使URL保持最新\n 通过网站. 保留 the browser history,\n making sure 后退按钮和书签之类的东西\n*/} \nexport default function BasicExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/dashboard\">Dashboard</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        {/*\n          <Switch>遍历其所有子节点<Route>\n          elements and renders 第一个路径\n          matches the current URL. 随时使用 a <Switch> \n          你有很多的routes, but you want 一个一次渲染\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// 你可以将这些组件视为页面\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n\n```\n\n","slug":"react_router/examples/Basic","published":1,"date":"2020-01-09T14:02:48.489Z","updated":"2020-01-09T14:36:09.022Z","title":"react_router/examples/Basic","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gg0005mkco04i3b4e3","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">本网站共有3页，所有页面均已呈现</span></span><br><span class=\"line\"><span class=\"comment\"> 在浏览器中动态显示（不呈现服务器）。</span></span><br><span class=\"line\"><span class=\"comment\">尽管页面永远不会刷新，但请注意</span></span><br><span class=\"line\"><span class=\"comment\"> 当您浏览时，React Router使URL保持最新</span></span><br><span class=\"line\"><span class=\"comment\"> 通过网站. 保留 the browser history,</span></span><br><span class=\"line\"><span class=\"comment\"> making sure 后退按钮和书签之类的东西</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BasicExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;hr /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;Switch&gt;遍历其所有子节点&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          elements and renders 第一个路径</span></span><br><span class=\"line\"><span class=\"comment\">          matches the current URL. 随时使用 a &lt;Switch&gt; </span></span><br><span class=\"line\"><span class=\"comment\">          你有很多的routes, but you want 一个一次渲染</span></span><br><span class=\"line\"><span class=\"comment\">        */</span>&#125;</span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/dashboard<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Dashboard /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// 你可以将这些组件视为页面</span></span><br><span class=\"line\"><span class=\"string\">// in your app.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;About&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Dashboard() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Dashboard&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">本网站共有3页，所有页面均已呈现</span></span><br><span class=\"line\"><span class=\"comment\"> 在浏览器中动态显示（不呈现服务器）。</span></span><br><span class=\"line\"><span class=\"comment\">尽管页面永远不会刷新，但请注意</span></span><br><span class=\"line\"><span class=\"comment\"> 当您浏览时，React Router使URL保持最新</span></span><br><span class=\"line\"><span class=\"comment\"> 通过网站. 保留 the browser history,</span></span><br><span class=\"line\"><span class=\"comment\"> making sure 后退按钮和书签之类的东西</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BasicExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;hr /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;Switch&gt;遍历其所有子节点&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          elements and renders 第一个路径</span></span><br><span class=\"line\"><span class=\"comment\">          matches the current URL. 随时使用 a &lt;Switch&gt; </span></span><br><span class=\"line\"><span class=\"comment\">          你有很多的routes, but you want 一个一次渲染</span></span><br><span class=\"line\"><span class=\"comment\">        */</span>&#125;</span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/dashboard<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Dashboard /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// 你可以将这些组件视为页面</span></span><br><span class=\"line\"><span class=\"string\">// in your app.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;About&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Dashboard() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Dashboard&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\n// 这个实力显示的是如何自定义\n// <Link> 会在url中呈现特殊内容\n//  与<Link>指向的对象相同\n\nexport default function CustomLinkExample() {\n  return (\n    <Router>\n      <div>\n        <OldSchoolMenuLink\n          activeOnlyWhenExact={true}\n          to=\"/\"\n          label=\"Home\"\n        />\n        // <OldSchoolMenuLink to=\"/about\" label=\"About\" />\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction OldSchoolMenuLink({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact\n  });\n\n  return (\n    <div className={match ? \"active\" : \"\"}>\n      {match && \"> \"}\n      <Link to={to}>{label}</Link>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/custom_link.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\n// 这个实力显示的是如何自定义\n// <Link> 会在url中呈现特殊内容\n//  与<Link>指向的对象相同\n\nexport default function CustomLinkExample() {\n  return (\n    <Router>\n      <div>\n        <OldSchoolMenuLink\n          activeOnlyWhenExact={true}\n          to=\"/\"\n          label=\"Home\"\n        />\n        // <OldSchoolMenuLink to=\"/about\" label=\"About\" />\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction OldSchoolMenuLink({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact\n  });\n\n  return (\n    <div className={match ? \"active\" : \"\"}>\n      {match && \"> \"}\n      <Link to={to}>{label}</Link>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/custom_link","published":1,"date":"2020-01-10T06:58:03.375Z","updated":"2020-01-13T10:42:32.359Z","title":"react_router/examples/custom_link","_id":"ck59cv4gh0006mkco4q5e4zp2","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个实力显示的是如何自定义</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Link&gt; 会在url中呈现特殊内容</span></span><br><span class=\"line\"><span class=\"comment\">//  与&lt;Link&gt;指向的对象相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomLinkExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;OldSchoolMenuLink</span><br><span class=\"line\">          activeOnlyWhenExact=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">          to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">          label=<span class=\"string\">\"Home\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        <span class=\"comment\">// &lt;OldSchoolMenuLink to=\"/about\" label=\"About\" /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function OldSchoolMenuLink(&#123; label, to, activeOnlyWhenExact &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let match = useRouteMatch(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    path: to,</span></span><br><span class=\"line\"><span class=\"string\">    exact: activeOnlyWhenExact</span></span><br><span class=\"line\"><span class=\"string\">  &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div className=&#123;match ? \"</span>active<span class=\"string\">\" : \"</span><span class=\"string\">\"&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;match &amp;&amp; \"</span>&gt; <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Link to=&#123;to&#125;&gt;&#123;label&#125;&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;About&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个实力显示的是如何自定义</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Link&gt; 会在url中呈现特殊内容</span></span><br><span class=\"line\"><span class=\"comment\">//  与&lt;Link&gt;指向的对象相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomLinkExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;OldSchoolMenuLink</span><br><span class=\"line\">          activeOnlyWhenExact=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">          to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">          label=<span class=\"string\">\"Home\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        <span class=\"comment\">// &lt;OldSchoolMenuLink to=\"/about\" label=\"About\" /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function OldSchoolMenuLink(&#123; label, to, activeOnlyWhenExact &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let match = useRouteMatch(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    path: to,</span></span><br><span class=\"line\"><span class=\"string\">    exact: activeOnlyWhenExact</span></span><br><span class=\"line\"><span class=\"string\">  &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div className=&#123;match ? \"</span>active<span class=\"string\">\" : \"</span><span class=\"string\">\"&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;match &amp;&amp; \"</span>&gt; <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Link to=&#123;to&#125;&gt;&#123;label&#125;&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;About&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```js\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\n\n// 这个例子有3个页面: 一个公共的, 一个受保护的\n// 页面, 和一个登陆屏幕. 为了看到受保护的页面, 你必须第一次使用. 相当标准的东西.\n// 首先, 访问 公共页面. 然后, 访问protected页面 .你没有登陆的话, 所以你被重定向到login页面.登录后, 你被重定向返回到受保护的页面.\n// 注意URL每次都会变.在此刻如果你点击返回按钮, 你是否希望回到登录页面? 不! 你已经登陆了. 试试看,\n// 您会看到您返回到您的访问页面仅在登陆之前的页面。\n\n\nexport default function AuthExample() {\n    return (\n        <Router>\n            <div>\n                <AuthButton />\n\n                <ul>\n                    <li>\n                        <Link to=\"/public\">Public Page</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/protected\">Protected Page</Link>\n                    </li>\n                </ul>\n\n                <Switch>\n                    <Route path=\"/public\">\n                        <PublicPage />\n                    </Route>\n                    <Route path=\"/login\">\n                        <LoginPage />\n                    </Route>\n                    <PrivateRoute path=\"/protected\">\n                        <ProtectedPage />\n                    </PrivateRoute>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nconst fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n        fakeAuth.isAuthenticated = true;\n        setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n        fakeAuth.isAuthenticated = false;\n        setTimeout(cb, 100);\n    }\n};\n\nfunction AuthButton() {\n    let history = useHistory();\n\n    return fakeAuth.isAuthenticated ? (\n        <p>\n            Welcome!{\" \"}\n            <button\n                onClick={() => {\n                    fakeAuth.signout(() => history.push(\"/\"));\n                }}\n            >\n                Sign out\n            </button>\n        </p>\n    ) : (\n        <p>You are not logged in.</p>\n    );\n}\n\n//<Route>的包装器，重定向到登录屏幕，如果您尚未通过身份验证。\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                fakeAuth.isAuthenticated ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nfunction PublicPage() {\n    return <h3>Public</h3>;\n}\n\nfunction ProtectedPage() {\n    return <h3>Protected</h3>;\n}\n\nfunction LoginPage() {\n    let history = useHistory();\n    let location = useLocation();       //useLocation挂钩返回代表当前URL的位置对象。\n\n\n    let { from } = location.state || { from: { pathname: \"/\" } };\n    let login = () => {\n        fakeAuth.authenticate(() => {\n            history.replace(from);\n        });\n    };\n\n    return (\n        <div>\n            <p>You must log in to view the page at {from.pathname}</p>\n            <button onClick={login}>Log in</button>\n        </div>\n    );\n}\n\n```\n\n这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：\n","source":"_posts/react_router/examples/redirect.md","raw":"```js\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\n\n// 这个例子有3个页面: 一个公共的, 一个受保护的\n// 页面, 和一个登陆屏幕. 为了看到受保护的页面, 你必须第一次使用. 相当标准的东西.\n// 首先, 访问 公共页面. 然后, 访问protected页面 .你没有登陆的话, 所以你被重定向到login页面.登录后, 你被重定向返回到受保护的页面.\n// 注意URL每次都会变.在此刻如果你点击返回按钮, 你是否希望回到登录页面? 不! 你已经登陆了. 试试看,\n// 您会看到您返回到您的访问页面仅在登陆之前的页面。\n\n\nexport default function AuthExample() {\n    return (\n        <Router>\n            <div>\n                <AuthButton />\n\n                <ul>\n                    <li>\n                        <Link to=\"/public\">Public Page</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/protected\">Protected Page</Link>\n                    </li>\n                </ul>\n\n                <Switch>\n                    <Route path=\"/public\">\n                        <PublicPage />\n                    </Route>\n                    <Route path=\"/login\">\n                        <LoginPage />\n                    </Route>\n                    <PrivateRoute path=\"/protected\">\n                        <ProtectedPage />\n                    </PrivateRoute>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nconst fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n        fakeAuth.isAuthenticated = true;\n        setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n        fakeAuth.isAuthenticated = false;\n        setTimeout(cb, 100);\n    }\n};\n\nfunction AuthButton() {\n    let history = useHistory();\n\n    return fakeAuth.isAuthenticated ? (\n        <p>\n            Welcome!{\" \"}\n            <button\n                onClick={() => {\n                    fakeAuth.signout(() => history.push(\"/\"));\n                }}\n            >\n                Sign out\n            </button>\n        </p>\n    ) : (\n        <p>You are not logged in.</p>\n    );\n}\n\n//<Route>的包装器，重定向到登录屏幕，如果您尚未通过身份验证。\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                fakeAuth.isAuthenticated ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nfunction PublicPage() {\n    return <h3>Public</h3>;\n}\n\nfunction ProtectedPage() {\n    return <h3>Protected</h3>;\n}\n\nfunction LoginPage() {\n    let history = useHistory();\n    let location = useLocation();       //useLocation挂钩返回代表当前URL的位置对象。\n\n\n    let { from } = location.state || { from: { pathname: \"/\" } };\n    let login = () => {\n        fakeAuth.authenticate(() => {\n            history.replace(from);\n        });\n    };\n\n    return (\n        <div>\n            <p>You must log in to view the page at {from.pathname}</p>\n            <button onClick={login}>Log in</button>\n        </div>\n    );\n}\n\n```\n\n这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：\n","slug":"react_router/examples/redirect","published":1,"date":"2020-01-09T16:09:15.461Z","updated":"2020-01-09T16:10:59.700Z","title":"react_router/examples/redirect","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gi0007mkco3gxpg46y","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">    Switch,</span><br><span class=\"line\">    Route,</span><br><span class=\"line\">    Link,</span><br><span class=\"line\">    Redirect,</span><br><span class=\"line\">    useHistory,</span><br><span class=\"line\">    useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个例子有3个页面: 一个公共的, 一个受保护的</span></span><br><span class=\"line\"><span class=\"comment\">// 页面, 和一个登陆屏幕. 为了看到受保护的页面, 你必须第一次使用. 相当标准的东西.</span></span><br><span class=\"line\"><span class=\"comment\">// 首先, 访问 公共页面. 然后, 访问protected页面 .你没有登陆的话, 所以你被重定向到login页面.登录后, 你被重定向返回到受保护的页面.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意URL每次都会变.在此刻如果你点击返回按钮, 你是否希望回到登录页面? 不! 你已经登陆了. 试试看,</span></span><br><span class=\"line\"><span class=\"comment\">// 您会看到您返回到您的访问页面仅在登陆之前的页面。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AuthExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Router&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;AuthButton /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;ul&gt;</span><br><span class=\"line\">                    &lt;li&gt;</span><br><span class=\"line\">                        &lt;Link to=<span class=\"string\">\"/public\"</span>&gt;Public Page&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;/</span>li&gt;</span><br><span class=\"line\">                    &lt;li&gt;</span><br><span class=\"line\">                        &lt;Link to=<span class=\"string\">\"/protected\"</span>&gt;Protected Page&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;/</span>li&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;Route path=\"/</span>public<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;PublicPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;Route path=\"</span>/login<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;LoginPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;PrivateRoute path=\"</span>/protected<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;ProtectedPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/PrivateRoute&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const fakeAuth = &#123;</span></span><br><span class=\"line\"><span class=\"string\">    isAuthenticated: false,</span></span><br><span class=\"line\"><span class=\"string\">    authenticate(cb) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.isAuthenticated = true;</span></span><br><span class=\"line\"><span class=\"string\">        setTimeout(cb, 100); // fake async</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    signout(cb) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.isAuthenticated = false;</span></span><br><span class=\"line\"><span class=\"string\">        setTimeout(cb, 100);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function AuthButton() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    let history = useHistory();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    return fakeAuth.isAuthenticated ? (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Welcome!&#123;\"</span> <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button</span></span><br><span class=\"line\"><span class=\"string\">                onClick=&#123;() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    fakeAuth.signout(() =&gt; history.push(\"</span>/<span class=\"string\">\"));</span></span><br><span class=\"line\"><span class=\"string\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &gt;</span></span><br><span class=\"line\"><span class=\"string\">                Sign out</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ) : (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;You are not logged in.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//&lt;Route&gt;的包装器，重定向到登录屏幕，如果您尚未通过身份验证。</span></span><br><span class=\"line\"><span class=\"string\">function PrivateRoute(&#123; children, ...rest &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route</span></span><br><span class=\"line\"><span class=\"string\">            &#123;...rest&#125;</span></span><br><span class=\"line\"><span class=\"string\">            render=&#123;(&#123; location &#125;) =&gt;</span></span><br><span class=\"line\"><span class=\"string\">                fakeAuth.isAuthenticated ? (</span></span><br><span class=\"line\"><span class=\"string\">                    children</span></span><br><span class=\"line\"><span class=\"string\">                ) : (</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;Redirect</span></span><br><span class=\"line\"><span class=\"string\">                        to=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                            pathname: \"</span>/login<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">                            state: &#123; from: location &#125;</span></span><br><span class=\"line\"><span class=\"string\">                        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                )</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function PublicPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;h3&gt;Public&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function ProtectedPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;h3&gt;Protected&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function LoginPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    let history = useHistory();</span></span><br><span class=\"line\"><span class=\"string\">    let location = useLocation();       //useLocation挂钩返回代表当前URL的位置对象。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    let &#123; from &#125; = location.state || &#123; from: &#123; pathname: \"</span>/<span class=\"string\">\" &#125; &#125;;</span></span><br><span class=\"line\"><span class=\"string\">    let login = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.authenticate(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            history.replace(from);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    return (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;p&gt;You must log in to view the page at &#123;from.pathname&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button onClick=&#123;login&#125;&gt;Log in&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">    Switch,</span><br><span class=\"line\">    Route,</span><br><span class=\"line\">    Link,</span><br><span class=\"line\">    Redirect,</span><br><span class=\"line\">    useHistory,</span><br><span class=\"line\">    useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个例子有3个页面: 一个公共的, 一个受保护的</span></span><br><span class=\"line\"><span class=\"comment\">// 页面, 和一个登陆屏幕. 为了看到受保护的页面, 你必须第一次使用. 相当标准的东西.</span></span><br><span class=\"line\"><span class=\"comment\">// 首先, 访问 公共页面. 然后, 访问protected页面 .你没有登陆的话, 所以你被重定向到login页面.登录后, 你被重定向返回到受保护的页面.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意URL每次都会变.在此刻如果你点击返回按钮, 你是否希望回到登录页面? 不! 你已经登陆了. 试试看,</span></span><br><span class=\"line\"><span class=\"comment\">// 您会看到您返回到您的访问页面仅在登陆之前的页面。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AuthExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Router&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;AuthButton /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;ul&gt;</span><br><span class=\"line\">                    &lt;li&gt;</span><br><span class=\"line\">                        &lt;Link to=<span class=\"string\">\"/public\"</span>&gt;Public Page&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;/</span>li&gt;</span><br><span class=\"line\">                    &lt;li&gt;</span><br><span class=\"line\">                        &lt;Link to=<span class=\"string\">\"/protected\"</span>&gt;Protected Page&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;/</span>li&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;Route path=\"/</span>public<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;PublicPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;Route path=\"</span>/login<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;LoginPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;PrivateRoute path=\"</span>/protected<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;ProtectedPage /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/PrivateRoute&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const fakeAuth = &#123;</span></span><br><span class=\"line\"><span class=\"string\">    isAuthenticated: false,</span></span><br><span class=\"line\"><span class=\"string\">    authenticate(cb) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.isAuthenticated = true;</span></span><br><span class=\"line\"><span class=\"string\">        setTimeout(cb, 100); // fake async</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    signout(cb) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.isAuthenticated = false;</span></span><br><span class=\"line\"><span class=\"string\">        setTimeout(cb, 100);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function AuthButton() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    let history = useHistory();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    return fakeAuth.isAuthenticated ? (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Welcome!&#123;\"</span> <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button</span></span><br><span class=\"line\"><span class=\"string\">                onClick=&#123;() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    fakeAuth.signout(() =&gt; history.push(\"</span>/<span class=\"string\">\"));</span></span><br><span class=\"line\"><span class=\"string\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &gt;</span></span><br><span class=\"line\"><span class=\"string\">                Sign out</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ) : (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;You are not logged in.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//&lt;Route&gt;的包装器，重定向到登录屏幕，如果您尚未通过身份验证。</span></span><br><span class=\"line\"><span class=\"string\">function PrivateRoute(&#123; children, ...rest &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route</span></span><br><span class=\"line\"><span class=\"string\">            &#123;...rest&#125;</span></span><br><span class=\"line\"><span class=\"string\">            render=&#123;(&#123; location &#125;) =&gt;</span></span><br><span class=\"line\"><span class=\"string\">                fakeAuth.isAuthenticated ? (</span></span><br><span class=\"line\"><span class=\"string\">                    children</span></span><br><span class=\"line\"><span class=\"string\">                ) : (</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;Redirect</span></span><br><span class=\"line\"><span class=\"string\">                        to=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                            pathname: \"</span>/login<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">                            state: &#123; from: location &#125;</span></span><br><span class=\"line\"><span class=\"string\">                        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                )</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function PublicPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;h3&gt;Public&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function ProtectedPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;h3&gt;Protected&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function LoginPage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    let history = useHistory();</span></span><br><span class=\"line\"><span class=\"string\">    let location = useLocation();       //useLocation挂钩返回代表当前URL的位置对象。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    let &#123; from &#125; = location.state || &#123; from: &#123; pathname: \"</span>/<span class=\"string\">\" &#125; &#125;;</span></span><br><span class=\"line\"><span class=\"string\">    let login = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        fakeAuth.authenticate(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            history.replace(from);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    return (</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;p&gt;You must log in to view the page at &#123;from.pathname&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button onClick=&#123;login&#125;&gt;Log in&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：</p>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n{\n/*参数是URL开头的占位符\n  冒号，例如`：id`在这个实例中的路线。\n  相似的用于匹配其他动态细分流行的Web框架，例如 Rails and Express */\n} \n\nexport default function ParamsExample() {\n  return (\n    <Router>\n      <div>\n        <h2>Accounts</h2>\n\n        <ul>\n          <li>\n            <Link to=\"/netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/zillow-group/3331\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/:id\" children={<Child />} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Child() {\n  // 我们可以在这里使用`useParams`钩子来访问\n  // the URL的动态片段\n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n}\n```\n```js\nimport { Route } from \"react-router-dom\";\n\nfunction BlogPost() {\n  return (\n    <Route\n      path=\"/blog/:slug\"\n      render={({ match }) => {\n        return <div />;\n      }}\n    />\n  );\n}\n```\n你可以\n```js\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction BlogPost() {\n  let match = useRouteMatch(\"/blog/:slug\");\n\n  return <div />;\n}\n```\n\nuseParams返回URL参数的键/值对的对象。使用它来访问当前`<Route>`的match.params。\n\n\n","source":"_posts/react_router/examples/url_parameters.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n{\n/*参数是URL开头的占位符\n  冒号，例如`：id`在这个实例中的路线。\n  相似的用于匹配其他动态细分流行的Web框架，例如 Rails and Express */\n} \n\nexport default function ParamsExample() {\n  return (\n    <Router>\n      <div>\n        <h2>Accounts</h2>\n\n        <ul>\n          <li>\n            <Link to=\"/netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/zillow-group/3331\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/:id\" children={<Child />} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Child() {\n  // 我们可以在这里使用`useParams`钩子来访问\n  // the URL的动态片段\n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n}\n```\n```js\nimport { Route } from \"react-router-dom\";\n\nfunction BlogPost() {\n  return (\n    <Route\n      path=\"/blog/:slug\"\n      render={({ match }) => {\n        return <div />;\n      }}\n    />\n  );\n}\n```\n你可以\n```js\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction BlogPost() {\n  let match = useRouteMatch(\"/blog/:slug\");\n\n  return <div />;\n}\n```\n\nuseParams返回URL参数的键/值对的对象。使用它来访问当前`<Route>`的match.params。\n\n\n","slug":"react_router/examples/url_parameters","published":1,"date":"2020-01-09T14:18:16.942Z","updated":"2020-01-13T08:42:53.369Z","title":"react_router/examples/url_parameters","_id":"ck59cv4gj0008mkco6dmcb3vt","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/*参数是URL开头的占位符</span></span><br><span class=\"line\"><span class=\"comment\">  冒号，例如`：id`在这个实例中的路线。</span></span><br><span class=\"line\"><span class=\"comment\">  相似的用于匹配其他动态细分流行的Web框架，例如 Rails and Express */</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h2&gt;Accounts&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Link to=\"/</span>netflix<span class=\"string\">\"&gt;Netflix&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/zillow-group/<span class=\"number\">3331</span><span class=\"string\">\"&gt;Zillow Group&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/yahoo<span class=\"string\">\"&gt;Yahoo&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/modus-create<span class=\"string\">\"&gt;Modus Create&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/:id<span class=\"string\">\" children=&#123;&lt;Child /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Child() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // 我们可以在这里使用`useParams`钩子来访问</span></span><br><span class=\"line\"><span class=\"string\">  // the URL的动态片段</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;ID: &#123;id&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/blog/:slug\"</span></span><br><span class=\"line\">      render=&#123;(&#123; match &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>你可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouteMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> match = useRouteMatch(<span class=\"string\">\"/blog/:slug\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>useParams返回URL参数的键/值对的对象。使用它来访问当前<code>&lt;Route&gt;</code>的match.params。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/*参数是URL开头的占位符</span></span><br><span class=\"line\"><span class=\"comment\">  冒号，例如`：id`在这个实例中的路线。</span></span><br><span class=\"line\"><span class=\"comment\">  相似的用于匹配其他动态细分流行的Web框架，例如 Rails and Express */</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h2&gt;Accounts&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Link to=\"/</span>netflix<span class=\"string\">\"&gt;Netflix&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/zillow-group/<span class=\"number\">3331</span><span class=\"string\">\"&gt;Zillow Group&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/yahoo<span class=\"string\">\"&gt;Yahoo&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=\"</span>/modus-create<span class=\"string\">\"&gt;Modus Create&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/:id<span class=\"string\">\" children=&#123;&lt;Child /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Child() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // 我们可以在这里使用`useParams`钩子来访问</span></span><br><span class=\"line\"><span class=\"string\">  // the URL的动态片段</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;ID: &#123;id&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/blog/:slug\"</span></span><br><span class=\"line\">      render=&#123;(&#123; match &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>你可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouteMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> match = useRouteMatch(<span class=\"string\">\"/blog/:slug\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>useParams返回URL参数的键/值对的对象。使用它来访问当前<code>&lt;Route&gt;</code>的match.params。</p>\n"},{"_content":"```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\n// 路线是常规的React组件, 他们可以在程序中的任何位置呈现。包含element的子元素。\n// 当需要对代码分割时，会有所帮助。代码分割分成多个bundle,React router与代码拆分任何其他 React app  是相同.\n\nexport default function NestingExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction Topics() {\n  // The `path` 让我构建 <Route> 路径，那是相对于父Route,而url允许让我们建立相对links\n  let { path, url } = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route exact path={path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n        <Route path={`${path}/:topicId`}>\n          <Topic />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  /* The <Route> 呈现此组件<Route>具有 `/topics/:topicId`. The `:topicId` 部分的网址表示一个占位符，我们可以从 `useParams()`获取.*/\n  let { topicId } = useParams();\n\n  return (\n    <div>\n      <h3>{topicId}</h3>\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/嵌套.md","raw":"```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\n// 路线是常规的React组件, 他们可以在程序中的任何位置呈现。包含element的子元素。\n// 当需要对代码分割时，会有所帮助。代码分割分成多个bundle,React router与代码拆分任何其他 React app  是相同.\n\nexport default function NestingExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction Topics() {\n  // The `path` 让我构建 <Route> 路径，那是相对于父Route,而url允许让我们建立相对links\n  let { path, url } = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route exact path={path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n        <Route path={`${path}/:topicId`}>\n          <Topic />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  /* The <Route> 呈现此组件<Route>具有 `/topics/:topicId`. The `:topicId` 部分的网址表示一个占位符，我们可以从 `useParams()`获取.*/\n  let { topicId } = useParams();\n\n  return (\n    <div>\n      <h3>{topicId}</h3>\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/嵌套","published":1,"date":"2020-01-09T14:54:50.396Z","updated":"2020-01-09T15:12:17.179Z","title":"react_router/examples/嵌套","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gk0009mkco7xdd7lk9","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useParams,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路线是常规的React组件, 他们可以在程序中的任何位置呈现。包含element的子元素。</span></span><br><span class=\"line\"><span class=\"comment\">// 当需要对代码分割时，会有所帮助。代码分割分成多个bundle,React router与代码拆分任何其他 React app  是相同.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NestingExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;hr /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topics() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // The `path` 让我构建 &lt;Route&gt; 路径，那是相对于父Route,而url允许让我们建立相对links</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; path, url &#125; = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/rendering`&#125;&gt;Rendering with React&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/components`&#125;&gt;Components&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/props-v-state`&#125;&gt;Props v. State&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route exact path=&#123;path&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;h3&gt;Please select a topic.&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;path&#125;/:topicId`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topic /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topic() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  /* The &lt;Route&gt; 呈现此组件&lt;Route&gt;具有 `/topics/:topicId`. The `:topicId` 部分的网址表示一个占位符，我们可以从 `useParams()`获取.*/</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; topicId &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;&#123;topicId&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useParams,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路线是常规的React组件, 他们可以在程序中的任何位置呈现。包含element的子元素。</span></span><br><span class=\"line\"><span class=\"comment\">// 当需要对代码分割时，会有所帮助。代码分割分成多个bundle,React router与代码拆分任何其他 React app  是相同.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NestingExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;hr /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">            &lt;Home /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topics() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // The `path` 让我构建 &lt;Route&gt; 路径，那是相对于父Route,而url允许让我们建立相对links</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; path, url &#125; = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/rendering`&#125;&gt;Rendering with React&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/components`&#125;&gt;Components&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;url&#125;/props-v-state`&#125;&gt;Props v. State&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route exact path=&#123;path&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;h3&gt;Please select a topic.&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;path&#125;/:topicId`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topic /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topic() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  /* The &lt;Route&gt; 呈现此组件&lt;Route&gt;具有 `/topics/:topicId`. The `:topicId` 部分的网址表示一个占位符，我们可以从 `useParams()`获取.*/</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; topicId &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;&#123;topicId&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"##  Code Splitting\n\n网络的一项重要功能是，我们无需让访问者下载整个应用程序即可使用。您可以将代码拆分视为增量下载应用程序。为了实现这中功能我们要使用\n webpack, @babel/plugin-syntax-dynamic-import, and loadable-components.\n \n webpack内置了对动态导入的支持；但是，如果您使用的是Babel（例如，将JSX编译为JavaScript），则需要使用@ babel / plugin-syntax-dynamic-import插件。这是仅语法的插件，这意味着Babel不会进行任何其他转换。该插件仅允许Babel解析动态导入，因此webpack可以将它们捆绑为代码拆分。您的.babelrc应该如下所示：\n```.handlebars\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n\n```\nloadable-components是用于通过动态导入加载组件的库。它自动处理各种边缘情况，并使代码拆分变得简单！这是有关如何使用可加载组件的示例：\n```js\nimport loadable from \"@loadable/component\";\nimport Loading from \"./Loading.js\";\n\nconst LoadableComponent = loadable(() => import(\"./Dashboard.js\"), {\n  fallback: <Loading />\n});\n\nexport default class LoadableDashboard extends React.Component {\n  render() {\n    return <LoadableComponent />;\n  }\n}\n```\n这里所有都是它的！只需使用LoadableDashboard（或任何您命名的组件），当您在应用程序中使用它时，它将自动加载并呈现。回退是一个占位符组件，用于在加载实际组件时显示。\n\n### Code Splitting and Server-Side Render\n\nloadable-components包含服务器端渲染的指南。\n","source":"_posts/react_router/指南/Code_Splitting.md","raw":"##  Code Splitting\n\n网络的一项重要功能是，我们无需让访问者下载整个应用程序即可使用。您可以将代码拆分视为增量下载应用程序。为了实现这中功能我们要使用\n webpack, @babel/plugin-syntax-dynamic-import, and loadable-components.\n \n webpack内置了对动态导入的支持；但是，如果您使用的是Babel（例如，将JSX编译为JavaScript），则需要使用@ babel / plugin-syntax-dynamic-import插件。这是仅语法的插件，这意味着Babel不会进行任何其他转换。该插件仅允许Babel解析动态导入，因此webpack可以将它们捆绑为代码拆分。您的.babelrc应该如下所示：\n```.handlebars\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n\n```\nloadable-components是用于通过动态导入加载组件的库。它自动处理各种边缘情况，并使代码拆分变得简单！这是有关如何使用可加载组件的示例：\n```js\nimport loadable from \"@loadable/component\";\nimport Loading from \"./Loading.js\";\n\nconst LoadableComponent = loadable(() => import(\"./Dashboard.js\"), {\n  fallback: <Loading />\n});\n\nexport default class LoadableDashboard extends React.Component {\n  render() {\n    return <LoadableComponent />;\n  }\n}\n```\n这里所有都是它的！只需使用LoadableDashboard（或任何您命名的组件），当您在应用程序中使用它时，它将自动加载并呈现。回退是一个占位符组件，用于在加载实际组件时显示。\n\n### Code Splitting and Server-Side Render\n\nloadable-components包含服务器端渲染的指南。\n","slug":"react_router/指南/Code_Splitting","published":1,"date":"2020-01-09T06:33:56.160Z","updated":"2020-01-09T06:43:00.133Z","title":"react_router/指南/Code_Splitting","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gl000amkco2zcw8cfy","content":"<h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a>Code Splitting</h2><p>网络的一项重要功能是，我们无需让访问者下载整个应用程序即可使用。您可以将代码拆分视为增量下载应用程序。为了实现这中功能我们要使用<br> webpack, @babel/plugin-syntax-dynamic-import, and loadable-components.</p>\n<p> webpack内置了对动态导入的支持；但是，如果您使用的是Babel（例如，将JSX编译为JavaScript），则需要使用@ babel / plugin-syntax-dynamic-import插件。这是仅语法的插件，这意味着Babel不会进行任何其他转换。该插件仅允许Babel解析动态导入，因此webpack可以将它们捆绑为代码拆分。您的.babelrc应该如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-react&quot;],</span><br><span class=\"line\">  &quot;plugins&quot;: [&quot;@babel&#x2F;plugin-syntax-dynamic-import&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadable-components是用于通过动态导入加载组件的库。它自动处理各种边缘情况，并使代码拆分变得简单！这是有关如何使用可加载组件的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> loadable <span class=\"keyword\">from</span> <span class=\"string\">\"@loadable/component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">\"./Loading.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LoadableComponent = loadable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./Dashboard.js\"</span>), &#123;</span><br><span class=\"line\">  fallback: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">export default class LoadableDashboard extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return <span class=\"tag\">&lt;<span class=\"name\">LoadableComponent</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里所有都是它的！只需使用LoadableDashboard（或任何您命名的组件），当您在应用程序中使用它时，它将自动加载并呈现。回退是一个占位符组件，用于在加载实际组件时显示。</p>\n<h3 id=\"Code-Splitting-and-Server-Side-Render\"><a href=\"#Code-Splitting-and-Server-Side-Render\" class=\"headerlink\" title=\"Code Splitting and Server-Side Render\"></a>Code Splitting and Server-Side Render</h3><p>loadable-components包含服务器端渲染的指南。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a>Code Splitting</h2><p>网络的一项重要功能是，我们无需让访问者下载整个应用程序即可使用。您可以将代码拆分视为增量下载应用程序。为了实现这中功能我们要使用<br> webpack, @babel/plugin-syntax-dynamic-import, and loadable-components.</p>\n<p> webpack内置了对动态导入的支持；但是，如果您使用的是Babel（例如，将JSX编译为JavaScript），则需要使用@ babel / plugin-syntax-dynamic-import插件。这是仅语法的插件，这意味着Babel不会进行任何其他转换。该插件仅允许Babel解析动态导入，因此webpack可以将它们捆绑为代码拆分。您的.babelrc应该如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-react&quot;],</span><br><span class=\"line\">  &quot;plugins&quot;: [&quot;@babel&#x2F;plugin-syntax-dynamic-import&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadable-components是用于通过动态导入加载组件的库。它自动处理各种边缘情况，并使代码拆分变得简单！这是有关如何使用可加载组件的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> loadable <span class=\"keyword\">from</span> <span class=\"string\">\"@loadable/component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">\"./Loading.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LoadableComponent = loadable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./Dashboard.js\"</span>), &#123;</span><br><span class=\"line\">  fallback: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">export default class LoadableDashboard extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return <span class=\"tag\">&lt;<span class=\"name\">LoadableComponent</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里所有都是它的！只需使用LoadableDashboard（或任何您命名的组件），当您在应用程序中使用它时，它将自动加载并呈现。回退是一个占位符组件，用于在加载实际组件时显示。</p>\n<h3 id=\"Code-Splitting-and-Server-Side-Render\"><a href=\"#Code-Splitting-and-Server-Side-Render\" class=\"headerlink\" title=\"Code Splitting and Server-Side Render\"></a>Code Splitting and Server-Side Render</h3><p>loadable-components包含服务器端渲染的指南。</p>\n"},{"_content":"##  Philosophy\n\n本指南的目的是说明使用React Router时要具有的思维模型。我们称之为“动态路由”，它与您可能更熟悉的“静态路由”完全不同。\n\n### 静态路由\n\n如果您使用过Rails，Express，Ember，Angular等，则使用了静态路由。在这些框架中，您需要在进行任何渲染之前将路由声明为应用初始化的一部分。React Router pre-v4也是静态的（大部分是静态的）。让我们看一下如何快速配置路由：\n```js\n// Express Style routing:\napp.get(\"/\", handleIndex);\napp.get(\"/invoices\", handleInvoices);\napp.get(\"/invoices/:id\", handleInvoice);\napp.get(\"/invoices/:id/edit\", handleInvoiceEdit);\n\napp.listen();\n```\n\n请注意在应用监听之前如何声明路由。我们使用的客户端路由器相似。在Angular中，您先声明路线，然后在渲染之前将其导入顶级AppModule：\n```js\n// Angular Style routing:\nconst appRoutes: Routes = [\n  {\n    path: \"crisis-center\",\n    component: CrisisListComponent\n  },\n  {\n    path: \"hero/:id\",\n    component: HeroDetailComponent\n  },\n  {\n    path: \"heroes\",\n    component: HeroListComponent,\n    data: { title: \"Heroes List\" }\n  },\n  {\n    path: \"\",\n    redirectTo: \"/heroes\",\n    pathMatch: \"full\"\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes)]\n})\nexport class AppModule {}\n```\nEmber具有常规的route.js文件，该版本会为您读取并导入到应用程序中。同样，这是在您的应用渲染之前发生的。\n\n```js\n// Ember Style Router:\nRouter.map(function() {\n  this.route(\"about\");\n  this.route(\"contact\");\n  this.route(\"rentals\", function() {\n    this.route(\"show\", { path: \"/:rental_id\" });\n  });\n});\n\nexport default Router;\n```\n\n尽管API不同，但它们都共享“静态路由”模型。React Router也跟进了直到v4。\n\n为了成功使用React Router，您需要忘记所有这些！：O\n\n### Backstory\n坦率地说，我们对v2采取React Router的方向感到非常沮丧。我们（Michael和Ryan）感到受API的限制，认识到我们正在重新实现React的各个部分（生命周期等），而这与React为构建UI提供的思维模型不符。\n\n我们正要经过车间讨论要怎么做的研讨会前的酒店走廊。我们互相问：“如果使用我们在讲习班中教授的模式建造路由器，那会是什么样？”\n\n仅仅几个小时的开发时间，我们就获得了概念证明，我们知道这是我们想要路由的未来。我们最终得到的API并不是React的“外部”，它是由React的其余部分组成或自然地融入其中的。我们认为您会喜欢的。\n\n\n### 动态 Routing\n\n当说动态路由时，是指在您的应用渲染时发生的路由，而不是在运行的应用之外的配置或约定中进行。这意味着几乎所有内容都是React Router中的一个组件。这是对该API的60秒回顾，以了解其工作原理：\n\n首先，为您要定位的环境获取一个Router组件，并将其呈现在应用程序的顶部。\n\n```js\n// react-native\nimport { NativeRouter } from \"react-router-native\";\n\n// react-dom (what we'll use here)\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  el\n);\n```\n接下来，获取链接组件以链接到新位置：\n```js\nconst App = () => (\n  <div>\n    <nav>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </nav>\n  </div>\n);\n```\n\n最后，渲染一个Route以在用户访问/ dashboard时显示一些UI。\n```js\nconst App = () => (\n  <div>\n    <nav>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </nav>\n    <div>\n      <Route path=\"/dashboard\" component={Dashboard} />\n    </div>\n  </div>\n);\n```\n路线将渲染<Dashboard {... props} />，其中道具是路由器特定的东西，看起来像{匹配，位置，历史}。如果用户不在/ dashboard上，则Route将呈现null。差不多就够了。\n\n### 嵌套路线\n\n许多路由器都具有“嵌套路由”的概念。如果您使用了v4之前的React Router版本，那么您也会知道它也是如此！当您从静态路由配置转移到动态渲染的路由时，如何“嵌套路由”？好吧，如何嵌套div？\n```js\nconst App = () => (\n  <BrowserRouter>\n    {/* here's a div */}\n    <div>\n      {/* here's a Route */}\n      <Route path=\"/tacos\" component={Tacos} />\n    </div>\n  </BrowserRouter>\n);\n\n// 当网址与`/ tacos`相匹配时，此组件呈现\nconst Tacos = ({ match }) => (\n  // here's a nested div\n  <div>\n    {/* here's a 嵌套 Route,\n        match.url 帮助我们建立相对的路径 */}\n    <Route path={match.url + \"/carnitas\"} component={Carnitas} />\n  </div>\n);\n```\n看看路由器如何没有“嵌套” API？就像div一样，Route只是一个组件。因此，要嵌套一个Route或一个div，您只需…做就可以了。\n\n### 响应路线\n\n考虑用户导航到'    /invoices   '。您的应用程序适应不同的屏幕尺寸，它们的视口狭窄，因此您只向他们显示发票清单和发票仪表板的链接。他们可以从那里更深入地导航。\n```text\nSmall Screen\nurl: /invoices\n\n+----------------------+\n|                      |\n|      Dashboard       |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 01      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 02      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 03      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 04      |\n|                      |\n+----------------------+\n```\n在较大的屏幕上，我们想显示一个主从视图，其中导航在左侧，仪表板或特定发票在右侧。\n```text\nLarge Screen\nurl: /invoices/dashboard\n\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |   Unpaid:             5   |\n+----------------------+                           |\n|                      |   Balance:   $53,543.00   |\n|      Invoice 01      |                           |\n|                      |   Past Due:           2   |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |                           |\n|                      |   +-------------------+   |\n+----------------------+   |                   |   |\n|                      |   |  +    +     +     |   |\n|      Invoice 03      |   |  | +  |     |     |   |\n|                      |   |  | |  |  +  |  +  |   |\n+----------------------+   |  | |  |  |  |  |  |   |\n|                      |   +--+-+--+--+--+--+--+   |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+\n```\n\n现在暂停一分钟，并考虑两种屏幕尺寸的  /invoices 网址。它甚至是大屏幕的有效路线吗？我们应该在右边放什么？\n```text\nLarge Screen\nurl: /invoices\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 01      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |             ???           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 03      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+\n```\n\n在大屏幕上，/invoices 不是有效的路径，但在小屏幕上则是！为了使事情变得更有趣，请考虑使用大型手机的人。他们可能会纵向查看/发票，然后将手机旋转至横向。突然，我们有足够的空间来显示主从界面，因此您应该立即进行重定向！\n\n\nReact Router以前版本的静态路由并没有真正解决这个问题的方法。但是，当路由是动态的时，您可以声明性地组合此功能。如果您开始考虑将路由选择为UI，而不是静态配置，那么您的直觉将引导您进入以下代码\n\n```js\nconst App = () => (\n  <AppLayout>\n    <Route path=\"/invoices\" component={Invoices} />\n  </AppLayout>\n);\n\nconst Invoices = () => (\n  <Layout>\n    {/* 总是显示导航 */}\n    <InvoicesNav />\n\n    <Media query={PRETTY_SMALL}>\n      {screenIsSmall =>\n        screenIsSmall ? (\n          // 小屏幕没有重定向\n          <Switch>\n            <Route\n              exact\n              path=\"/invoices/dashboard\"\n              component={Dashboard}\n            />\n            <Route path=\"/invoices/:id\" component={Invoice} />\n          </Switch>\n        ) : (\n          // 大屏幕\n          <Switch>\n            <Route\n              exact\n              path=\"/invoices/dashboard\"\n              component={Dashboard}\n            />\n            <Route path=\"/invoices/:id\" component={Invoice} />\n            <Redirect from=\"/invoices\" to=\"/invoices/dashboard\" />\n          </Switch>\n        )\n      }\n    </Media>\n  </Layout>\n);\n```\n\n当用户将手机从纵向旋转到横向时，此代码将自动将其重定向到仪表板。有效路线集会根据用户手中移动设备的动态性质而变化。\n\n\n这只是一个例子。我们可以讨论许多其他内容，但我们将总结以下建议：为了使您的直觉与React Router的直觉相符，请考虑组件而不是静态路由。考虑一下如何使用React的声明式可组合性解决问题，因为几乎每个“ React Router问题”都可能是“ React问题”。\n\n","source":"_posts/react_router/指南/Philosophy.md","raw":"##  Philosophy\n\n本指南的目的是说明使用React Router时要具有的思维模型。我们称之为“动态路由”，它与您可能更熟悉的“静态路由”完全不同。\n\n### 静态路由\n\n如果您使用过Rails，Express，Ember，Angular等，则使用了静态路由。在这些框架中，您需要在进行任何渲染之前将路由声明为应用初始化的一部分。React Router pre-v4也是静态的（大部分是静态的）。让我们看一下如何快速配置路由：\n```js\n// Express Style routing:\napp.get(\"/\", handleIndex);\napp.get(\"/invoices\", handleInvoices);\napp.get(\"/invoices/:id\", handleInvoice);\napp.get(\"/invoices/:id/edit\", handleInvoiceEdit);\n\napp.listen();\n```\n\n请注意在应用监听之前如何声明路由。我们使用的客户端路由器相似。在Angular中，您先声明路线，然后在渲染之前将其导入顶级AppModule：\n```js\n// Angular Style routing:\nconst appRoutes: Routes = [\n  {\n    path: \"crisis-center\",\n    component: CrisisListComponent\n  },\n  {\n    path: \"hero/:id\",\n    component: HeroDetailComponent\n  },\n  {\n    path: \"heroes\",\n    component: HeroListComponent,\n    data: { title: \"Heroes List\" }\n  },\n  {\n    path: \"\",\n    redirectTo: \"/heroes\",\n    pathMatch: \"full\"\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes)]\n})\nexport class AppModule {}\n```\nEmber具有常规的route.js文件，该版本会为您读取并导入到应用程序中。同样，这是在您的应用渲染之前发生的。\n\n```js\n// Ember Style Router:\nRouter.map(function() {\n  this.route(\"about\");\n  this.route(\"contact\");\n  this.route(\"rentals\", function() {\n    this.route(\"show\", { path: \"/:rental_id\" });\n  });\n});\n\nexport default Router;\n```\n\n尽管API不同，但它们都共享“静态路由”模型。React Router也跟进了直到v4。\n\n为了成功使用React Router，您需要忘记所有这些！：O\n\n### Backstory\n坦率地说，我们对v2采取React Router的方向感到非常沮丧。我们（Michael和Ryan）感到受API的限制，认识到我们正在重新实现React的各个部分（生命周期等），而这与React为构建UI提供的思维模型不符。\n\n我们正要经过车间讨论要怎么做的研讨会前的酒店走廊。我们互相问：“如果使用我们在讲习班中教授的模式建造路由器，那会是什么样？”\n\n仅仅几个小时的开发时间，我们就获得了概念证明，我们知道这是我们想要路由的未来。我们最终得到的API并不是React的“外部”，它是由React的其余部分组成或自然地融入其中的。我们认为您会喜欢的。\n\n\n### 动态 Routing\n\n当说动态路由时，是指在您的应用渲染时发生的路由，而不是在运行的应用之外的配置或约定中进行。这意味着几乎所有内容都是React Router中的一个组件。这是对该API的60秒回顾，以了解其工作原理：\n\n首先，为您要定位的环境获取一个Router组件，并将其呈现在应用程序的顶部。\n\n```js\n// react-native\nimport { NativeRouter } from \"react-router-native\";\n\n// react-dom (what we'll use here)\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  el\n);\n```\n接下来，获取链接组件以链接到新位置：\n```js\nconst App = () => (\n  <div>\n    <nav>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </nav>\n  </div>\n);\n```\n\n最后，渲染一个Route以在用户访问/ dashboard时显示一些UI。\n```js\nconst App = () => (\n  <div>\n    <nav>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </nav>\n    <div>\n      <Route path=\"/dashboard\" component={Dashboard} />\n    </div>\n  </div>\n);\n```\n路线将渲染<Dashboard {... props} />，其中道具是路由器特定的东西，看起来像{匹配，位置，历史}。如果用户不在/ dashboard上，则Route将呈现null。差不多就够了。\n\n### 嵌套路线\n\n许多路由器都具有“嵌套路由”的概念。如果您使用了v4之前的React Router版本，那么您也会知道它也是如此！当您从静态路由配置转移到动态渲染的路由时，如何“嵌套路由”？好吧，如何嵌套div？\n```js\nconst App = () => (\n  <BrowserRouter>\n    {/* here's a div */}\n    <div>\n      {/* here's a Route */}\n      <Route path=\"/tacos\" component={Tacos} />\n    </div>\n  </BrowserRouter>\n);\n\n// 当网址与`/ tacos`相匹配时，此组件呈现\nconst Tacos = ({ match }) => (\n  // here's a nested div\n  <div>\n    {/* here's a 嵌套 Route,\n        match.url 帮助我们建立相对的路径 */}\n    <Route path={match.url + \"/carnitas\"} component={Carnitas} />\n  </div>\n);\n```\n看看路由器如何没有“嵌套” API？就像div一样，Route只是一个组件。因此，要嵌套一个Route或一个div，您只需…做就可以了。\n\n### 响应路线\n\n考虑用户导航到'    /invoices   '。您的应用程序适应不同的屏幕尺寸，它们的视口狭窄，因此您只向他们显示发票清单和发票仪表板的链接。他们可以从那里更深入地导航。\n```text\nSmall Screen\nurl: /invoices\n\n+----------------------+\n|                      |\n|      Dashboard       |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 01      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 02      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 03      |\n|                      |\n+----------------------+\n|                      |\n|      Invoice 04      |\n|                      |\n+----------------------+\n```\n在较大的屏幕上，我们想显示一个主从视图，其中导航在左侧，仪表板或特定发票在右侧。\n```text\nLarge Screen\nurl: /invoices/dashboard\n\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |   Unpaid:             5   |\n+----------------------+                           |\n|                      |   Balance:   $53,543.00   |\n|      Invoice 01      |                           |\n|                      |   Past Due:           2   |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |                           |\n|                      |   +-------------------+   |\n+----------------------+   |                   |   |\n|                      |   |  +    +     +     |   |\n|      Invoice 03      |   |  | +  |     |     |   |\n|                      |   |  | |  |  +  |  +  |   |\n+----------------------+   |  | |  |  |  |  |  |   |\n|                      |   +--+-+--+--+--+--+--+   |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+\n```\n\n现在暂停一分钟，并考虑两种屏幕尺寸的  /invoices 网址。它甚至是大屏幕的有效路线吗？我们应该在右边放什么？\n```text\nLarge Screen\nurl: /invoices\n+----------------------+---------------------------+\n|                      |                           |\n|      Dashboard       |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 01      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 02      |             ???           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 03      |                           |\n|                      |                           |\n+----------------------+                           |\n|                      |                           |\n|      Invoice 04      |                           |\n|                      |                           |\n+----------------------+---------------------------+\n```\n\n在大屏幕上，/invoices 不是有效的路径，但在小屏幕上则是！为了使事情变得更有趣，请考虑使用大型手机的人。他们可能会纵向查看/发票，然后将手机旋转至横向。突然，我们有足够的空间来显示主从界面，因此您应该立即进行重定向！\n\n\nReact Router以前版本的静态路由并没有真正解决这个问题的方法。但是，当路由是动态的时，您可以声明性地组合此功能。如果您开始考虑将路由选择为UI，而不是静态配置，那么您的直觉将引导您进入以下代码\n\n```js\nconst App = () => (\n  <AppLayout>\n    <Route path=\"/invoices\" component={Invoices} />\n  </AppLayout>\n);\n\nconst Invoices = () => (\n  <Layout>\n    {/* 总是显示导航 */}\n    <InvoicesNav />\n\n    <Media query={PRETTY_SMALL}>\n      {screenIsSmall =>\n        screenIsSmall ? (\n          // 小屏幕没有重定向\n          <Switch>\n            <Route\n              exact\n              path=\"/invoices/dashboard\"\n              component={Dashboard}\n            />\n            <Route path=\"/invoices/:id\" component={Invoice} />\n          </Switch>\n        ) : (\n          // 大屏幕\n          <Switch>\n            <Route\n              exact\n              path=\"/invoices/dashboard\"\n              component={Dashboard}\n            />\n            <Route path=\"/invoices/:id\" component={Invoice} />\n            <Redirect from=\"/invoices\" to=\"/invoices/dashboard\" />\n          </Switch>\n        )\n      }\n    </Media>\n  </Layout>\n);\n```\n\n当用户将手机从纵向旋转到横向时，此代码将自动将其重定向到仪表板。有效路线集会根据用户手中移动设备的动态性质而变化。\n\n\n这只是一个例子。我们可以讨论许多其他内容，但我们将总结以下建议：为了使您的直觉与React Router的直觉相符，请考虑组件而不是静态路由。考虑一下如何使用React的声明式可组合性解决问题，因为几乎每个“ React Router问题”都可能是“ React问题”。\n\n","slug":"react_router/指南/Philosophy","published":1,"date":"2020-01-09T07:45:24.676Z","updated":"2020-01-09T08:10:48.855Z","title":"react_router/指南/Philosophy","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gm000bmkcobjyabxym","content":"<h2 id=\"Philosophy\"><a href=\"#Philosophy\" class=\"headerlink\" title=\"Philosophy\"></a>Philosophy</h2><p>本指南的目的是说明使用React Router时要具有的思维模型。我们称之为“动态路由”，它与您可能更熟悉的“静态路由”完全不同。</p>\n<h3 id=\"静态路由\"><a href=\"#静态路由\" class=\"headerlink\" title=\"静态路由\"></a>静态路由</h3><p>如果您使用过Rails，Express，Ember，Angular等，则使用了静态路由。在这些框架中，您需要在进行任何渲染之前将路由声明为应用初始化的一部分。React Router pre-v4也是静态的（大部分是静态的）。让我们看一下如何快速配置路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express Style routing:</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, handleIndex);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices\"</span>, handleInvoices);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices/:id\"</span>, handleInvoice);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices/:id/edit\"</span>, handleInvoiceEdit);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen();</span><br></pre></td></tr></table></figure>\n\n<p>请注意在应用监听之前如何声明路由。我们使用的客户端路由器相似。在Angular中，您先声明路线，然后在渲染之前将其导入顶级AppModule：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Angular Style routing:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appRoutes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"crisis-center\"</span>,</span><br><span class=\"line\">    component: CrisisListComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"hero/:id\"</span>,</span><br><span class=\"line\">    component: HeroDetailComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"heroes\"</span>,</span><br><span class=\"line\">    component: HeroListComponent,</span><br><span class=\"line\">    data: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"Heroes List\"</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/heroes\"</span>,</span><br><span class=\"line\">    pathMatch: <span class=\"string\">\"full\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    component: PageNotFoundComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(appRoutes)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Ember具有常规的route.js文件，该版本会为您读取并导入到应用程序中。同样，这是在您的应用渲染之前发生的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ember Style Router:</span></span><br><span class=\"line\">Router.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"about\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"contact\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"rentals\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.route(<span class=\"string\">\"show\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/:rental_id\"</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Router;</span><br></pre></td></tr></table></figure>\n\n<p>尽管API不同，但它们都共享“静态路由”模型。React Router也跟进了直到v4。</p>\n<p>为了成功使用React Router，您需要忘记所有这些！：O</p>\n<h3 id=\"Backstory\"><a href=\"#Backstory\" class=\"headerlink\" title=\"Backstory\"></a>Backstory</h3><p>坦率地说，我们对v2采取React Router的方向感到非常沮丧。我们（Michael和Ryan）感到受API的限制，认识到我们正在重新实现React的各个部分（生命周期等），而这与React为构建UI提供的思维模型不符。</p>\n<p>我们正要经过车间讨论要怎么做的研讨会前的酒店走廊。我们互相问：“如果使用我们在讲习班中教授的模式建造路由器，那会是什么样？”</p>\n<p>仅仅几个小时的开发时间，我们就获得了概念证明，我们知道这是我们想要路由的未来。我们最终得到的API并不是React的“外部”，它是由React的其余部分组成或自然地融入其中的。我们认为您会喜欢的。</p>\n<h3 id=\"动态-Routing\"><a href=\"#动态-Routing\" class=\"headerlink\" title=\"动态 Routing\"></a>动态 Routing</h3><p>当说动态路由时，是指在您的应用渲染时发生的路由，而不是在运行的应用之外的配置或约定中进行。这意味着几乎所有内容都是React Router中的一个组件。这是对该API的60秒回顾，以了解其工作原理：</p>\n<p>首先，为您要定位的环境获取一个Router组件，并将其呈现在应用程序的顶部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react-native</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-native\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// react-dom (what we'll use here)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  el</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>接下来，获取链接组件以链接到新位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;nav&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>nav&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，渲染一个Route以在用户访问/ dashboard时显示一些UI。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;nav&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>nav&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/dashboard\"</span> component=&#123;Dashboard&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>路线将渲染&lt;Dashboard {… props} /&gt;，其中道具是路由器特定的东西，看起来像{匹配，位置，历史}。如果用户不在/ dashboard上，则Route将呈现null。差不多就够了。</p>\n<h3 id=\"嵌套路线\"><a href=\"#嵌套路线\" class=\"headerlink\" title=\"嵌套路线\"></a>嵌套路线</h3><p>许多路由器都具有“嵌套路由”的概念。如果您使用了v4之前的React Router版本，那么您也会知道它也是如此！当您从静态路由配置转移到动态渲染的路由时，如何“嵌套路由”？好吧，如何嵌套div？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* here's a div */</span>&#125;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/* here's a Route */</span>&#125;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/tacos\"</span> component=&#123;Tacos&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>BrowserRouter&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当网址与`/ tacos`相匹配时，此组件呈现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Tacos = <span class=\"function\">(<span class=\"params\">&#123; match &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"comment\">// here's a nested div</span></span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* here's a 嵌套 Route,</span></span><br><span class=\"line\"><span class=\"comment\">        match.url 帮助我们建立相对的路径 */</span>&#125;</span><br><span class=\"line\">    &lt;Route path=&#123;match.url + <span class=\"string\">\"/carnitas\"</span>&#125; component=&#123;Carnitas&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>看看路由器如何没有“嵌套” API？就像div一样，Route只是一个组件。因此，要嵌套一个Route或一个div，您只需…做就可以了。</p>\n<h3 id=\"响应路线\"><a href=\"#响应路线\" class=\"headerlink\" title=\"响应路线\"></a>响应路线</h3><p>考虑用户导航到’    /invoices   ‘。您的应用程序适应不同的屏幕尺寸，它们的视口狭窄，因此您只向他们显示发票清单和发票仪表板的链接。他们可以从那里更深入地导航。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Small Screen</span><br><span class=\"line\">url: &#x2F;invoices</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Dashboard       |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 01      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 02      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 03      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 04      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br></pre></td></tr></table></figure>\n<p>在较大的屏幕上，我们想显示一个主从视图，其中导航在左侧，仪表板或特定发票在右侧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Large Screen</span><br><span class=\"line\">url: &#x2F;invoices&#x2F;dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------+---------------------------+</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Dashboard       |                           |</span><br><span class=\"line\">|                      |   Unpaid:             5   |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |   Balance:   $53,543.00   |</span><br><span class=\"line\">|      Invoice 01      |                           |</span><br><span class=\"line\">|                      |   Past Due:           2   |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 02      |                           |</span><br><span class=\"line\">|                      |   +-------------------+   |</span><br><span class=\"line\">+----------------------+   |                   |   |</span><br><span class=\"line\">|                      |   |  +    +     +     |   |</span><br><span class=\"line\">|      Invoice 03      |   |  | +  |     |     |   |</span><br><span class=\"line\">|                      |   |  | |  |  +  |  +  |   |</span><br><span class=\"line\">+----------------------+   |  | |  |  |  |  |  |   |</span><br><span class=\"line\">|                      |   +--+-+--+--+--+--+--+   |</span><br><span class=\"line\">|      Invoice 04      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+---------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>现在暂停一分钟，并考虑两种屏幕尺寸的  /invoices 网址。它甚至是大屏幕的有效路线吗？我们应该在右边放什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Large Screen</span><br><span class=\"line\">url: &#x2F;invoices</span><br><span class=\"line\">+----------------------+---------------------------+</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Dashboard       |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 01      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 02      |             ???           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 03      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 04      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+---------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>在大屏幕上，/invoices 不是有效的路径，但在小屏幕上则是！为了使事情变得更有趣，请考虑使用大型手机的人。他们可能会纵向查看/发票，然后将手机旋转至横向。突然，我们有足够的空间来显示主从界面，因此您应该立即进行重定向！</p>\n<p>React Router以前版本的静态路由并没有真正解决这个问题的方法。但是，当路由是动态的时，您可以声明性地组合此功能。如果您开始考虑将路由选择为UI，而不是静态配置，那么您的直觉将引导您进入以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;AppLayout&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/invoices\"</span> component=&#123;Invoices&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppLayout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Invoices = () =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;/</span>* 总是显示导航 *<span class=\"regexp\">/&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;InvoicesNav /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Media query=&#123;PRETTY_SMALL&#125;&gt;</span><br><span class=\"line\">      &#123;screenIsSmall =&gt;</span><br><span class=\"line\">        screenIsSmall ? (</span><br><span class=\"line\">          <span class=\"comment\">// 小屏幕没有重定向</span></span><br><span class=\"line\">          &lt;Switch&gt;</span><br><span class=\"line\">            &lt;Route</span><br><span class=\"line\">              exact</span><br><span class=\"line\">              path=<span class=\"string\">\"/invoices/dashboard\"</span></span><br><span class=\"line\">              component=&#123;Dashboard&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"/invoices/:id\"</span> component=&#123;Invoice&#125; /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">          /</span><span class=\"regexp\">/ 大屏幕</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">              exact</span></span><br><span class=\"line\"><span class=\"regexp\">              path=\"/i</span>nvoices/dashboard<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">              component=&#123;Dashboard&#125;</span></span><br><span class=\"line\"><span class=\"string\">            /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Route path=\"</span>/invoices/:id<span class=\"string\">\" component=&#123;Invoice&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Redirect from=\"</span>/invoices<span class=\"string\">\" to=\"</span>/invoices/dashboard<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        )</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Media&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Layout&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>当用户将手机从纵向旋转到横向时，此代码将自动将其重定向到仪表板。有效路线集会根据用户手中移动设备的动态性质而变化。</p>\n<p>这只是一个例子。我们可以讨论许多其他内容，但我们将总结以下建议：为了使您的直觉与React Router的直觉相符，请考虑组件而不是静态路由。考虑一下如何使用React的声明式可组合性解决问题，因为几乎每个“ React Router问题”都可能是“ React问题”。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Philosophy\"><a href=\"#Philosophy\" class=\"headerlink\" title=\"Philosophy\"></a>Philosophy</h2><p>本指南的目的是说明使用React Router时要具有的思维模型。我们称之为“动态路由”，它与您可能更熟悉的“静态路由”完全不同。</p>\n<h3 id=\"静态路由\"><a href=\"#静态路由\" class=\"headerlink\" title=\"静态路由\"></a>静态路由</h3><p>如果您使用过Rails，Express，Ember，Angular等，则使用了静态路由。在这些框架中，您需要在进行任何渲染之前将路由声明为应用初始化的一部分。React Router pre-v4也是静态的（大部分是静态的）。让我们看一下如何快速配置路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express Style routing:</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, handleIndex);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices\"</span>, handleInvoices);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices/:id\"</span>, handleInvoice);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/invoices/:id/edit\"</span>, handleInvoiceEdit);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen();</span><br></pre></td></tr></table></figure>\n\n<p>请注意在应用监听之前如何声明路由。我们使用的客户端路由器相似。在Angular中，您先声明路线，然后在渲染之前将其导入顶级AppModule：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Angular Style routing:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appRoutes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"crisis-center\"</span>,</span><br><span class=\"line\">    component: CrisisListComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"hero/:id\"</span>,</span><br><span class=\"line\">    component: HeroDetailComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"heroes\"</span>,</span><br><span class=\"line\">    component: HeroListComponent,</span><br><span class=\"line\">    data: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"Heroes List\"</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/heroes\"</span>,</span><br><span class=\"line\">    pathMatch: <span class=\"string\">\"full\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    component: PageNotFoundComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(appRoutes)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Ember具有常规的route.js文件，该版本会为您读取并导入到应用程序中。同样，这是在您的应用渲染之前发生的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ember Style Router:</span></span><br><span class=\"line\">Router.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"about\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"contact\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.route(<span class=\"string\">\"rentals\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.route(<span class=\"string\">\"show\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/:rental_id\"</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Router;</span><br></pre></td></tr></table></figure>\n\n<p>尽管API不同，但它们都共享“静态路由”模型。React Router也跟进了直到v4。</p>\n<p>为了成功使用React Router，您需要忘记所有这些！：O</p>\n<h3 id=\"Backstory\"><a href=\"#Backstory\" class=\"headerlink\" title=\"Backstory\"></a>Backstory</h3><p>坦率地说，我们对v2采取React Router的方向感到非常沮丧。我们（Michael和Ryan）感到受API的限制，认识到我们正在重新实现React的各个部分（生命周期等），而这与React为构建UI提供的思维模型不符。</p>\n<p>我们正要经过车间讨论要怎么做的研讨会前的酒店走廊。我们互相问：“如果使用我们在讲习班中教授的模式建造路由器，那会是什么样？”</p>\n<p>仅仅几个小时的开发时间，我们就获得了概念证明，我们知道这是我们想要路由的未来。我们最终得到的API并不是React的“外部”，它是由React的其余部分组成或自然地融入其中的。我们认为您会喜欢的。</p>\n<h3 id=\"动态-Routing\"><a href=\"#动态-Routing\" class=\"headerlink\" title=\"动态 Routing\"></a>动态 Routing</h3><p>当说动态路由时，是指在您的应用渲染时发生的路由，而不是在运行的应用之外的配置或约定中进行。这意味着几乎所有内容都是React Router中的一个组件。这是对该API的60秒回顾，以了解其工作原理：</p>\n<p>首先，为您要定位的环境获取一个Router组件，并将其呈现在应用程序的顶部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react-native</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-native\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// react-dom (what we'll use here)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  el</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>接下来，获取链接组件以链接到新位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;nav&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>nav&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，渲染一个Route以在用户访问/ dashboard时显示一些UI。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;nav&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/dashboard\"</span>&gt;Dashboard&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>nav&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/dashboard\"</span> component=&#123;Dashboard&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>路线将渲染&lt;Dashboard {… props} /&gt;，其中道具是路由器特定的东西，看起来像{匹配，位置，历史}。如果用户不在/ dashboard上，则Route将呈现null。差不多就够了。</p>\n<h3 id=\"嵌套路线\"><a href=\"#嵌套路线\" class=\"headerlink\" title=\"嵌套路线\"></a>嵌套路线</h3><p>许多路由器都具有“嵌套路由”的概念。如果您使用了v4之前的React Router版本，那么您也会知道它也是如此！当您从静态路由配置转移到动态渲染的路由时，如何“嵌套路由”？好吧，如何嵌套div？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* here's a div */</span>&#125;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/* here's a Route */</span>&#125;</span><br><span class=\"line\">      &lt;Route path=<span class=\"string\">\"/tacos\"</span> component=&#123;Tacos&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>BrowserRouter&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当网址与`/ tacos`相匹配时，此组件呈现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Tacos = <span class=\"function\">(<span class=\"params\">&#123; match &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"comment\">// here's a nested div</span></span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* here's a 嵌套 Route,</span></span><br><span class=\"line\"><span class=\"comment\">        match.url 帮助我们建立相对的路径 */</span>&#125;</span><br><span class=\"line\">    &lt;Route path=&#123;match.url + <span class=\"string\">\"/carnitas\"</span>&#125; component=&#123;Carnitas&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>看看路由器如何没有“嵌套” API？就像div一样，Route只是一个组件。因此，要嵌套一个Route或一个div，您只需…做就可以了。</p>\n<h3 id=\"响应路线\"><a href=\"#响应路线\" class=\"headerlink\" title=\"响应路线\"></a>响应路线</h3><p>考虑用户导航到’    /invoices   ‘。您的应用程序适应不同的屏幕尺寸，它们的视口狭窄，因此您只向他们显示发票清单和发票仪表板的链接。他们可以从那里更深入地导航。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Small Screen</span><br><span class=\"line\">url: &#x2F;invoices</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Dashboard       |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 01      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 02      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 03      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">|      Invoice 04      |</span><br><span class=\"line\">|                      |</span><br><span class=\"line\">+----------------------+</span><br></pre></td></tr></table></figure>\n<p>在较大的屏幕上，我们想显示一个主从视图，其中导航在左侧，仪表板或特定发票在右侧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Large Screen</span><br><span class=\"line\">url: &#x2F;invoices&#x2F;dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------+---------------------------+</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Dashboard       |                           |</span><br><span class=\"line\">|                      |   Unpaid:             5   |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |   Balance:   $53,543.00   |</span><br><span class=\"line\">|      Invoice 01      |                           |</span><br><span class=\"line\">|                      |   Past Due:           2   |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 02      |                           |</span><br><span class=\"line\">|                      |   +-------------------+   |</span><br><span class=\"line\">+----------------------+   |                   |   |</span><br><span class=\"line\">|                      |   |  +    +     +     |   |</span><br><span class=\"line\">|      Invoice 03      |   |  | +  |     |     |   |</span><br><span class=\"line\">|                      |   |  | |  |  +  |  +  |   |</span><br><span class=\"line\">+----------------------+   |  | |  |  |  |  |  |   |</span><br><span class=\"line\">|                      |   +--+-+--+--+--+--+--+   |</span><br><span class=\"line\">|      Invoice 04      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+---------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>现在暂停一分钟，并考虑两种屏幕尺寸的  /invoices 网址。它甚至是大屏幕的有效路线吗？我们应该在右边放什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Large Screen</span><br><span class=\"line\">url: &#x2F;invoices</span><br><span class=\"line\">+----------------------+---------------------------+</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Dashboard       |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 01      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 02      |             ???           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 03      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">|      Invoice 04      |                           |</span><br><span class=\"line\">|                      |                           |</span><br><span class=\"line\">+----------------------+---------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>在大屏幕上，/invoices 不是有效的路径，但在小屏幕上则是！为了使事情变得更有趣，请考虑使用大型手机的人。他们可能会纵向查看/发票，然后将手机旋转至横向。突然，我们有足够的空间来显示主从界面，因此您应该立即进行重定向！</p>\n<p>React Router以前版本的静态路由并没有真正解决这个问题的方法。但是，当路由是动态的时，您可以声明性地组合此功能。如果您开始考虑将路由选择为UI，而不是静态配置，那么您的直觉将引导您进入以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;AppLayout&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/invoices\"</span> component=&#123;Invoices&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppLayout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Invoices = () =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;/</span>* 总是显示导航 *<span class=\"regexp\">/&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;InvoicesNav /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Media query=&#123;PRETTY_SMALL&#125;&gt;</span><br><span class=\"line\">      &#123;screenIsSmall =&gt;</span><br><span class=\"line\">        screenIsSmall ? (</span><br><span class=\"line\">          <span class=\"comment\">// 小屏幕没有重定向</span></span><br><span class=\"line\">          &lt;Switch&gt;</span><br><span class=\"line\">            &lt;Route</span><br><span class=\"line\">              exact</span><br><span class=\"line\">              path=<span class=\"string\">\"/invoices/dashboard\"</span></span><br><span class=\"line\">              component=&#123;Dashboard&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"/invoices/:id\"</span> component=&#123;Invoice&#125; /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">          /</span><span class=\"regexp\">/ 大屏幕</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">              exact</span></span><br><span class=\"line\"><span class=\"regexp\">              path=\"/i</span>nvoices/dashboard<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">              component=&#123;Dashboard&#125;</span></span><br><span class=\"line\"><span class=\"string\">            /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Route path=\"</span>/invoices/:id<span class=\"string\">\" component=&#123;Invoice&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Redirect from=\"</span>/invoices<span class=\"string\">\" to=\"</span>/invoices/dashboard<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        )</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Media&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Layout&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>当用户将手机从纵向旋转到横向时，此代码将自动将其重定向到仪表板。有效路线集会根据用户手中移动设备的动态性质而变化。</p>\n<p>这只是一个例子。我们可以讨论许多其他内容，但我们将总结以下建议：为了使您的直觉与React Router的直觉相符，请考虑组件而不是静态路由。考虑一下如何使用React的声明式可组合性解决问题，因为几乎每个“ React Router问题”都可能是“ React问题”。</p>\n"},{"_content":"##  Primary Components\n\nReact Router中的组件主要分为三类：\n      \n   -    routers,例如  <BrowserRouter> and <HashRouter>\n   -    route匹配，例如  <Route> and <Switch>\n   -    导航  例如  <Link>, <NavLink>, and <Redirect>\n   \n使用的web应运都应从react-router-dom导入。\n\n    import { BrowserRouter, Route, Link } from \"react-router-dom\";\n    Routers\n\n### Routers\n\n   每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供 `<BrowserRouter>`和`<HashRouter>`路由器。两者之间的主要区别在于**它们存储URL和与Web服务器通信的方式**。\n\n   -    `<BrowserRouter>`使用常规URL路径。\n        这些通常是外观最好的URL，但是它们要求正确配置服务器。\n        具体来说，您的Web服务器需要在所有由React Router客户端管理的URL上提供相同的页面。\n        Create React App在开发中即开即用地支持此功能，并附带有关如何配置生产服务器的说明。\n   -    `<HashRouter>`将当前位置存储在URL的哈希部分中，因此URL看起来类似于http://example.com/#/your/page。\n        由于哈希从不发送到服务器，因此这意味着不需要特殊的服务器配置。\n        \n   要使用路由器，只需确保将其呈现在元素层次结构的根目录下即可。通常，您会**将顶级<App>元素包装在路由器**中，如下所示：        \n   \n   ```js\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import { BrowserRouter } from \"react-router-dom\";\n   \n   function App() {\n     return <h1>Hello React Router</h1>;\n   }\n   \n   ReactDOM.render(\n     <BrowserRouter>\n       <App />\n     </BrowserRouter>,\n     document.getElementById(\"root\")\n   );\n   ```\n### Route Matchers\n\n  有两个路由匹配组件：Switch and Route。呈现`<Switch>`时，它将搜索其子`<Route>`元素以查找其路径与当前URL匹配的元素。当找到一个时，它将呈现该`<Route>`并忽略所有其他路由。这意味着您应该将`<Route>`包含更多特定路径（通常较长）的路径放在不那么特定路径之前。\n  \n  如果没有<Route>匹配，则<Switch>不呈现任何内容（空）\n\n   ```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import {\n      BrowserRouter as Router,\n      Switch,\n      Route\n    } from \"react-router-dom\";\n    \n    function App() {\n      return (\n        <div>\n          <Switch>\n            {/* 如果当前URL是/ about，则呈现此路由\n                而其余的则被忽略 */}\n            <Route path=\"/about\">\n              <About />\n            </Route>\n    \n            {/* 请注意这两个路由的顺序。更具体path =\" / contact /：id\"在path =\" / contact\"之前，因此查看单个联系人时，路线将呈现 */}\n            <Route path=\"/contact/:id\">\n              <Contact />\n            </Route>\n            <Route path=\"/contact\">\n              <AllContacts />\n            </Route>\n            {/* 如果先前的路线都不提供任何东西，\n                这条路线充当后备路线。\n                重要提示：路径=\" /\"的路线将*始终*匹配URL，因为所有URL均以/开头。所以那是为什么我们把这一切放在最后\n                */}\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      );\n    }\n    \n    ReactDOM.render(\n      <Router>\n        <App />\n      </Router>,\n      document.getElementById(\"root\")\n    );\n   ```\n   需要注意的重要一件事是`<Route path>`匹配URL的开头，而不是整个开头。因此，`<Route path =“ /”>`将始终与URL匹配。因此，我们通常将此`<Route>`放在`<Switch>`的最后。另一种可能的解决方案是使用确实与整个URL匹配的`<Route exact path=\"/\">`。\n\n   注意：尽管React Router确实支持在`<Switch>`之外渲染`<Route>`元素，但是从5.1版本开始，我们建议您改用useRouteMatch钩子。此外，我们不建议您渲染不带路径的`<Route>`，而是建议您使用钩子来访问所需的任何变量。\n### 导航（或路线更改器）\n   React Router提供了一个`<Link>`组件来在您的应用程序中创建链接。无论在何处呈现`<Link>`，锚点（`<a>`）都将呈现在HTML文档中。\n   ```html\n    <Link to=\"/\">Home</Link>\n    // <a href=\"/\">Home</a>\n```\n   `<NavLink>`是`<Link>`的一种特殊类型，当其prop与当前位置匹配时，可以将其自身设置为“active”。\n   ```html\n    <NavLink to=\"/react\" activeClassName=\"hurray\">\n      React\n    </NavLink>\n    \n    // 当 URL 是 /react, 呈现:\n    // <a href=\"/react\" className=\"hurray\">React</a>\n    \n    // 没有设置成active，呈现：\n    // <a href=\"/react\">React</a>\n```\n   任何时候要强制导航，都可以给予`<Redirect>`。当`<Redirect>`呈现时，它将使用其prop进行导航。\n   \n   ```js\n    <Redirect to=\"/login\" />\n   ```\n","source":"_posts/react_router/指南/Primary_Components.md","raw":"##  Primary Components\n\nReact Router中的组件主要分为三类：\n      \n   -    routers,例如  <BrowserRouter> and <HashRouter>\n   -    route匹配，例如  <Route> and <Switch>\n   -    导航  例如  <Link>, <NavLink>, and <Redirect>\n   \n使用的web应运都应从react-router-dom导入。\n\n    import { BrowserRouter, Route, Link } from \"react-router-dom\";\n    Routers\n\n### Routers\n\n   每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供 `<BrowserRouter>`和`<HashRouter>`路由器。两者之间的主要区别在于**它们存储URL和与Web服务器通信的方式**。\n\n   -    `<BrowserRouter>`使用常规URL路径。\n        这些通常是外观最好的URL，但是它们要求正确配置服务器。\n        具体来说，您的Web服务器需要在所有由React Router客户端管理的URL上提供相同的页面。\n        Create React App在开发中即开即用地支持此功能，并附带有关如何配置生产服务器的说明。\n   -    `<HashRouter>`将当前位置存储在URL的哈希部分中，因此URL看起来类似于http://example.com/#/your/page。\n        由于哈希从不发送到服务器，因此这意味着不需要特殊的服务器配置。\n        \n   要使用路由器，只需确保将其呈现在元素层次结构的根目录下即可。通常，您会**将顶级<App>元素包装在路由器**中，如下所示：        \n   \n   ```js\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import { BrowserRouter } from \"react-router-dom\";\n   \n   function App() {\n     return <h1>Hello React Router</h1>;\n   }\n   \n   ReactDOM.render(\n     <BrowserRouter>\n       <App />\n     </BrowserRouter>,\n     document.getElementById(\"root\")\n   );\n   ```\n### Route Matchers\n\n  有两个路由匹配组件：Switch and Route。呈现`<Switch>`时，它将搜索其子`<Route>`元素以查找其路径与当前URL匹配的元素。当找到一个时，它将呈现该`<Route>`并忽略所有其他路由。这意味着您应该将`<Route>`包含更多特定路径（通常较长）的路径放在不那么特定路径之前。\n  \n  如果没有<Route>匹配，则<Switch>不呈现任何内容（空）\n\n   ```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import {\n      BrowserRouter as Router,\n      Switch,\n      Route\n    } from \"react-router-dom\";\n    \n    function App() {\n      return (\n        <div>\n          <Switch>\n            {/* 如果当前URL是/ about，则呈现此路由\n                而其余的则被忽略 */}\n            <Route path=\"/about\">\n              <About />\n            </Route>\n    \n            {/* 请注意这两个路由的顺序。更具体path =\" / contact /：id\"在path =\" / contact\"之前，因此查看单个联系人时，路线将呈现 */}\n            <Route path=\"/contact/:id\">\n              <Contact />\n            </Route>\n            <Route path=\"/contact\">\n              <AllContacts />\n            </Route>\n            {/* 如果先前的路线都不提供任何东西，\n                这条路线充当后备路线。\n                重要提示：路径=\" /\"的路线将*始终*匹配URL，因为所有URL均以/开头。所以那是为什么我们把这一切放在最后\n                */}\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      );\n    }\n    \n    ReactDOM.render(\n      <Router>\n        <App />\n      </Router>,\n      document.getElementById(\"root\")\n    );\n   ```\n   需要注意的重要一件事是`<Route path>`匹配URL的开头，而不是整个开头。因此，`<Route path =“ /”>`将始终与URL匹配。因此，我们通常将此`<Route>`放在`<Switch>`的最后。另一种可能的解决方案是使用确实与整个URL匹配的`<Route exact path=\"/\">`。\n\n   注意：尽管React Router确实支持在`<Switch>`之外渲染`<Route>`元素，但是从5.1版本开始，我们建议您改用useRouteMatch钩子。此外，我们不建议您渲染不带路径的`<Route>`，而是建议您使用钩子来访问所需的任何变量。\n### 导航（或路线更改器）\n   React Router提供了一个`<Link>`组件来在您的应用程序中创建链接。无论在何处呈现`<Link>`，锚点（`<a>`）都将呈现在HTML文档中。\n   ```html\n    <Link to=\"/\">Home</Link>\n    // <a href=\"/\">Home</a>\n```\n   `<NavLink>`是`<Link>`的一种特殊类型，当其prop与当前位置匹配时，可以将其自身设置为“active”。\n   ```html\n    <NavLink to=\"/react\" activeClassName=\"hurray\">\n      React\n    </NavLink>\n    \n    // 当 URL 是 /react, 呈现:\n    // <a href=\"/react\" className=\"hurray\">React</a>\n    \n    // 没有设置成active，呈现：\n    // <a href=\"/react\">React</a>\n```\n   任何时候要强制导航，都可以给予`<Redirect>`。当`<Redirect>`呈现时，它将使用其prop进行导航。\n   \n   ```js\n    <Redirect to=\"/login\" />\n   ```\n","slug":"react_router/指南/Primary_Components","published":1,"date":"2020-01-09T04:42:03.343Z","updated":"2020-01-09T05:36:06.684Z","title":"react_router/指南/Primary_Components","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gm000cmkcohuph2kf9","content":"<h2 id=\"Primary-Components\"><a href=\"#Primary-Components\" class=\"headerlink\" title=\"Primary Components\"></a>Primary Components</h2><p>React Router中的组件主要分为三类：</p>\n<ul>\n<li>routers,例如  <BrowserRouter> and <HashRouter></li>\n<li>route匹配，例如  <Route> and <Switch></li>\n<li>导航  例如  <Link>, <NavLink>, and <Redirect></li>\n</ul>\n<p>使用的web应运都应从react-router-dom导入。</p>\n<pre><code>import { BrowserRouter, Route, Link } from &quot;react-router-dom&quot;;\nRouters</code></pre><h3 id=\"Routers\"><a href=\"#Routers\" class=\"headerlink\" title=\"Routers\"></a>Routers</h3><p>   每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供 <code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>路由器。两者之间的主要区别在于<strong>它们存储URL和与Web服务器通信的方式</strong>。</p>\n<ul>\n<li><p><code>&lt;BrowserRouter&gt;</code>使用常规URL路径。<br>这些通常是外观最好的URL，但是它们要求正确配置服务器。<br>具体来说，您的Web服务器需要在所有由React Router客户端管理的URL上提供相同的页面。<br>Create React App在开发中即开即用地支持此功能，并附带有关如何配置生产服务器的说明。</p>\n</li>\n<li><p><code>&lt;HashRouter&gt;</code>将当前位置存储在URL的哈希部分中，因此URL看起来类似于<a href=\"http://example.com/#/your/page。\" target=\"_blank\" rel=\"noopener\">http://example.com/#/your/page。</a><br>由于哈希从不发送到服务器，因此这意味着不需要特殊的服务器配置。</p>\n<p>要使用路由器，只需确保将其呈现在元素层次结构的根目录下即可。通常，您会<strong>将顶级<App>元素包装在路由器</strong>中，如下所示：        </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React Router<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Route-Matchers\"><a href=\"#Route-Matchers\" class=\"headerlink\" title=\"Route Matchers\"></a>Route Matchers</h3><p>有两个路由匹配组件：Switch and Route。呈现<code>&lt;Switch&gt;</code>时，它将搜索其子<code>&lt;Route&gt;</code>元素以查找其路径与当前URL匹配的元素。当找到一个时，它将呈现该<code>&lt;Route&gt;</code>并忽略所有其他路由。这意味着您应该将<code>&lt;Route&gt;</code>包含更多特定路径（通常较长）的路径放在不那么特定路径之前。</p>\n<p>如果没有<Route>匹配，则<Switch>不呈现任何内容（空）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &#123;<span class=\"comment\">/* 如果当前URL是/ about，则呈现此路由</span></span><br><span class=\"line\"><span class=\"comment\">            而其余的则被忽略 */</span>&#125;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">          &lt;About /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;/</span>* 请注意这两个路由的顺序。更具体path =<span class=\"string\">\" / contact /：id\"</span>在path =<span class=\"string\">\" / contact\"</span>之前，因此查看单个联系人时，路线将呈现 *<span class=\"regexp\">/&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span>contact/:id<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Contact /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/contact<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;AllContacts /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;/* 如果先前的路线都不提供任何东西，</span></span><br><span class=\"line\"><span class=\"string\">            这条路线充当后备路线。</span></span><br><span class=\"line\"><span class=\"string\">            重要提示：路径=\"</span> /<span class=\"string\">\"的路线将*始终*匹配URL，因为所有URL均以/开头。所以那是为什么我们把这一切放在最后</span></span><br><span class=\"line\"><span class=\"string\">            */&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"string\">  &lt;Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;App /&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;,</span></span><br><span class=\"line\"><span class=\"string\">  document.getElementById(\"</span>root<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的重要一件事是<code>&lt;Route path&gt;</code>匹配URL的开头，而不是整个开头。因此，<code>&lt;Route path =“ /”&gt;</code>将始终与URL匹配。因此，我们通常将此<code>&lt;Route&gt;</code>放在<code>&lt;Switch&gt;</code>的最后。另一种可能的解决方案是使用确实与整个URL匹配的<code>&lt;Route exact path=&quot;/&quot;&gt;</code>。</p>\n<p>注意：尽管React Router确实支持在<code>&lt;Switch&gt;</code>之外渲染<code>&lt;Route&gt;</code>元素，但是从5.1版本开始，我们建议您改用useRouteMatch钩子。此外，我们不建议您渲染不带路径的<code>&lt;Route&gt;</code>，而是建议您使用钩子来访问所需的任何变量。</p>\n<h3 id=\"导航（或路线更改器）\"><a href=\"#导航（或路线更改器）\" class=\"headerlink\" title=\"导航（或路线更改器）\"></a>导航（或路线更改器）</h3><p>React Router提供了一个<code>&lt;Link&gt;</code>组件来在您的应用程序中创建链接。无论在何处呈现<code>&lt;Link&gt;</code>，锚点（<code>&lt;a&gt;</code>）都将呈现在HTML文档中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code>的一种特殊类型，当其prop与当前位置匹配时，可以将其自身设置为“active”。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/react\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"hurray\"</span>&gt;</span></span><br><span class=\"line\">  React</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 当 URL 是 /react, 呈现:</span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/react\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"hurray\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 没有设置成active，呈现：</span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/react\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>任何时候要强制导航，都可以给予<code>&lt;Redirect&gt;</code>。当<code>&lt;Redirect&gt;</code>呈现时，它将使用其prop进行导航。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Redirect to=<span class=\"string\">\"/login\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Primary-Components\"><a href=\"#Primary-Components\" class=\"headerlink\" title=\"Primary Components\"></a>Primary Components</h2><p>React Router中的组件主要分为三类：</p>\n<ul>\n<li>routers,例如  <BrowserRouter> and <HashRouter></li>\n<li>route匹配，例如  <Route> and <Switch></li>\n<li>导航  例如  <Link>, <NavLink>, and <Redirect></li>\n</ul>\n<p>使用的web应运都应从react-router-dom导入。</p>\n<pre><code>import { BrowserRouter, Route, Link } from &quot;react-router-dom&quot;;\nRouters</code></pre><h3 id=\"Routers\"><a href=\"#Routers\" class=\"headerlink\" title=\"Routers\"></a>Routers</h3><p>   每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供 <code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>路由器。两者之间的主要区别在于<strong>它们存储URL和与Web服务器通信的方式</strong>。</p>\n<ul>\n<li><p><code>&lt;BrowserRouter&gt;</code>使用常规URL路径。<br>这些通常是外观最好的URL，但是它们要求正确配置服务器。<br>具体来说，您的Web服务器需要在所有由React Router客户端管理的URL上提供相同的页面。<br>Create React App在开发中即开即用地支持此功能，并附带有关如何配置生产服务器的说明。</p>\n</li>\n<li><p><code>&lt;HashRouter&gt;</code>将当前位置存储在URL的哈希部分中，因此URL看起来类似于<a href=\"http://example.com/#/your/page。\" target=\"_blank\" rel=\"noopener\">http://example.com/#/your/page。</a><br>由于哈希从不发送到服务器，因此这意味着不需要特殊的服务器配置。</p>\n<p>要使用路由器，只需确保将其呈现在元素层次结构的根目录下即可。通常，您会<strong>将顶级<App>元素包装在路由器</strong>中，如下所示：        </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React Router<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Route-Matchers\"><a href=\"#Route-Matchers\" class=\"headerlink\" title=\"Route Matchers\"></a>Route Matchers</h3><p>有两个路由匹配组件：Switch and Route。呈现<code>&lt;Switch&gt;</code>时，它将搜索其子<code>&lt;Route&gt;</code>元素以查找其路径与当前URL匹配的元素。当找到一个时，它将呈现该<code>&lt;Route&gt;</code>并忽略所有其他路由。这意味着您应该将<code>&lt;Route&gt;</code>包含更多特定路径（通常较长）的路径放在不那么特定路径之前。</p>\n<p>如果没有<Route>匹配，则<Switch>不呈现任何内容（空）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &#123;<span class=\"comment\">/* 如果当前URL是/ about，则呈现此路由</span></span><br><span class=\"line\"><span class=\"comment\">            而其余的则被忽略 */</span>&#125;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">          &lt;About /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;/</span>* 请注意这两个路由的顺序。更具体path =<span class=\"string\">\" / contact /：id\"</span>在path =<span class=\"string\">\" / contact\"</span>之前，因此查看单个联系人时，路线将呈现 *<span class=\"regexp\">/&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span>contact/:id<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Contact /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/contact<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;AllContacts /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;/* 如果先前的路线都不提供任何东西，</span></span><br><span class=\"line\"><span class=\"string\">            这条路线充当后备路线。</span></span><br><span class=\"line\"><span class=\"string\">            重要提示：路径=\"</span> /<span class=\"string\">\"的路线将*始终*匹配URL，因为所有URL均以/开头。所以那是为什么我们把这一切放在最后</span></span><br><span class=\"line\"><span class=\"string\">            */&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"string\">  &lt;Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;App /&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;,</span></span><br><span class=\"line\"><span class=\"string\">  document.getElementById(\"</span>root<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的重要一件事是<code>&lt;Route path&gt;</code>匹配URL的开头，而不是整个开头。因此，<code>&lt;Route path =“ /”&gt;</code>将始终与URL匹配。因此，我们通常将此<code>&lt;Route&gt;</code>放在<code>&lt;Switch&gt;</code>的最后。另一种可能的解决方案是使用确实与整个URL匹配的<code>&lt;Route exact path=&quot;/&quot;&gt;</code>。</p>\n<p>注意：尽管React Router确实支持在<code>&lt;Switch&gt;</code>之外渲染<code>&lt;Route&gt;</code>元素，但是从5.1版本开始，我们建议您改用useRouteMatch钩子。此外，我们不建议您渲染不带路径的<code>&lt;Route&gt;</code>，而是建议您使用钩子来访问所需的任何变量。</p>\n<h3 id=\"导航（或路线更改器）\"><a href=\"#导航（或路线更改器）\" class=\"headerlink\" title=\"导航（或路线更改器）\"></a>导航（或路线更改器）</h3><p>React Router提供了一个<code>&lt;Link&gt;</code>组件来在您的应用程序中创建链接。无论在何处呈现<code>&lt;Link&gt;</code>，锚点（<code>&lt;a&gt;</code>）都将呈现在HTML文档中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code>的一种特殊类型，当其prop与当前位置匹配时，可以将其自身设置为“active”。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/react\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"hurray\"</span>&gt;</span></span><br><span class=\"line\">  React</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 当 URL 是 /react, 呈现:</span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/react\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"hurray\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 没有设置成active，呈现：</span><br><span class=\"line\">// <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/react\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>任何时候要强制导航，都可以给予<code>&lt;Redirect&gt;</code>。当<code>&lt;Redirect&gt;</code>呈现时，它将使用其prop进行导航。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Redirect to=<span class=\"string\">\"/login\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"_content":"##  Redux整合\n\nRedux是React生态系统的重要组成部分。对于想要同时使用React Router和Redux的人，我们希望使其无缝集成。\n\n### 阻止的更新\n通常，React Router和Redux可以很好地协同工作。不过，有时候，应用程序的组件可能会在位置更改时（子路线或活动的导航链接不更新）不更新。\n\n\n在以下情况下会发生这种情况：\n    1.该组件通过connect（）（Comp）连接到redux。\n    2.该组件不是“路由组件”，这意味着它的呈现方式不是这样：`<Route component = {SomeConnectedThing} />`\n\n\n问题在于Redux实现了shouldComponentUpdate，如果没有从路由器接收道具，则没有任何迹象表明发生了任何变化。这很容易解决。查找连接组件的位置，然后将其与Router包装在一起。\n```js\n// before\nexport default connect(mapStateToProps)(Something)\n\n// after\nimport { withRouter } from 'react-router-dom'\nexport default withRouter(connect(mapStateToProps)(Something))\n```\n\n### 深度整合\n\n有些人想：\n    1.与商店同步并从商店访问路由数据。\n    2.能够通过调度动作进行导航。\n    3.在Redux devtools中支持对路径更改进行时间旅行调试。\n\n所有这些都需要更深入的集成。\n\n我们的建议是不要将路线完全保留在Redux商店中。推理:\n\n   1.路由数据已经成为大多数关心它的组件的支持。无论是来自商店还是路由器，您组件的代码都基本相同。\n   \n   2.在大多数情况下，您可以使用链接，导航链接和重定向来执行导航操作。有时，在某些最初由操作启动的异步任务之后，您可能还需要以编程方式导航。例如，您可以在用户提交登录表单时调度操作。然后，您的重击，传奇或其他异步处理程序会对凭据进行身份验证，如果成功，则需要以某种方式导航到新页面。此处的解决方案只是将历史对象（提供给所有路由组件）包括在操作的有效负载中，并且异步处理程序可以在适当的时候使用此对象进行导航。\n   \n   3.路线更改对于时间旅行调试不太重要。唯一明显的情况是调试路由器/商店同步中的问题，如果根本不同步它们，则该问题将消失。\n    \n\n但是，如果您强烈希望与商店同步路由，则可以尝试使用Connected React Router，这是React Router v4和Redux的第三方绑定。\n","source":"_posts/react_router/指南/Redux整合.md","raw":"##  Redux整合\n\nRedux是React生态系统的重要组成部分。对于想要同时使用React Router和Redux的人，我们希望使其无缝集成。\n\n### 阻止的更新\n通常，React Router和Redux可以很好地协同工作。不过，有时候，应用程序的组件可能会在位置更改时（子路线或活动的导航链接不更新）不更新。\n\n\n在以下情况下会发生这种情况：\n    1.该组件通过connect（）（Comp）连接到redux。\n    2.该组件不是“路由组件”，这意味着它的呈现方式不是这样：`<Route component = {SomeConnectedThing} />`\n\n\n问题在于Redux实现了shouldComponentUpdate，如果没有从路由器接收道具，则没有任何迹象表明发生了任何变化。这很容易解决。查找连接组件的位置，然后将其与Router包装在一起。\n```js\n// before\nexport default connect(mapStateToProps)(Something)\n\n// after\nimport { withRouter } from 'react-router-dom'\nexport default withRouter(connect(mapStateToProps)(Something))\n```\n\n### 深度整合\n\n有些人想：\n    1.与商店同步并从商店访问路由数据。\n    2.能够通过调度动作进行导航。\n    3.在Redux devtools中支持对路径更改进行时间旅行调试。\n\n所有这些都需要更深入的集成。\n\n我们的建议是不要将路线完全保留在Redux商店中。推理:\n\n   1.路由数据已经成为大多数关心它的组件的支持。无论是来自商店还是路由器，您组件的代码都基本相同。\n   \n   2.在大多数情况下，您可以使用链接，导航链接和重定向来执行导航操作。有时，在某些最初由操作启动的异步任务之后，您可能还需要以编程方式导航。例如，您可以在用户提交登录表单时调度操作。然后，您的重击，传奇或其他异步处理程序会对凭据进行身份验证，如果成功，则需要以某种方式导航到新页面。此处的解决方案只是将历史对象（提供给所有路由组件）包括在操作的有效负载中，并且异步处理程序可以在适当的时候使用此对象进行导航。\n   \n   3.路线更改对于时间旅行调试不太重要。唯一明显的情况是调试路由器/商店同步中的问题，如果根本不同步它们，则该问题将消失。\n    \n\n但是，如果您强烈希望与商店同步路由，则可以尝试使用Connected React Router，这是React Router v4和Redux的第三方绑定。\n","slug":"react_router/指南/Redux整合","published":1,"date":"2020-01-09T08:35:56.819Z","updated":"2020-01-09T08:43:04.840Z","title":"react_router/指南/Redux整合","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gn000dmkcod6da2iv5","content":"<h2 id=\"Redux整合\"><a href=\"#Redux整合\" class=\"headerlink\" title=\"Redux整合\"></a>Redux整合</h2><p>Redux是React生态系统的重要组成部分。对于想要同时使用React Router和Redux的人，我们希望使其无缝集成。</p>\n<h3 id=\"阻止的更新\"><a href=\"#阻止的更新\" class=\"headerlink\" title=\"阻止的更新\"></a>阻止的更新</h3><p>通常，React Router和Redux可以很好地协同工作。不过，有时候，应用程序的组件可能会在位置更改时（子路线或活动的导航链接不更新）不更新。</p>\n<p>在以下情况下会发生这种情况：<br>    1.该组件通过connect（）（Comp）连接到redux。<br>    2.该组件不是“路由组件”，这意味着它的呈现方式不是这样：<code>&lt;Route component = {SomeConnectedThing} /&gt;</code></p>\n<p>问题在于Redux实现了shouldComponentUpdate，如果没有从路由器接收道具，则没有任何迹象表明发生了任何变化。这很容易解决。查找连接组件的位置，然后将其与Router包装在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Something)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(connect(mapStateToProps)(Something))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深度整合\"><a href=\"#深度整合\" class=\"headerlink\" title=\"深度整合\"></a>深度整合</h3><p>有些人想：<br>    1.与商店同步并从商店访问路由数据。<br>    2.能够通过调度动作进行导航。<br>    3.在Redux devtools中支持对路径更改进行时间旅行调试。</p>\n<p>所有这些都需要更深入的集成。</p>\n<p>我们的建议是不要将路线完全保留在Redux商店中。推理:</p>\n<p>   1.路由数据已经成为大多数关心它的组件的支持。无论是来自商店还是路由器，您组件的代码都基本相同。</p>\n<p>   2.在大多数情况下，您可以使用链接，导航链接和重定向来执行导航操作。有时，在某些最初由操作启动的异步任务之后，您可能还需要以编程方式导航。例如，您可以在用户提交登录表单时调度操作。然后，您的重击，传奇或其他异步处理程序会对凭据进行身份验证，如果成功，则需要以某种方式导航到新页面。此处的解决方案只是将历史对象（提供给所有路由组件）包括在操作的有效负载中，并且异步处理程序可以在适当的时候使用此对象进行导航。</p>\n<p>   3.路线更改对于时间旅行调试不太重要。唯一明显的情况是调试路由器/商店同步中的问题，如果根本不同步它们，则该问题将消失。</p>\n<p>但是，如果您强烈希望与商店同步路由，则可以尝试使用Connected React Router，这是React Router v4和Redux的第三方绑定。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redux整合\"><a href=\"#Redux整合\" class=\"headerlink\" title=\"Redux整合\"></a>Redux整合</h2><p>Redux是React生态系统的重要组成部分。对于想要同时使用React Router和Redux的人，我们希望使其无缝集成。</p>\n<h3 id=\"阻止的更新\"><a href=\"#阻止的更新\" class=\"headerlink\" title=\"阻止的更新\"></a>阻止的更新</h3><p>通常，React Router和Redux可以很好地协同工作。不过，有时候，应用程序的组件可能会在位置更改时（子路线或活动的导航链接不更新）不更新。</p>\n<p>在以下情况下会发生这种情况：<br>    1.该组件通过connect（）（Comp）连接到redux。<br>    2.该组件不是“路由组件”，这意味着它的呈现方式不是这样：<code>&lt;Route component = {SomeConnectedThing} /&gt;</code></p>\n<p>问题在于Redux实现了shouldComponentUpdate，如果没有从路由器接收道具，则没有任何迹象表明发生了任何变化。这很容易解决。查找连接组件的位置，然后将其与Router包装在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Something)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(connect(mapStateToProps)(Something))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深度整合\"><a href=\"#深度整合\" class=\"headerlink\" title=\"深度整合\"></a>深度整合</h3><p>有些人想：<br>    1.与商店同步并从商店访问路由数据。<br>    2.能够通过调度动作进行导航。<br>    3.在Redux devtools中支持对路径更改进行时间旅行调试。</p>\n<p>所有这些都需要更深入的集成。</p>\n<p>我们的建议是不要将路线完全保留在Redux商店中。推理:</p>\n<p>   1.路由数据已经成为大多数关心它的组件的支持。无论是来自商店还是路由器，您组件的代码都基本相同。</p>\n<p>   2.在大多数情况下，您可以使用链接，导航链接和重定向来执行导航操作。有时，在某些最初由操作启动的异步任务之后，您可能还需要以编程方式导航。例如，您可以在用户提交登录表单时调度操作。然后，您的重击，传奇或其他异步处理程序会对凭据进行身份验证，如果成功，则需要以某种方式导航到新页面。此处的解决方案只是将历史对象（提供给所有路由组件）包括在操作的有效负载中，并且异步处理程序可以在适当的时候使用此对象进行导航。</p>\n<p>   3.路线更改对于时间旅行调试不太重要。唯一明显的情况是调试路由器/商店同步中的问题，如果根本不同步它们，则该问题将消失。</p>\n<p>但是，如果您强烈希望与商店同步路由，则可以尝试使用Connected React Router，这是React Router v4和Redux的第三方绑定。</p>\n"},{"_content":"### 滚动还原\n\n在早期版本的React Router中，我们提供了对滚动恢复的开箱即用的支持，从那以后人们一直在要求它。希望本文档可以帮助您从滚动条和路由中获得所需的信息！\n\n\n浏览器开始以自己的history.pushState处理滚动还原，其处理方式与使用普通浏览器导航时的处理方式相同。它已经可以在Chrome浏览器中使用，而且非常棒。这是滚动恢复规范。\n\n由于浏览器开始处理“默认情况”，并且应用具有不同的滚动需求（例如本网站！），因此我们不提供默认滚动管理功能。本指南应帮助您实现任何滚动需求。\n\n### 滚动到顶部\n\n在大多数情况下，您所需要做的只是“滚动到顶部”，因为您有一个较长的内容页面，该页面在导航到该页面时始终保持向下滚动。使用<ScrollToTop>组件可以轻松处理此问题，该组件将在每次导航时向上滚动窗口：\n\n```js\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n```\n\n如果您尚未运行React 16.8，则可以使用React.Component子类执行相同的操作：\n```js\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname !== prevProps.location.pathname\n    ) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n```\n然后将其呈现在您应用的顶部，但在路由器下方\n\n```js\nfunction App() {\n  return (\n    <Router>\n      <ScrollToTop />\n      <App />\n    </Router>\n  );\n}\n```\n如果您将标签页接口连接到路由器，那么当他们切换标签页时，您可能不想滚动到顶部。相反，关于在您需要的特定位置`<ScrollToTopOnMount>`？\n\n```js\nimport { useEffect } from \"react\";\n\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return null;\n}\n\n// Render this somewhere using:\n// <Route path=\"...\" children={<LongContent />} />\nfunction LongContent() {\n  return (\n    <div>\n      <ScrollToTopOnMount />\n\n      <h1>Here is my long content page</h1>\n      <p>...</p>\n    </div>\n  );\n}\n```\n\n再说一次，如果您还没有运行React 16.8，则可以对React.Component子类做同样的事情：\n\n```js\n\nclass ScrollToTopOnMount extends React.Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return null;\n  }\n}\n\n// Render this somewhere using:\n// <Route path=\"...\" children={<LongContent />} />\nclass LongContent extends React.Component {\n  render() {\n    return (\n      <div>\n        <ScrollToTopOnMount />\n\n        <h1>Here is my long content page</h1>\n        <p>...</p>\n      </div>\n    );\n  }\n}\n```\n\n### 通用解决方案\n\n对于通用解决方案（以及哪些浏览器已开始在本机实现），我们谈论的是两件事：\n\n   -    向上滚动导航，这样就不会启动滚动到底部的\n   \n   -    新屏幕恢复窗口的滚动位置和“后退”和“前进”单击上的溢出元素（但不单击“链接”单击！）\n   \n在某一时刻，我们希望提供一个通用的API。这就是我们要去的方向：\n```js\n<Router>\n  <ScrollRestoration>\n    <div>\n      <h1>App</h1>\n\n      <RestoredScroll id=\"bunny\">\n        <div style={{ height: \"200px\", overflow: \"auto\" }}>\n          I will overflow\n        </div>\n      </RestoredScroll>\n    </div>\n  </ScrollRestoration>\n</Router>\n```\n\n-   首先，ScrollRestoration将在导航时向上滚动窗口。\n-   其次，它将使用location.key将窗口滚动位置和RestoredScroll组件的滚动位置保存到sessionStorage。\n-   然后，在安装ScrollRestoration或RestoredScroll组件时，它们可以从sessionStorage查找其位置。\n\n棘手的部分是为不希望管理窗口滚动的情况定义一个“退出” API。例如，如果您在页面内容内浮动了一些标签导航，则可能不想滚动到顶部（这些标签可能会滚出视线！）。\n\n当我们得知Chrome现在可以为我们管理滚动位置，并意识到不同的应用程序将具有不同的滚动需求时，我们有点迷失了我们需要提供某些东西的信念，尤其是当人们只想滚动到顶部时（您可以直接将其直接添加到您的应用中）。\n\n基于此，我们不再有足够的力气自己完成工作（就像您一样，我们的时间有限！）。但是，我们很乐意为有志于实施通用解决方案的任何人提供帮助。一个可靠的解决方案甚至可以存在于项目中。如果您开始使用它，请与我们联系:)\n","source":"_posts/react_router/指南/Scroll_Restoration.md","raw":"### 滚动还原\n\n在早期版本的React Router中，我们提供了对滚动恢复的开箱即用的支持，从那以后人们一直在要求它。希望本文档可以帮助您从滚动条和路由中获得所需的信息！\n\n\n浏览器开始以自己的history.pushState处理滚动还原，其处理方式与使用普通浏览器导航时的处理方式相同。它已经可以在Chrome浏览器中使用，而且非常棒。这是滚动恢复规范。\n\n由于浏览器开始处理“默认情况”，并且应用具有不同的滚动需求（例如本网站！），因此我们不提供默认滚动管理功能。本指南应帮助您实现任何滚动需求。\n\n### 滚动到顶部\n\n在大多数情况下，您所需要做的只是“滚动到顶部”，因为您有一个较长的内容页面，该页面在导航到该页面时始终保持向下滚动。使用<ScrollToTop>组件可以轻松处理此问题，该组件将在每次导航时向上滚动窗口：\n\n```js\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n```\n\n如果您尚未运行React 16.8，则可以使用React.Component子类执行相同的操作：\n```js\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname !== prevProps.location.pathname\n    ) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n```\n然后将其呈现在您应用的顶部，但在路由器下方\n\n```js\nfunction App() {\n  return (\n    <Router>\n      <ScrollToTop />\n      <App />\n    </Router>\n  );\n}\n```\n如果您将标签页接口连接到路由器，那么当他们切换标签页时，您可能不想滚动到顶部。相反，关于在您需要的特定位置`<ScrollToTopOnMount>`？\n\n```js\nimport { useEffect } from \"react\";\n\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return null;\n}\n\n// Render this somewhere using:\n// <Route path=\"...\" children={<LongContent />} />\nfunction LongContent() {\n  return (\n    <div>\n      <ScrollToTopOnMount />\n\n      <h1>Here is my long content page</h1>\n      <p>...</p>\n    </div>\n  );\n}\n```\n\n再说一次，如果您还没有运行React 16.8，则可以对React.Component子类做同样的事情：\n\n```js\n\nclass ScrollToTopOnMount extends React.Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return null;\n  }\n}\n\n// Render this somewhere using:\n// <Route path=\"...\" children={<LongContent />} />\nclass LongContent extends React.Component {\n  render() {\n    return (\n      <div>\n        <ScrollToTopOnMount />\n\n        <h1>Here is my long content page</h1>\n        <p>...</p>\n      </div>\n    );\n  }\n}\n```\n\n### 通用解决方案\n\n对于通用解决方案（以及哪些浏览器已开始在本机实现），我们谈论的是两件事：\n\n   -    向上滚动导航，这样就不会启动滚动到底部的\n   \n   -    新屏幕恢复窗口的滚动位置和“后退”和“前进”单击上的溢出元素（但不单击“链接”单击！）\n   \n在某一时刻，我们希望提供一个通用的API。这就是我们要去的方向：\n```js\n<Router>\n  <ScrollRestoration>\n    <div>\n      <h1>App</h1>\n\n      <RestoredScroll id=\"bunny\">\n        <div style={{ height: \"200px\", overflow: \"auto\" }}>\n          I will overflow\n        </div>\n      </RestoredScroll>\n    </div>\n  </ScrollRestoration>\n</Router>\n```\n\n-   首先，ScrollRestoration将在导航时向上滚动窗口。\n-   其次，它将使用location.key将窗口滚动位置和RestoredScroll组件的滚动位置保存到sessionStorage。\n-   然后，在安装ScrollRestoration或RestoredScroll组件时，它们可以从sessionStorage查找其位置。\n\n棘手的部分是为不希望管理窗口滚动的情况定义一个“退出” API。例如，如果您在页面内容内浮动了一些标签导航，则可能不想滚动到顶部（这些标签可能会滚出视线！）。\n\n当我们得知Chrome现在可以为我们管理滚动位置，并意识到不同的应用程序将具有不同的滚动需求时，我们有点迷失了我们需要提供某些东西的信念，尤其是当人们只想滚动到顶部时（您可以直接将其直接添加到您的应用中）。\n\n基于此，我们不再有足够的力气自己完成工作（就像您一样，我们的时间有限！）。但是，我们很乐意为有志于实施通用解决方案的任何人提供帮助。一个可靠的解决方案甚至可以存在于项目中。如果您开始使用它，请与我们联系:)\n","slug":"react_router/指南/Scroll_Restoration","published":1,"date":"2020-01-09T06:44:18.843Z","updated":"2020-01-09T07:45:01.256Z","title":"react_router/指南/Scroll_Restoration","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4go000emkco40mlbhgm","content":"<h3 id=\"滚动还原\"><a href=\"#滚动还原\" class=\"headerlink\" title=\"滚动还原\"></a>滚动还原</h3><p>在早期版本的React Router中，我们提供了对滚动恢复的开箱即用的支持，从那以后人们一直在要求它。希望本文档可以帮助您从滚动条和路由中获得所需的信息！</p>\n<p>浏览器开始以自己的history.pushState处理滚动还原，其处理方式与使用普通浏览器导航时的处理方式相同。它已经可以在Chrome浏览器中使用，而且非常棒。这是滚动恢复规范。</p>\n<p>由于浏览器开始处理“默认情况”，并且应用具有不同的滚动需求（例如本网站！），因此我们不提供默认滚动管理功能。本指南应帮助您实现任何滚动需求。</p>\n<h3 id=\"滚动到顶部\"><a href=\"#滚动到顶部\" class=\"headerlink\" title=\"滚动到顶部\"></a>滚动到顶部</h3><p>在大多数情况下，您所需要做的只是“滚动到顶部”，因为您有一个较长的内容页面，该页面在导航到该页面时始终保持向下滚动。使用<ScrollToTop>组件可以轻松处理此问题，该组件将在每次导航时向上滚动窗口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useLocation &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollToTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; pathname &#125; = useLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;, [pathname]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您尚未运行React 16.8，则可以使用React.Component子类执行相同的操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollToTop</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.location.pathname !== prevProps.location.pathname</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(ScrollToTop);</span><br></pre></td></tr></table></figure>\n<p>然后将其呈现在您应用的顶部，但在路由器下方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ScrollToTop /&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果您将标签页接口连接到路由器，那么当他们切换标签页时，您可能不想滚动到顶部。相反，关于在您需要的特定位置<code>&lt;ScrollToTopOnMount&gt;</code>？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollToTopOnMount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Render this somewhere using:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Route path=\"...\" children=&#123;&lt;LongContent /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LongContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;ScrollToTopOnMount /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;h1&gt;Here is my long content page&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;...&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>再说一次，如果您还没有运行React 16.8，则可以对React.Component子类做同样的事情：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollToTopOnMount</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Render this somewhere using:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Route path=\"...\" children=&#123;&lt;LongContent /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongContent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ScrollToTopOnMount /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;h1&gt;Here is my long content page&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;p&gt;...&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用解决方案\"><a href=\"#通用解决方案\" class=\"headerlink\" title=\"通用解决方案\"></a>通用解决方案</h3><p>对于通用解决方案（以及哪些浏览器已开始在本机实现），我们谈论的是两件事：</p>\n<ul>\n<li><p>向上滚动导航，这样就不会启动滚动到底部的</p>\n</li>\n<li><p>新屏幕恢复窗口的滚动位置和“后退”和“前进”单击上的溢出元素（但不单击“链接”单击！）</p>\n</li>\n</ul>\n<p>在某一时刻，我们希望提供一个通用的API。这就是我们要去的方向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">  &lt;ScrollRestoration&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;App&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;RestoredScroll id=\"bunny\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div style=&#123;&#123; height: \"200px\", overflow: \"auto\" &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          I will overflow</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/RestoredScroll&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/ScrollRestoration&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先，ScrollRestoration将在导航时向上滚动窗口。</li>\n<li>其次，它将使用location.key将窗口滚动位置和RestoredScroll组件的滚动位置保存到sessionStorage。</li>\n<li>然后，在安装ScrollRestoration或RestoredScroll组件时，它们可以从sessionStorage查找其位置。</li>\n</ul>\n<p>棘手的部分是为不希望管理窗口滚动的情况定义一个“退出” API。例如，如果您在页面内容内浮动了一些标签导航，则可能不想滚动到顶部（这些标签可能会滚出视线！）。</p>\n<p>当我们得知Chrome现在可以为我们管理滚动位置，并意识到不同的应用程序将具有不同的滚动需求时，我们有点迷失了我们需要提供某些东西的信念，尤其是当人们只想滚动到顶部时（您可以直接将其直接添加到您的应用中）。</p>\n<p>基于此，我们不再有足够的力气自己完成工作（就像您一样，我们的时间有限！）。但是，我们很乐意为有志于实施通用解决方案的任何人提供帮助。一个可靠的解决方案甚至可以存在于项目中。如果您开始使用它，请与我们联系:)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"滚动还原\"><a href=\"#滚动还原\" class=\"headerlink\" title=\"滚动还原\"></a>滚动还原</h3><p>在早期版本的React Router中，我们提供了对滚动恢复的开箱即用的支持，从那以后人们一直在要求它。希望本文档可以帮助您从滚动条和路由中获得所需的信息！</p>\n<p>浏览器开始以自己的history.pushState处理滚动还原，其处理方式与使用普通浏览器导航时的处理方式相同。它已经可以在Chrome浏览器中使用，而且非常棒。这是滚动恢复规范。</p>\n<p>由于浏览器开始处理“默认情况”，并且应用具有不同的滚动需求（例如本网站！），因此我们不提供默认滚动管理功能。本指南应帮助您实现任何滚动需求。</p>\n<h3 id=\"滚动到顶部\"><a href=\"#滚动到顶部\" class=\"headerlink\" title=\"滚动到顶部\"></a>滚动到顶部</h3><p>在大多数情况下，您所需要做的只是“滚动到顶部”，因为您有一个较长的内容页面，该页面在导航到该页面时始终保持向下滚动。使用<ScrollToTop>组件可以轻松处理此问题，该组件将在每次导航时向上滚动窗口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useLocation &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollToTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; pathname &#125; = useLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;, [pathname]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您尚未运行React 16.8，则可以使用React.Component子类执行相同的操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollToTop</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.location.pathname !== prevProps.location.pathname</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(ScrollToTop);</span><br></pre></td></tr></table></figure>\n<p>然后将其呈现在您应用的顶部，但在路由器下方</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ScrollToTop /&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果您将标签页接口连接到路由器，那么当他们切换标签页时，您可能不想滚动到顶部。相反，关于在您需要的特定位置<code>&lt;ScrollToTopOnMount&gt;</code>？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollToTopOnMount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Render this somewhere using:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Route path=\"...\" children=&#123;&lt;LongContent /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LongContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;ScrollToTopOnMount /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;h1&gt;Here is my long content page&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;...&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>再说一次，如果您还没有运行React 16.8，则可以对React.Component子类做同样的事情：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollToTopOnMount</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Render this somewhere using:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;Route path=\"...\" children=&#123;&lt;LongContent /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongContent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ScrollToTopOnMount /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;h1&gt;Here is my long content page&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;p&gt;...&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用解决方案\"><a href=\"#通用解决方案\" class=\"headerlink\" title=\"通用解决方案\"></a>通用解决方案</h3><p>对于通用解决方案（以及哪些浏览器已开始在本机实现），我们谈论的是两件事：</p>\n<ul>\n<li><p>向上滚动导航，这样就不会启动滚动到底部的</p>\n</li>\n<li><p>新屏幕恢复窗口的滚动位置和“后退”和“前进”单击上的溢出元素（但不单击“链接”单击！）</p>\n</li>\n</ul>\n<p>在某一时刻，我们希望提供一个通用的API。这就是我们要去的方向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">  &lt;ScrollRestoration&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;App&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;RestoredScroll id=\"bunny\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div style=&#123;&#123; height: \"200px\", overflow: \"auto\" &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          I will overflow</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/RestoredScroll&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/ScrollRestoration&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先，ScrollRestoration将在导航时向上滚动窗口。</li>\n<li>其次，它将使用location.key将窗口滚动位置和RestoredScroll组件的滚动位置保存到sessionStorage。</li>\n<li>然后，在安装ScrollRestoration或RestoredScroll组件时，它们可以从sessionStorage查找其位置。</li>\n</ul>\n<p>棘手的部分是为不希望管理窗口滚动的情况定义一个“退出” API。例如，如果您在页面内容内浮动了一些标签导航，则可能不想滚动到顶部（这些标签可能会滚出视线！）。</p>\n<p>当我们得知Chrome现在可以为我们管理滚动位置，并意识到不同的应用程序将具有不同的滚动需求时，我们有点迷失了我们需要提供某些东西的信念，尤其是当人们只想滚动到顶部时（您可以直接将其直接添加到您的应用中）。</p>\n<p>基于此，我们不再有足够的力气自己完成工作（就像您一样，我们的时间有限！）。但是，我们很乐意为有志于实施通用解决方案的任何人提供帮助。一个可靠的解决方案甚至可以存在于项目中。如果您开始使用它，请与我们联系:)</p>\n"},{"_content":"##  服务器渲染\n    \n由于服务器都是无状态的，因此在服务器上的渲染有点不同。基本思想是将应用程序包装在无状态的`<StaticRouter>`中，而不是在`<BrowserRouter>`中。我们从服务器传入请求的url，以便路由可以匹配，然后我们将讨论上下文支持。\n\n```js\n    // 客户端\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n    \n    // 服务器端 (not the complete story)\n    <StaticRouter\n      location={req.url}\n      context={context}\n    >\n      <App/>\n    </StaticRouter>\n```\n当您在客户端上呈现`<Redirect>`时，浏览器历史记录会更改状态，并且我们会获得新屏幕。在静态服务器环境中，我们无法更改应用程序状态。相反，我们使用上下文道具来找出渲染的结果。如果找到context.url，则表明该应用已重定向。这使我们能够从服务器发送适当的重定向。\n```js\nconst context = {};\nconst markup = ReactDOMServer.renderToString(\n  <StaticRouter location={req.url} context={context}>\n    <App />\n  </StaticRouter>\n);\n\nif (context.url) {\n  // 某处  `<Redirect>` 是被重定向的\n  redirect(301, context.url);\n} else {\n  // 我们很好，发送响应回复\n}\n```\n\n### 添加特定于应用程序的上下文信息\n\n路由器仅添加context.url。但是您可能希望将某些重定向重定向为301，将其他重定向重定向为302。或者，如果呈现了UI的某些特定分支，则可能要发送404响应，如果未授权，则要发送401。上下文道具是您的，因此您可以对其进行突变。这是区分301和302重定向的一种方法：\n```js\nfunction RedirectWithStatus({ from, to, status }) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // 客户端上没有“ staticContext”，因此\n        // 我们需要在这里提防\n        if (staticContext) staticContext.status = status;\n        return <Redirect from={from} to={to} />;\n      }}\n    />\n  );\n}\n\n// 应用中的某处\nfunction App() {\n  return (\n    <Switch>\n      {/* 其他route */}\n      <RedirectWithStatus status={301} from=\"/users\" to=\"/profiles\" />\n      <RedirectWithStatus\n        status={302}\n        from=\"/courses\"\n        to=\"/dashboard\"\n      />\n    </Switch>\n  );\n}\n\n// 在服务器上\nconst context = {};\n\nconst markup = ReactDOMServer.renderToString(\n  <StaticRouter context={context}>\n    <App />\n  </StaticRouter>\n);\n\nif (context.url) {\n  // 可以使用 `context.status` 因\n  // 我们在 RedirectWithStatus 添加了属性\n  redirect(context.status, context.url);\n}\n```\n\n### 404, 401, or any other status\n\n我们可以做与上述相同的事情。创建一个添加一些上下文的组件，并将其呈现在应用程序中的任何位置以获取不同的状态代码。\n```js\nfunction Status({ code, children }) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        if (staticContext) staticContext.status = code;\n        return children;\n      }}\n    />\n  );\n}\n```\n\n现在，您可以在要将代码添加到staticContext的应用程序中的任何位置呈现状态。\n\n```js\nfunction NotFound() {\n  return (\n    <Status code={404}>\n      <div>\n        <h1>Sorry, can’t find that.</h1>\n      </div>\n    </Status>\n  );\n}\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n```\n\n### Putting it all together\n\n这不是一个真正的应用程序，但是它显示了将所有内容组合在一起所需的所有常规内容。\n\n```js\nimport http from \"http\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router-dom\";\n\nimport App from \"./App.js\";\n\nhttp\n  .createServer((req, res) => {\n    const context = {};\n\n    const html = ReactDOMServer.renderToString(\n      <StaticRouter location={req.url} context={context}>\n        <App />\n      </StaticRouter>\n    );\n\n    if (context.url) {\n      res.writeHead(301, {\n        Location: context.url\n      });\n      res.end();\n    } else {\n      res.write(`\n      <!doctype html>\n      <div id=\"app\">${html}</div>\n    `);\n      res.end();\n    }\n  })\n  .listen(3000);\n```\n客户端\n```js\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"app\")\n);\n```\n### 资料载入\n有许多种不同的方法，而且还没有明确的最佳实践，因此我们力求与任何一种方法融为一体，而不是规定或倾向于任何一种方法。我们相信路由器可以放入您的应用程序约束之内。\n\n主要限制是您要在渲染之前加载数据。React Router导出其内部使用的matchPath静态函数以将位置匹配到路由。您可以在服务器上使用此功能来帮助确定呈现之前的数据依赖关系。\n\n这种方法的要旨是依赖于静态路由配置，该配置既可以呈现您的路由，也可以在呈现之前进行匹配以确定数据依赖性。\n\n```js\nconst routes = [\n  {\n    path: \"/\",\n    component: Root,\n    loadData: () => getSomeData()\n  }\n  // etc.\n];\n```\n然后使用此配置在应用中呈现您的路线：\n```js\nimport { routes } from \"./routes.js\";\n\nfunction App() {\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route {...route} />\n      ))}\n    </Switch>\n  );\n}\n```\n然后，在服务器上您将看到以下内容：\n```js\nimport { matchPath } from \"react-router-dom\";\n\n// inside a request\nconst promises = [];\n// use `some` to imitate `<Switch>` behavior of selecting only\n// the first to match\nroutes.some(route => {\n  // use `matchPath` here\n  const match = matchPath(req.path, route);\n  if (match) promises.push(route.loadData(match));\n  return match;\n});\n\nPromise.all(promises).then(data => {\n  // do something w/ the data so the client\n  // can access it then render the app\n});\n```\n最后，客户将需要提取数据。同样，我们不为您的应用程序规定数据加载模式，但这是您需要实现的接触点。\n\n您可能对我们的React Router Config软件包感兴趣，以通过静态路由配置协助数据加载和服务器渲染。\n\n\n\n\n","source":"_posts/react_router/指南/Server_Rendering.md","raw":"##  服务器渲染\n    \n由于服务器都是无状态的，因此在服务器上的渲染有点不同。基本思想是将应用程序包装在无状态的`<StaticRouter>`中，而不是在`<BrowserRouter>`中。我们从服务器传入请求的url，以便路由可以匹配，然后我们将讨论上下文支持。\n\n```js\n    // 客户端\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n    \n    // 服务器端 (not the complete story)\n    <StaticRouter\n      location={req.url}\n      context={context}\n    >\n      <App/>\n    </StaticRouter>\n```\n当您在客户端上呈现`<Redirect>`时，浏览器历史记录会更改状态，并且我们会获得新屏幕。在静态服务器环境中，我们无法更改应用程序状态。相反，我们使用上下文道具来找出渲染的结果。如果找到context.url，则表明该应用已重定向。这使我们能够从服务器发送适当的重定向。\n```js\nconst context = {};\nconst markup = ReactDOMServer.renderToString(\n  <StaticRouter location={req.url} context={context}>\n    <App />\n  </StaticRouter>\n);\n\nif (context.url) {\n  // 某处  `<Redirect>` 是被重定向的\n  redirect(301, context.url);\n} else {\n  // 我们很好，发送响应回复\n}\n```\n\n### 添加特定于应用程序的上下文信息\n\n路由器仅添加context.url。但是您可能希望将某些重定向重定向为301，将其他重定向重定向为302。或者，如果呈现了UI的某些特定分支，则可能要发送404响应，如果未授权，则要发送401。上下文道具是您的，因此您可以对其进行突变。这是区分301和302重定向的一种方法：\n```js\nfunction RedirectWithStatus({ from, to, status }) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // 客户端上没有“ staticContext”，因此\n        // 我们需要在这里提防\n        if (staticContext) staticContext.status = status;\n        return <Redirect from={from} to={to} />;\n      }}\n    />\n  );\n}\n\n// 应用中的某处\nfunction App() {\n  return (\n    <Switch>\n      {/* 其他route */}\n      <RedirectWithStatus status={301} from=\"/users\" to=\"/profiles\" />\n      <RedirectWithStatus\n        status={302}\n        from=\"/courses\"\n        to=\"/dashboard\"\n      />\n    </Switch>\n  );\n}\n\n// 在服务器上\nconst context = {};\n\nconst markup = ReactDOMServer.renderToString(\n  <StaticRouter context={context}>\n    <App />\n  </StaticRouter>\n);\n\nif (context.url) {\n  // 可以使用 `context.status` 因\n  // 我们在 RedirectWithStatus 添加了属性\n  redirect(context.status, context.url);\n}\n```\n\n### 404, 401, or any other status\n\n我们可以做与上述相同的事情。创建一个添加一些上下文的组件，并将其呈现在应用程序中的任何位置以获取不同的状态代码。\n```js\nfunction Status({ code, children }) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        if (staticContext) staticContext.status = code;\n        return children;\n      }}\n    />\n  );\n}\n```\n\n现在，您可以在要将代码添加到staticContext的应用程序中的任何位置呈现状态。\n\n```js\nfunction NotFound() {\n  return (\n    <Status code={404}>\n      <div>\n        <h1>Sorry, can’t find that.</h1>\n      </div>\n    </Status>\n  );\n}\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n```\n\n### Putting it all together\n\n这不是一个真正的应用程序，但是它显示了将所有内容组合在一起所需的所有常规内容。\n\n```js\nimport http from \"http\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router-dom\";\n\nimport App from \"./App.js\";\n\nhttp\n  .createServer((req, res) => {\n    const context = {};\n\n    const html = ReactDOMServer.renderToString(\n      <StaticRouter location={req.url} context={context}>\n        <App />\n      </StaticRouter>\n    );\n\n    if (context.url) {\n      res.writeHead(301, {\n        Location: context.url\n      });\n      res.end();\n    } else {\n      res.write(`\n      <!doctype html>\n      <div id=\"app\">${html}</div>\n    `);\n      res.end();\n    }\n  })\n  .listen(3000);\n```\n客户端\n```js\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"app\")\n);\n```\n### 资料载入\n有许多种不同的方法，而且还没有明确的最佳实践，因此我们力求与任何一种方法融为一体，而不是规定或倾向于任何一种方法。我们相信路由器可以放入您的应用程序约束之内。\n\n主要限制是您要在渲染之前加载数据。React Router导出其内部使用的matchPath静态函数以将位置匹配到路由。您可以在服务器上使用此功能来帮助确定呈现之前的数据依赖关系。\n\n这种方法的要旨是依赖于静态路由配置，该配置既可以呈现您的路由，也可以在呈现之前进行匹配以确定数据依赖性。\n\n```js\nconst routes = [\n  {\n    path: \"/\",\n    component: Root,\n    loadData: () => getSomeData()\n  }\n  // etc.\n];\n```\n然后使用此配置在应用中呈现您的路线：\n```js\nimport { routes } from \"./routes.js\";\n\nfunction App() {\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route {...route} />\n      ))}\n    </Switch>\n  );\n}\n```\n然后，在服务器上您将看到以下内容：\n```js\nimport { matchPath } from \"react-router-dom\";\n\n// inside a request\nconst promises = [];\n// use `some` to imitate `<Switch>` behavior of selecting only\n// the first to match\nroutes.some(route => {\n  // use `matchPath` here\n  const match = matchPath(req.path, route);\n  if (match) promises.push(route.loadData(match));\n  return match;\n});\n\nPromise.all(promises).then(data => {\n  // do something w/ the data so the client\n  // can access it then render the app\n});\n```\n最后，客户将需要提取数据。同样，我们不为您的应用程序规定数据加载模式，但这是您需要实现的接触点。\n\n您可能对我们的React Router Config软件包感兴趣，以通过静态路由配置协助数据加载和服务器渲染。\n\n\n\n\n","slug":"react_router/指南/Server_Rendering","published":1,"date":"2020-01-09T05:36:56.725Z","updated":"2020-01-09T06:28:54.359Z","title":"react_router/指南/Server_Rendering","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4go000fmkcog3ksfq4f","content":"<h2 id=\"服务器渲染\"><a href=\"#服务器渲染\" class=\"headerlink\" title=\"服务器渲染\"></a>服务器渲染</h2><p>由于服务器都是无状态的，因此在服务器上的渲染有点不同。基本思想是将应用程序包装在无状态的<code>&lt;StaticRouter&gt;</code>中，而不是在<code>&lt;BrowserRouter&gt;</code>中。我们从服务器传入请求的url，以便路由可以匹配，然后我们将讨论上下文支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户端</span></span><br><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 服务器端 (not the complete story)</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;StaticRouter</span></span><br><span class=\"line\"><span class=\"regexp\">  location=&#123;req.url&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  context=&#123;context&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App/</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当您在客户端上呈现<code>&lt;Redirect&gt;</code>时，浏览器历史记录会更改状态，并且我们会获得新屏幕。在静态服务器环境中，我们无法更改应用程序状态。相反，我们使用上下文道具来找出渲染的结果。如果找到context.url，则表明该应用已重定向。这使我们能够从服务器发送适当的重定向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> markup = ReactDOMServer.renderToString(</span><br><span class=\"line\">  &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 某处  `&lt;Redirect&gt;` 是被重定向的</span></span><br><span class=\"line\"><span class=\"regexp\">  redirect(301, context.url);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 我们很好，发送响应回复</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加特定于应用程序的上下文信息\"><a href=\"#添加特定于应用程序的上下文信息\" class=\"headerlink\" title=\"添加特定于应用程序的上下文信息\"></a>添加特定于应用程序的上下文信息</h3><p>路由器仅添加context.url。但是您可能希望将某些重定向重定向为301，将其他重定向重定向为302。或者，如果呈现了UI的某些特定分支，则可能要发送404响应，如果未授权，则要发送401。上下文道具是您的，因此您可以对其进行突变。这是区分301和302重定向的一种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RedirectWithStatus</span>(<span class=\"params\">&#123; from, to, status &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 客户端上没有“ staticContext”，因此</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们需要在这里提防</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) staticContext.status = status;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">from</span>=<span class=\"string\">&#123;from&#125;</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;to&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">// 应用中的某处</span></span><br><span class=\"line\"><span class=\"xml\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  return (</span></span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;/* 其他route */&#125;</span><br><span class=\"line\">      &lt;RedirectWithStatus status=&#123;301&#125; from=\"/users\" to=\"/profiles\" /&gt;</span><br><span class=\"line\">      &lt;RedirectWithStatus</span><br><span class=\"line\">        status=&#123;302&#125;</span><br><span class=\"line\">        from=\"/courses\"</span><br><span class=\"line\">        to=\"/dashboard\"</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在服务器上</span><br><span class=\"line\">const context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const markup = ReactDOMServer.renderToString(</span><br><span class=\"line\">  &lt;StaticRouter context=&#123;context&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;/StaticRouter&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">if (context.url) &#123;</span><br><span class=\"line\">  // 可以使用 `context.status` 因</span><br><span class=\"line\">  // 我们在 RedirectWithStatus 添加了属性</span><br><span class=\"line\">  redirect(context.status, context.url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"404-401-or-any-other-status\"><a href=\"#404-401-or-any-other-status\" class=\"headerlink\" title=\"404, 401, or any other status\"></a>404, 401, or any other status</h3><p>我们可以做与上述相同的事情。创建一个添加一些上下文的组件，并将其呈现在应用程序中的任何位置以获取不同的状态代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Status</span>(<span class=\"params\">&#123; code, children &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) staticContext.status = code;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> children;</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，您可以在要将代码添加到staticContext的应用程序中的任何位置呈现状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NotFound</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Status code=&#123;<span class=\"number\">404</span>&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Sorry, can’t find that.&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Status&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route path=\"/</span>about<span class=\"string\">\" component=&#123;About&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Route path=\"</span>/dashboard<span class=\"string\">\" component=&#123;Dashboard&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Route component=&#123;NotFound&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Putting-it-all-together\"><a href=\"#Putting-it-all-together\" class=\"headerlink\" title=\"Putting it all together\"></a>Putting it all together</h3><p>这不是一个真正的应用程序，但是它显示了将所有内容组合在一起所需的所有常规内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">\"http\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOMServer <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/server\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">\"./App.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = ReactDOMServer.renderToString(</span><br><span class=\"line\">      &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.writeHead(301, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        Location: context.url</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.write(`</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div id=\"app\"&gt;$&#123;html&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    <span class=\"string\">`);</span></span><br><span class=\"line\"><span class=\"string\">      res.end();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\">  .listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">\"./App.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById(\"app\")</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资料载入\"><a href=\"#资料载入\" class=\"headerlink\" title=\"资料载入\"></a>资料载入</h3><p>有许多种不同的方法，而且还没有明确的最佳实践，因此我们力求与任何一种方法融为一体，而不是规定或倾向于任何一种方法。我们相信路由器可以放入您的应用程序约束之内。</p>\n<p>主要限制是您要在渲染之前加载数据。React Router导出其内部使用的matchPath静态函数以将位置匹配到路由。您可以在服务器上使用此功能来帮助确定呈现之前的数据依赖关系。</p>\n<p>这种方法的要旨是依赖于静态路由配置，该配置既可以呈现您的路由，也可以在呈现之前进行匹配以确定数据依赖性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    component: Root,</span><br><span class=\"line\">    loadData: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> getSomeData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// etc.</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>然后使用此配置在应用中呈现您的路线：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./routes.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;routes.map(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;Route &#123;...route&#125; /&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后，在服务器上您将看到以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; matchPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inside a request</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promises = [];</span><br><span class=\"line\"><span class=\"comment\">// use `some` to imitate `&lt;Switch&gt;` behavior of selecting only</span></span><br><span class=\"line\"><span class=\"comment\">// the first to match</span></span><br><span class=\"line\">routes.some(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// use `matchPath` here</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> match = matchPath(req.path, route);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (match) promises.push(route.loadData(match));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> match;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something w/ the data so the client</span></span><br><span class=\"line\">  <span class=\"comment\">// can access it then render the app</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，客户将需要提取数据。同样，我们不为您的应用程序规定数据加载模式，但这是您需要实现的接触点。</p>\n<p>您可能对我们的React Router Config软件包感兴趣，以通过静态路由配置协助数据加载和服务器渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务器渲染\"><a href=\"#服务器渲染\" class=\"headerlink\" title=\"服务器渲染\"></a>服务器渲染</h2><p>由于服务器都是无状态的，因此在服务器上的渲染有点不同。基本思想是将应用程序包装在无状态的<code>&lt;StaticRouter&gt;</code>中，而不是在<code>&lt;BrowserRouter&gt;</code>中。我们从服务器传入请求的url，以便路由可以匹配，然后我们将讨论上下文支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户端</span></span><br><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 服务器端 (not the complete story)</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;StaticRouter</span></span><br><span class=\"line\"><span class=\"regexp\">  location=&#123;req.url&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  context=&#123;context&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App/</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当您在客户端上呈现<code>&lt;Redirect&gt;</code>时，浏览器历史记录会更改状态，并且我们会获得新屏幕。在静态服务器环境中，我们无法更改应用程序状态。相反，我们使用上下文道具来找出渲染的结果。如果找到context.url，则表明该应用已重定向。这使我们能够从服务器发送适当的重定向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> markup = ReactDOMServer.renderToString(</span><br><span class=\"line\">  &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 某处  `&lt;Redirect&gt;` 是被重定向的</span></span><br><span class=\"line\"><span class=\"regexp\">  redirect(301, context.url);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 我们很好，发送响应回复</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加特定于应用程序的上下文信息\"><a href=\"#添加特定于应用程序的上下文信息\" class=\"headerlink\" title=\"添加特定于应用程序的上下文信息\"></a>添加特定于应用程序的上下文信息</h3><p>路由器仅添加context.url。但是您可能希望将某些重定向重定向为301，将其他重定向重定向为302。或者，如果呈现了UI的某些特定分支，则可能要发送404响应，如果未授权，则要发送401。上下文道具是您的，因此您可以对其进行突变。这是区分301和302重定向的一种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RedirectWithStatus</span>(<span class=\"params\">&#123; from, to, status &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 客户端上没有“ staticContext”，因此</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们需要在这里提防</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) staticContext.status = status;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">from</span>=<span class=\"string\">&#123;from&#125;</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;to&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">// 应用中的某处</span></span><br><span class=\"line\"><span class=\"xml\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  return (</span></span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;/* 其他route */&#125;</span><br><span class=\"line\">      &lt;RedirectWithStatus status=&#123;301&#125; from=\"/users\" to=\"/profiles\" /&gt;</span><br><span class=\"line\">      &lt;RedirectWithStatus</span><br><span class=\"line\">        status=&#123;302&#125;</span><br><span class=\"line\">        from=\"/courses\"</span><br><span class=\"line\">        to=\"/dashboard\"</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在服务器上</span><br><span class=\"line\">const context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const markup = ReactDOMServer.renderToString(</span><br><span class=\"line\">  &lt;StaticRouter context=&#123;context&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;/StaticRouter&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">if (context.url) &#123;</span><br><span class=\"line\">  // 可以使用 `context.status` 因</span><br><span class=\"line\">  // 我们在 RedirectWithStatus 添加了属性</span><br><span class=\"line\">  redirect(context.status, context.url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"404-401-or-any-other-status\"><a href=\"#404-401-or-any-other-status\" class=\"headerlink\" title=\"404, 401, or any other status\"></a>404, 401, or any other status</h3><p>我们可以做与上述相同的事情。创建一个添加一些上下文的组件，并将其呈现在应用程序中的任何位置以获取不同的状态代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Status</span>(<span class=\"params\">&#123; code, children &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) staticContext.status = code;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> children;</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，您可以在要将代码添加到staticContext的应用程序中的任何位置呈现状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NotFound</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Status code=&#123;<span class=\"number\">404</span>&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Sorry, can’t find that.&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Status&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route path=\"/</span>about<span class=\"string\">\" component=&#123;About&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Route path=\"</span>/dashboard<span class=\"string\">\" component=&#123;Dashboard&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Route component=&#123;NotFound&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Putting-it-all-together\"><a href=\"#Putting-it-all-together\" class=\"headerlink\" title=\"Putting it all together\"></a>Putting it all together</h3><p>这不是一个真正的应用程序，但是它显示了将所有内容组合在一起所需的所有常规内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">\"http\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOMServer <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/server\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">\"./App.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = ReactDOMServer.renderToString(</span><br><span class=\"line\">      &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.writeHead(301, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        Location: context.url</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.write(`</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div id=\"app\"&gt;$&#123;html&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    <span class=\"string\">`);</span></span><br><span class=\"line\"><span class=\"string\">      res.end();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\">  .listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">\"./App.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/BrowserRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById(\"app\")</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资料载入\"><a href=\"#资料载入\" class=\"headerlink\" title=\"资料载入\"></a>资料载入</h3><p>有许多种不同的方法，而且还没有明确的最佳实践，因此我们力求与任何一种方法融为一体，而不是规定或倾向于任何一种方法。我们相信路由器可以放入您的应用程序约束之内。</p>\n<p>主要限制是您要在渲染之前加载数据。React Router导出其内部使用的matchPath静态函数以将位置匹配到路由。您可以在服务器上使用此功能来帮助确定呈现之前的数据依赖关系。</p>\n<p>这种方法的要旨是依赖于静态路由配置，该配置既可以呈现您的路由，也可以在呈现之前进行匹配以确定数据依赖性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    component: Root,</span><br><span class=\"line\">    loadData: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> getSomeData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// etc.</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>然后使用此配置在应用中呈现您的路线：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./routes.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &#123;routes.map(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;Route &#123;...route&#125; /&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后，在服务器上您将看到以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; matchPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inside a request</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promises = [];</span><br><span class=\"line\"><span class=\"comment\">// use `some` to imitate `&lt;Switch&gt;` behavior of selecting only</span></span><br><span class=\"line\"><span class=\"comment\">// the first to match</span></span><br><span class=\"line\">routes.some(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// use `matchPath` here</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> match = matchPath(req.path, route);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (match) promises.push(route.loadData(match));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> match;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something w/ the data so the client</span></span><br><span class=\"line\">  <span class=\"comment\">// can access it then render the app</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，客户将需要提取数据。同样，我们不为您的应用程序规定数据加载模式，但这是您需要实现的接触点。</p>\n<p>您可能对我们的React Router Config软件包感兴趣，以通过静态路由配置协助数据加载和服务器渲染。</p>\n"},{"_content":"## 快速开始\n\n\t\tnpm install -g create-react-app \n\t\t\n全局安装create-react-app\tcreate-react-app可以很方便，快速的帮你搭建react app。\n\t\t\n\t\tnpx create-react-app my-app && cd my-app\t //\t2.\t创建一个react应用项目\n\t\t或\tnpm init react-app my-app \t或\tyarn create react-app my-app\n 2. 您可以使用npm或yarn从公共npm注册表中安装React Router。\n由于我们正在构建网络应用程序，因此在本指南中将使用react-router-dom。\n\t\t\t\n\t\tnpm install react-router-dom\t\t\n\n 4. 第一个示例：\t基本路由。\n \t\t在此示例中，路由器处理了3个“页面”：主页，“关于”页面和“用户”页面。当您单击不同的<Link>时，路由器将呈现匹配的<Route>。\n \t\t注意：在幕后，<Link>会使用真实的href渲染<a>\n \t\t\n```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* <Switch>通过子<Route> 查找\n\t\t呈现与当前URL匹配的第一个。如果有两个相同的URL只渲染一次这个路径不会渲染第二次*/}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n```\n\n第二个示例：\n\t这个例子现实的是嵌套路由的方式。路由\t'/topic'\t加载Topics组件，该组件将在path:\tid值上有条件地呈现任何其他\tRoute\n```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\nfunction Topics() {\n  let match = useRouteMatch();\n//相对于父路由建立<Route>,而url允许建立相对的links.\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n      {/*Topics页面有自己的<Switch>里面又包含很多的<Route>,Topics里的<Switch>里面的路径是建立在'/topics'路径上的文件。第二个<Route>作为所有主题的页面或者没有主题时选择的页面   */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}\n\n```\n","source":"_posts/react_router/指南/Start.md","raw":"## 快速开始\n\n\t\tnpm install -g create-react-app \n\t\t\n全局安装create-react-app\tcreate-react-app可以很方便，快速的帮你搭建react app。\n\t\t\n\t\tnpx create-react-app my-app && cd my-app\t //\t2.\t创建一个react应用项目\n\t\t或\tnpm init react-app my-app \t或\tyarn create react-app my-app\n 2. 您可以使用npm或yarn从公共npm注册表中安装React Router。\n由于我们正在构建网络应用程序，因此在本指南中将使用react-router-dom。\n\t\t\t\n\t\tnpm install react-router-dom\t\t\n\n 4. 第一个示例：\t基本路由。\n \t\t在此示例中，路由器处理了3个“页面”：主页，“关于”页面和“用户”页面。当您单击不同的<Link>时，路由器将呈现匹配的<Route>。\n \t\t注意：在幕后，<Link>会使用真实的href渲染<a>\n \t\t\n```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* <Switch>通过子<Route> 查找\n\t\t呈现与当前URL匹配的第一个。如果有两个相同的URL只渲染一次这个路径不会渲染第二次*/}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n```\n\n第二个示例：\n\t这个例子现实的是嵌套路由的方式。路由\t'/topic'\t加载Topics组件，该组件将在path:\tid值上有条件地呈现任何其他\tRoute\n```js\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\nfunction Topics() {\n  let match = useRouteMatch();\n//相对于父路由建立<Route>,而url允许建立相对的links.\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n      {/*Topics页面有自己的<Switch>里面又包含很多的<Route>,Topics里的<Switch>里面的路径是建立在'/topics'路径上的文件。第二个<Route>作为所有主题的页面或者没有主题时选择的页面   */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}\n\n```\n","slug":"react_router/指南/Start","published":1,"date":"2020-01-09T04:35:40.087Z","updated":"2020-01-09T04:37:45.995Z","title":"react_router/指南/Start","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gp000gmkcoaibygr5i","content":"<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><pre><code>npm install -g create-react-app </code></pre><p>全局安装create-react-app    create-react-app可以很方便，快速的帮你搭建react app。</p>\n<pre><code>npx create-react-app my-app &amp;&amp; cd my-app     //    2.    创建一个react应用项目\n或    npm init react-app my-app     或    yarn create react-app my-app</code></pre><ol start=\"2\">\n<li><p>您可以使用npm或yarn从公共npm注册表中安装React Router。<br>由于我们正在构建网络应用程序，因此在本指南中将使用react-router-dom。</p>\n<pre><code>npm install react-router-dom        </code></pre></li>\n<li><p>第一个示例：    基本路由。</p>\n<pre><code>在此示例中，路由器处理了3个“页面”：主页，“关于”页面和“用户”页面。当您单击不同的&lt;Link&gt;时，路由器将呈现匹配的&lt;Route&gt;。\n注意：在幕后，&lt;Link&gt;会使用真实的href渲染&lt;a&gt;</code></pre></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/users\"</span>&gt;Users&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;<span class=\"comment\">/* &lt;Switch&gt;通过子&lt;Route&gt; 查找</span></span><br><span class=\"line\"><span class=\"comment\">\t\t呈现与当前URL匹配的第一个。如果有两个相同的URL只渲染一次这个路径不会渲染第二次*/</span>&#125;</span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">            &lt;About /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/u</span>sers<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Users /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Home&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;About&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Users() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Users&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个示例：<br>    这个例子现实的是嵌套路由的方式。路由    ‘/topic’    加载Topics组件，该组件将在path:    id值上有条件地呈现任何其他    Route</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useRouteMatch,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Home&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;About&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Topics() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let match = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\">//相对于父路由建立&lt;Route&gt;,而url允许建立相对的links.</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;match.url&#125;/components`&#125;&gt;Components&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;match.url&#125;/props-v-state`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Props v. State</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;/*Topics页面有自己的&lt;Switch&gt;里面又包含很多的&lt;Route&gt;,Topics里的&lt;Switch&gt;里面的路径是建立在'/topics'路径上的文件。第二个&lt;Route&gt;作为所有主题的页面或者没有主题时选择的页面   */&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;match.path&#125;/:topicId`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topic /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;match.path&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;h3&gt;Please select a topic.&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topic() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; topicId &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Requested topic ID: &#123;topicId&#125;&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><pre><code>npm install -g create-react-app </code></pre><p>全局安装create-react-app    create-react-app可以很方便，快速的帮你搭建react app。</p>\n<pre><code>npx create-react-app my-app &amp;&amp; cd my-app     //    2.    创建一个react应用项目\n或    npm init react-app my-app     或    yarn create react-app my-app</code></pre><ol start=\"2\">\n<li><p>您可以使用npm或yarn从公共npm注册表中安装React Router。<br>由于我们正在构建网络应用程序，因此在本指南中将使用react-router-dom。</p>\n<pre><code>npm install react-router-dom        </code></pre></li>\n<li><p>第一个示例：    基本路由。</p>\n<pre><code>在此示例中，路由器处理了3个“页面”：主页，“关于”页面和“用户”页面。当您单击不同的&lt;Link&gt;时，路由器将呈现匹配的&lt;Route&gt;。\n注意：在幕后，&lt;Link&gt;会使用真实的href渲染&lt;a&gt;</code></pre></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/users\"</span>&gt;Users&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;<span class=\"comment\">/* &lt;Switch&gt;通过子&lt;Route&gt; 查找</span></span><br><span class=\"line\"><span class=\"comment\">\t\t呈现与当前URL匹配的第一个。如果有两个相同的URL只渲染一次这个路径不会渲染第二次*/</span>&#125;</span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route path=<span class=\"string\">\"/about\"</span>&gt;</span><br><span class=\"line\">            &lt;About /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/u</span>sers<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Users /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Home&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;About&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Users() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Users&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个示例：<br>    这个例子现实的是嵌套路由的方式。路由    ‘/topic’    加载Topics组件，该组件将在path:    id值上有条件地呈现任何其他    Route</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useRouteMatch,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;Home&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function About() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h2&gt;About&lt;/h2&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function Topics() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let match = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\">//相对于父路由建立&lt;Route&gt;,而url允许建立相对的links.</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;match.url&#125;/components`&#125;&gt;Components&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=&#123;`$&#123;match.url&#125;/props-v-state`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Props v. State</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;/*Topics页面有自己的&lt;Switch&gt;里面又包含很多的&lt;Route&gt;,Topics里的&lt;Switch&gt;里面的路径是建立在'/topics'路径上的文件。第二个&lt;Route&gt;作为所有主题的页面或者没有主题时选择的页面   */&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;match.path&#125;/:topicId`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topic /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;match.path&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;h3&gt;Please select a topic.&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Topic() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; topicId &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Requested topic ID: &#123;topicId&#125;&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"##  Static Routes\n\n以前版本的React Router使用静态路由来配置应用程序的路由。这样可以在渲染之前检查和匹配路线。由于v4转移到动态组件而不是路由配置，因此一些以前的用例变得不那么明显和棘手。\n\n我们正在开发一个可与静态路由配置和React Router配合使用的软件包，以继续满足这些用例。现在正在开发中，但我们希望您能尝试一下并提供帮助。\n","source":"_posts/react_router/指南/Static_Routes.md","raw":"##  Static Routes\n\n以前版本的React Router使用静态路由来配置应用程序的路由。这样可以在渲染之前检查和匹配路线。由于v4转移到动态组件而不是路由配置，因此一些以前的用例变得不那么明显和棘手。\n\n我们正在开发一个可与静态路由配置和React Router配合使用的软件包，以继续满足这些用例。现在正在开发中，但我们希望您能尝试一下并提供帮助。\n","slug":"react_router/指南/Static_Routes","published":1,"date":"2020-01-09T08:43:22.856Z","updated":"2020-01-09T08:44:37.778Z","title":"react_router/指南/Static_Routes","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gp000hmkcofhwx465i","content":"<h2 id=\"Static-Routes\"><a href=\"#Static-Routes\" class=\"headerlink\" title=\"Static Routes\"></a>Static Routes</h2><p>以前版本的React Router使用静态路由来配置应用程序的路由。这样可以在渲染之前检查和匹配路线。由于v4转移到动态组件而不是路由配置，因此一些以前的用例变得不那么明显和棘手。</p>\n<p>我们正在开发一个可与静态路由配置和React Router配合使用的软件包，以继续满足这些用例。现在正在开发中，但我们希望您能尝试一下并提供帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Static-Routes\"><a href=\"#Static-Routes\" class=\"headerlink\" title=\"Static Routes\"></a>Static Routes</h2><p>以前版本的React Router使用静态路由来配置应用程序的路由。这样可以在渲染之前检查和匹配路线。由于v4转移到动态组件而不是路由配置，因此一些以前的用例变得不那么明显和棘手。</p>\n<p>我们正在开发一个可与静态路由配置和React Router配合使用的软件包，以继续满足这些用例。现在正在开发中，但我们希望您能尝试一下并提供帮助。</p>\n"},{"_content":"##  Testing\n\nReact Router依靠React上下文来工作。这会影响您如何测试使用我们的组件的组件。\n\n### Context\n\n如果您尝试对呈现`<Link>`或`<Route>`等的组件之一进行单元测试，则会收到一些有关上下文的错误和警告。虽然您可能会想自己尝试添加路由器上下文，但是我们建议您将单元测试包装在以下路由器组件之一中：具有历史记录属性的基本路由器，或`<StaticRouter>`，`<MemoryRouter>`或`<BrowserRouter>`（如果window.history在测试环境中可用作全局变量）。\n\n建议使用MemoryRouter或自定义历史记录，以便能够在两次测试之间重置路由器。\n\n```js\nclass Sidebar extends Component {\n  // ...\n  render() {\n    return (\n      <div>\n        <button onClick={this.toggleExpand}>expand</button>\n        <ul>\n          {users.map(user => (\n            <li>\n              <Link to={user.path}>{user.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// broken\ntest(\"it expands when the button is clicked\", () => {\n  render(<Sidebar />);\n  click(theButton);\n  expect(theThingToBeOpen);\n});\n\n//  fixed\ntest(\"it expands when the button is clicked\", () => {\n  render(\n    <MemoryRouter>\n      <Sidebar />\n    </MemoryRouter>\n  );\n  click(theButton);\n  expect(theThingToBeOpen);\n});\n```\n\n### 从特定路线开始\n\n`<MemoryRouter>`支持initialEntries和initialIndex道具，因此您可以在特定位置启动应用程序（或应用程序的任何较小部分）。\n```js\ntest(\"current user is active in sidebar\", () => {\n  render(\n    <MemoryRouter initialEntries={[\"/users/2\"]}>\n      <Sidebar />\n    </MemoryRouter>\n  );\n  expectUserToBeActive(2);\n});\n```\n\n### Navigating\n\n我们进行了很多测试，以检查路线在位置更改时是否有效，因此您可能不需要测试这些东西。但是，如果您需要在应用程序中测试导航，则可以这样进行：\n\n```js\n// app.js (a component file)\nimport React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\n// our 项目, the App, but you can test any 子项\n// 部分 of your app too\nconst App = () => (\n  <div>\n    <Route\n      exact\n      path=\"/\"\n      render={() => (\n        <div>\n          <h1>Welcome</h1>\n        </div>\n      )}\n    />\n    <Route\n      path=\"/dashboard\"\n      render={() => (\n        <div>\n          <h1>Dashboard</h1>\n          <Link to=\"/\" id=\"click-me\">\n            Home\n          </Link>\n        </div>\n      )}\n    />\n  </div>\n);\n```\n\n```js\n// 您也可以使用 a renderer like \"@testing-library/react\" or \"enzyme/mount\" here\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from 'react-dom/test-utils';\nimport { MemoryRouter } from \"react-router-dom\";\n\n// app.test.js\nit(\"navigates home when you click the logo\", async => {\n  // in a real test a renderer like \"@testing-library/react\"\n  // would 负责设置 the DOM elements\n  const root = document.createElement('div');\n  document.body.appendChild(root);\n\n  // Render app\n  render(\n    <MemoryRouter initialEntries={['/my/initial/route']}>\n      <App />\n    <MemoryRouter>,\n    root\n  );\n\n  // 页面互动\n  act(() => {\n    // 查找链接（可能使用文本内容）\n    const goHomeLink = document.querySelector('#nav-logo-home');\n    // Click it\n    goHomeLink.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  // 检查显示的页面内容是否正确\n  expect(document.body.textContent).toBe('Home');\n});\n```\n\n### 检查测试中的位置\n\n您不必在测试中经常访问位置或历史记录对象，但如果这样做（例如，验证是否在url栏中设置了新的查询参数），则可以添加一条路由来更新测试中的变量：\n\n```js\n// app.test.js\ntest(\"clicking filter links updates product query params\", () => {\n  let history, location;\n  render(\n    <MemoryRouter initialEntries={[\"/my/initial/route\"]}>\n      <App />\n      <Route\n        path=\"*\"\n        render={({ history, location }) => {\n          history = history;\n          location = location;\n          return null;\n        }}\n      />\n    </MemoryRouter>,\n    node\n  );\n\n  act(() => {\n    // example: click a <Link> to /products?id=1234\n  });\n\n  // assert about url\n  expect(location.pathname).toBe(\"/products\");\n  const searchParams = new URLSearchParams(location.search);\n  expect(searchParams.has(\"id\")).toBe(true);\n  expect(searchParams.get(\"id\")).toEqual(\"1234\");\n});\n\n```\n\n备选方案\n\n   -   如果您的测试环境具有浏览器全局变量window.location和window.history（这是通过JSDOM在Jest中的默认设置，但您无法重置测试之间的历史记录），则也可以使用BrowserRouter。\n   -   您可以将基本路由器与历史包中的历史道具一起使用，而不是将自定义路由传递给MemoryRouter\n\n```js\n// app.test.js\nimport { createMemoryHistory } from \"history\";\nimport { Router } from \"react-router\";\n\ntest(\"redirects to login page\", () => {\n  const history = createMemoryHistory();\n  render(\n    <Router history={history}>\n      <App signedInUser={null} />\n    </Router>,\n    node\n  );\n  expect(history.location.pathname).toBe(\"/login\");\n});\n```\n\n### React测试库\n","source":"_posts/react_router/指南/Testing.md","raw":"##  Testing\n\nReact Router依靠React上下文来工作。这会影响您如何测试使用我们的组件的组件。\n\n### Context\n\n如果您尝试对呈现`<Link>`或`<Route>`等的组件之一进行单元测试，则会收到一些有关上下文的错误和警告。虽然您可能会想自己尝试添加路由器上下文，但是我们建议您将单元测试包装在以下路由器组件之一中：具有历史记录属性的基本路由器，或`<StaticRouter>`，`<MemoryRouter>`或`<BrowserRouter>`（如果window.history在测试环境中可用作全局变量）。\n\n建议使用MemoryRouter或自定义历史记录，以便能够在两次测试之间重置路由器。\n\n```js\nclass Sidebar extends Component {\n  // ...\n  render() {\n    return (\n      <div>\n        <button onClick={this.toggleExpand}>expand</button>\n        <ul>\n          {users.map(user => (\n            <li>\n              <Link to={user.path}>{user.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// broken\ntest(\"it expands when the button is clicked\", () => {\n  render(<Sidebar />);\n  click(theButton);\n  expect(theThingToBeOpen);\n});\n\n//  fixed\ntest(\"it expands when the button is clicked\", () => {\n  render(\n    <MemoryRouter>\n      <Sidebar />\n    </MemoryRouter>\n  );\n  click(theButton);\n  expect(theThingToBeOpen);\n});\n```\n\n### 从特定路线开始\n\n`<MemoryRouter>`支持initialEntries和initialIndex道具，因此您可以在特定位置启动应用程序（或应用程序的任何较小部分）。\n```js\ntest(\"current user is active in sidebar\", () => {\n  render(\n    <MemoryRouter initialEntries={[\"/users/2\"]}>\n      <Sidebar />\n    </MemoryRouter>\n  );\n  expectUserToBeActive(2);\n});\n```\n\n### Navigating\n\n我们进行了很多测试，以检查路线在位置更改时是否有效，因此您可能不需要测试这些东西。但是，如果您需要在应用程序中测试导航，则可以这样进行：\n\n```js\n// app.js (a component file)\nimport React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\n// our 项目, the App, but you can test any 子项\n// 部分 of your app too\nconst App = () => (\n  <div>\n    <Route\n      exact\n      path=\"/\"\n      render={() => (\n        <div>\n          <h1>Welcome</h1>\n        </div>\n      )}\n    />\n    <Route\n      path=\"/dashboard\"\n      render={() => (\n        <div>\n          <h1>Dashboard</h1>\n          <Link to=\"/\" id=\"click-me\">\n            Home\n          </Link>\n        </div>\n      )}\n    />\n  </div>\n);\n```\n\n```js\n// 您也可以使用 a renderer like \"@testing-library/react\" or \"enzyme/mount\" here\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from 'react-dom/test-utils';\nimport { MemoryRouter } from \"react-router-dom\";\n\n// app.test.js\nit(\"navigates home when you click the logo\", async => {\n  // in a real test a renderer like \"@testing-library/react\"\n  // would 负责设置 the DOM elements\n  const root = document.createElement('div');\n  document.body.appendChild(root);\n\n  // Render app\n  render(\n    <MemoryRouter initialEntries={['/my/initial/route']}>\n      <App />\n    <MemoryRouter>,\n    root\n  );\n\n  // 页面互动\n  act(() => {\n    // 查找链接（可能使用文本内容）\n    const goHomeLink = document.querySelector('#nav-logo-home');\n    // Click it\n    goHomeLink.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  // 检查显示的页面内容是否正确\n  expect(document.body.textContent).toBe('Home');\n});\n```\n\n### 检查测试中的位置\n\n您不必在测试中经常访问位置或历史记录对象，但如果这样做（例如，验证是否在url栏中设置了新的查询参数），则可以添加一条路由来更新测试中的变量：\n\n```js\n// app.test.js\ntest(\"clicking filter links updates product query params\", () => {\n  let history, location;\n  render(\n    <MemoryRouter initialEntries={[\"/my/initial/route\"]}>\n      <App />\n      <Route\n        path=\"*\"\n        render={({ history, location }) => {\n          history = history;\n          location = location;\n          return null;\n        }}\n      />\n    </MemoryRouter>,\n    node\n  );\n\n  act(() => {\n    // example: click a <Link> to /products?id=1234\n  });\n\n  // assert about url\n  expect(location.pathname).toBe(\"/products\");\n  const searchParams = new URLSearchParams(location.search);\n  expect(searchParams.has(\"id\")).toBe(true);\n  expect(searchParams.get(\"id\")).toEqual(\"1234\");\n});\n\n```\n\n备选方案\n\n   -   如果您的测试环境具有浏览器全局变量window.location和window.history（这是通过JSDOM在Jest中的默认设置，但您无法重置测试之间的历史记录），则也可以使用BrowserRouter。\n   -   您可以将基本路由器与历史包中的历史道具一起使用，而不是将自定义路由传递给MemoryRouter\n\n```js\n// app.test.js\nimport { createMemoryHistory } from \"history\";\nimport { Router } from \"react-router\";\n\ntest(\"redirects to login page\", () => {\n  const history = createMemoryHistory();\n  render(\n    <Router history={history}>\n      <App signedInUser={null} />\n    </Router>,\n    node\n  );\n  expect(history.location.pathname).toBe(\"/login\");\n});\n```\n\n### React测试库\n","slug":"react_router/指南/Testing","published":1,"date":"2020-01-09T08:20:30.143Z","updated":"2020-01-09T08:35:00.942Z","title":"react_router/指南/Testing","comments":1,"layout":"post","photos":[],"link":"","_id":"ck59cv4gq000imkcoc47adri5","content":"<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>React Router依靠React上下文来工作。这会影响您如何测试使用我们的组件的组件。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p>如果您尝试对呈现<code>&lt;Link&gt;</code>或<code>&lt;Route&gt;</code>等的组件之一进行单元测试，则会收到一些有关上下文的错误和警告。虽然您可能会想自己尝试添加路由器上下文，但是我们建议您将单元测试包装在以下路由器组件之一中：具有历史记录属性的基本路由器，或<code>&lt;StaticRouter&gt;</code>，<code>&lt;MemoryRouter&gt;</code>或<code>&lt;BrowserRouter&gt;</code>（如果window.history在测试环境中可用作全局变量）。</p>\n<p>建议使用MemoryRouter或自定义历史记录，以便能够在两次测试之间重置路由器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sidebar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.toggleExpand&#125;&gt;expand&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              &lt;Link to=&#123;user.path&#125;&gt;&#123;user.name&#125;&lt;/</span>Link&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ broken</span></span><br><span class=\"line\"><span class=\"regexp\">test(\"it expands when the button is clicked\", () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render(&lt;Sidebar /</span>&gt;);</span><br><span class=\"line\">  click(theButton);</span><br><span class=\"line\">  expect(theThingToBeOpen);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  fixed</span></span><br><span class=\"line\">test(<span class=\"string\">\"it expands when the button is clicked\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter&gt;</span><br><span class=\"line\">      &lt;Sidebar /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  click(theButton);</span></span><br><span class=\"line\"><span class=\"regexp\">  expect(theThingToBeOpen);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从特定路线开始\"><a href=\"#从特定路线开始\" class=\"headerlink\" title=\"从特定路线开始\"></a>从特定路线开始</h3><p><code>&lt;MemoryRouter&gt;</code>支持initialEntries和initialIndex道具，因此您可以在特定位置启动应用程序（或应用程序的任何较小部分）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">\"current user is active in sidebar\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">\"/users/2\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;Sidebar /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  expectUserToBeActive(2);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Navigating\"><a href=\"#Navigating\" class=\"headerlink\" title=\"Navigating\"></a>Navigating</h3><p>我们进行了很多测试，以检查路线在位置更改时是否有效，因此您可能不需要测试这些东西。但是，如果您需要在应用程序中测试导航，则可以这样进行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js (a component file)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our 项目, the App, but you can test any 子项</span></span><br><span class=\"line\"><span class=\"comment\">// 部分 of your app too</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      exact</span><br><span class=\"line\">      path=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">      render=&#123;() =&gt; (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;Welcome&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/dashboard\"</span></span><br><span class=\"line\">      render=&#123;() =&gt; (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;Dashboard&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Link to=\"/</span><span class=\"string\">\" id=\"</span>click-me<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Home</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      )&#125;</span></span><br><span class=\"line\"><span class=\"string\">    /&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 您也可以使用 a renderer like \"@testing-library/react\" or \"enzyme/mount\" here</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render, unmountComponentAtNode &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/test-utils'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MemoryRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\">it(<span class=\"string\">\"navigates home when you click the logo\"</span>, <span class=\"keyword\">async</span> =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// in a real test a renderer like \"@testing-library/react\"</span></span><br><span class=\"line\">  <span class=\"comment\">// would 负责设置 the DOM elements</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Render app</span></span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">'/my/initial/route'</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;MemoryRouter&gt;,</span><br><span class=\"line\">    root</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 页面互动</span></span><br><span class=\"line\">  act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找链接（可能使用文本内容）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> goHomeLink = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#nav-logo-home'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Click it</span></span><br><span class=\"line\">    goHomeLink.dispatchEvent(<span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">\"click\"</span>, &#123; <span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查显示的页面内容是否正确</span></span><br><span class=\"line\">  expect(<span class=\"built_in\">document</span>.body.textContent).toBe(<span class=\"string\">'Home'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查测试中的位置\"><a href=\"#检查测试中的位置\" class=\"headerlink\" title=\"检查测试中的位置\"></a>检查测试中的位置</h3><p>您不必在测试中经常访问位置或历史记录对象，但如果这样做（例如，验证是否在url栏中设置了新的查询参数），则可以添加一条路由来更新测试中的变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\">test(<span class=\"string\">\"clicking filter links updates product query params\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> history, location;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">\"/my/initial/route\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">      &lt;Route</span><br><span class=\"line\">        path=<span class=\"string\">\"*\"</span></span><br><span class=\"line\">        render=&#123;(&#123; history, location &#125;) =&gt; &#123;</span><br><span class=\"line\">          history = history;</span><br><span class=\"line\">          location = location;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    node</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  act(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ example: click a &lt;Link&gt; to /</span>products?id=<span class=\"number\">1234</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert about url</span></span><br><span class=\"line\">  expect(location.pathname).toBe(<span class=\"string\">\"/products\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(location.search);</span><br><span class=\"line\">  expect(searchParams.has(<span class=\"string\">\"id\"</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  expect(searchParams.get(<span class=\"string\">\"id\"</span>)).toEqual(<span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>备选方案</p>\n<ul>\n<li>如果您的测试环境具有浏览器全局变量window.location和window.history（这是通过JSDOM在Jest中的默认设置，但您无法重置测试之间的历史记录），则也可以使用BrowserRouter。</li>\n<li>您可以将基本路由器与历史包中的历史道具一起使用，而不是将自定义路由传递给MemoryRouter</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createMemoryHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"history\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">\"redirects to login page\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> history = createMemoryHistory();</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">      &lt;App signedInUser=&#123;<span class=\"literal\">null</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    node</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  expect(history.location.pathname).toBe(\"/</span>login<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React测试库\"><a href=\"#React测试库\" class=\"headerlink\" title=\"React测试库\"></a>React测试库</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>React Router依靠React上下文来工作。这会影响您如何测试使用我们的组件的组件。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p>如果您尝试对呈现<code>&lt;Link&gt;</code>或<code>&lt;Route&gt;</code>等的组件之一进行单元测试，则会收到一些有关上下文的错误和警告。虽然您可能会想自己尝试添加路由器上下文，但是我们建议您将单元测试包装在以下路由器组件之一中：具有历史记录属性的基本路由器，或<code>&lt;StaticRouter&gt;</code>，<code>&lt;MemoryRouter&gt;</code>或<code>&lt;BrowserRouter&gt;</code>（如果window.history在测试环境中可用作全局变量）。</p>\n<p>建议使用MemoryRouter或自定义历史记录，以便能够在两次测试之间重置路由器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sidebar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.toggleExpand&#125;&gt;expand&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              &lt;Link to=&#123;user.path&#125;&gt;&#123;user.name&#125;&lt;/</span>Link&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ broken</span></span><br><span class=\"line\"><span class=\"regexp\">test(\"it expands when the button is clicked\", () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render(&lt;Sidebar /</span>&gt;);</span><br><span class=\"line\">  click(theButton);</span><br><span class=\"line\">  expect(theThingToBeOpen);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  fixed</span></span><br><span class=\"line\">test(<span class=\"string\">\"it expands when the button is clicked\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter&gt;</span><br><span class=\"line\">      &lt;Sidebar /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  click(theButton);</span></span><br><span class=\"line\"><span class=\"regexp\">  expect(theThingToBeOpen);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从特定路线开始\"><a href=\"#从特定路线开始\" class=\"headerlink\" title=\"从特定路线开始\"></a>从特定路线开始</h3><p><code>&lt;MemoryRouter&gt;</code>支持initialEntries和initialIndex道具，因此您可以在特定位置启动应用程序（或应用程序的任何较小部分）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">\"current user is active in sidebar\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">\"/users/2\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;Sidebar /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  expectUserToBeActive(2);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Navigating\"><a href=\"#Navigating\" class=\"headerlink\" title=\"Navigating\"></a>Navigating</h3><p>我们进行了很多测试，以检查路线在位置更改时是否有效，因此您可能不需要测试这些东西。但是，如果您需要在应用程序中测试导航，则可以这样进行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js (a component file)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our 项目, the App, but you can test any 子项</span></span><br><span class=\"line\"><span class=\"comment\">// 部分 of your app too</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      exact</span><br><span class=\"line\">      path=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">      render=&#123;() =&gt; (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;Welcome&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/dashboard\"</span></span><br><span class=\"line\">      render=&#123;() =&gt; (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;Dashboard&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Link to=\"/</span><span class=\"string\">\" id=\"</span>click-me<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Home</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      )&#125;</span></span><br><span class=\"line\"><span class=\"string\">    /&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 您也可以使用 a renderer like \"@testing-library/react\" or \"enzyme/mount\" here</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render, unmountComponentAtNode &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/test-utils'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MemoryRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\">it(<span class=\"string\">\"navigates home when you click the logo\"</span>, <span class=\"keyword\">async</span> =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// in a real test a renderer like \"@testing-library/react\"</span></span><br><span class=\"line\">  <span class=\"comment\">// would 负责设置 the DOM elements</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Render app</span></span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">'/my/initial/route'</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;MemoryRouter&gt;,</span><br><span class=\"line\">    root</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 页面互动</span></span><br><span class=\"line\">  act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找链接（可能使用文本内容）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> goHomeLink = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#nav-logo-home'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Click it</span></span><br><span class=\"line\">    goHomeLink.dispatchEvent(<span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">\"click\"</span>, &#123; <span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查显示的页面内容是否正确</span></span><br><span class=\"line\">  expect(<span class=\"built_in\">document</span>.body.textContent).toBe(<span class=\"string\">'Home'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查测试中的位置\"><a href=\"#检查测试中的位置\" class=\"headerlink\" title=\"检查测试中的位置\"></a>检查测试中的位置</h3><p>您不必在测试中经常访问位置或历史记录对象，但如果这样做（例如，验证是否在url栏中设置了新的查询参数），则可以添加一条路由来更新测试中的变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\">test(<span class=\"string\">\"clicking filter links updates product query params\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> history, location;</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;MemoryRouter initialEntries=&#123;[<span class=\"string\">\"/my/initial/route\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">      &lt;Route</span><br><span class=\"line\">        path=<span class=\"string\">\"*\"</span></span><br><span class=\"line\">        render=&#123;(&#123; history, location &#125;) =&gt; &#123;</span><br><span class=\"line\">          history = history;</span><br><span class=\"line\">          location = location;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MemoryRouter&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    node</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  act(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ example: click a &lt;Link&gt; to /</span>products?id=<span class=\"number\">1234</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert about url</span></span><br><span class=\"line\">  expect(location.pathname).toBe(<span class=\"string\">\"/products\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(location.search);</span><br><span class=\"line\">  expect(searchParams.has(<span class=\"string\">\"id\"</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  expect(searchParams.get(<span class=\"string\">\"id\"</span>)).toEqual(<span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>备选方案</p>\n<ul>\n<li>如果您的测试环境具有浏览器全局变量window.location和window.history（这是通过JSDOM在Jest中的默认设置，但您无法重置测试之间的历史记录），则也可以使用BrowserRouter。</li>\n<li>您可以将基本路由器与历史包中的历史道具一起使用，而不是将自定义路由传递给MemoryRouter</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createMemoryHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"history\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">\"redirects to login page\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> history = createMemoryHistory();</span><br><span class=\"line\">  render(</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">      &lt;App signedInUser=&#123;<span class=\"literal\">null</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    node</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  expect(history.location.pathname).toBe(\"/</span>login<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React测试库\"><a href=\"#React测试库\" class=\"headerlink\" title=\"React测试库\"></a>React测试库</h3>"},{"_content":"使用HTML5历史记录API（pushState，replaceState和popstate事件）的`<Router>`使UI与URL保持同步。\n```jsx harmony\n<BrowserRouter\n  basename={optionalString}\n  forceRefresh={optionalBool}\n  getUserConfirmation={optionalFunc}\n  keyLength={optionalNumber}\n>\n  <App />\n</BrowserRouter>\n```\n\n### basename: string\n所有位置的基本URL。如果您的应用是通过服务器上的子目录提供的，则需要将其设置为子目录。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<BrowserRouter basename=\"/calendar\" />\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n### getUserConfirmation: func\n用于确认导航的功能。默认使用window.confirm。\n```jsx harmony\n<BrowserRouter\n  getUserConfirmation={(message, callback) => {\n    // this is the default behavior\n    const allowTransition = window.confirm(message);\n    callback(allowTransition);\n  }}\n/>\n```\n\n###  forceRefresh: bool\n如果为true，则路由器将在页面导航中使用整页刷新。您可能希望使用它来模仿传统的服务器渲染应用程序在页面导航之间刷新整个页面的方式。\n```jsx harmony\n<BrowserRouter forceRefresh={true} />\n\n```\n \n### keyLength: number\nlocation.key的长度。默认为6。\n```jsx harmony\n<BrowserRouter keyLength={12} />\n```\n\n### children: node\n要渲染的子元素。\n\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n","source":"_posts/react_router/Api/BrowserRouter.md","raw":"使用HTML5历史记录API（pushState，replaceState和popstate事件）的`<Router>`使UI与URL保持同步。\n```jsx harmony\n<BrowserRouter\n  basename={optionalString}\n  forceRefresh={optionalBool}\n  getUserConfirmation={optionalFunc}\n  keyLength={optionalNumber}\n>\n  <App />\n</BrowserRouter>\n```\n\n### basename: string\n所有位置的基本URL。如果您的应用是通过服务器上的子目录提供的，则需要将其设置为子目录。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<BrowserRouter basename=\"/calendar\" />\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n### getUserConfirmation: func\n用于确认导航的功能。默认使用window.confirm。\n```jsx harmony\n<BrowserRouter\n  getUserConfirmation={(message, callback) => {\n    // this is the default behavior\n    const allowTransition = window.confirm(message);\n    callback(allowTransition);\n  }}\n/>\n```\n\n###  forceRefresh: bool\n如果为true，则路由器将在页面导航中使用整页刷新。您可能希望使用它来模仿传统的服务器渲染应用程序在页面导航之间刷新整个页面的方式。\n```jsx harmony\n<BrowserRouter forceRefresh={true} />\n\n```\n \n### keyLength: number\nlocation.key的长度。默认为6。\n```jsx harmony\n<BrowserRouter keyLength={12} />\n```\n\n### children: node\n要渲染的子元素。\n\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n","slug":"react_router/Api/BrowserRouter","published":1,"date":"2020-01-13T08:33:34.178Z","updated":"2020-01-13T08:38:38.642Z","title":"react_router/Api/BrowserRouter","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnf0000egcocvbf9dix","content":"<p>使用HTML5历史记录API（pushState，replaceState和popstate事件）的<code>&lt;Router&gt;</code>使UI与URL保持同步。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter</span><br><span class=\"line\">  basename=&#123;optionalString&#125;</span><br><span class=\"line\">  forceRefresh=&#123;optionalBool&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  keyLength=&#123;optionalNumber&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。如果您的应用是通过服务器上的子目录提供的，则需要将其设置为子目录。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=<span class=\"string\">\"/calendar\"</span> /&gt;</span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"/calendar/today\"&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。默认使用window.confirm。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter</span><br><span class=\"line\">  getUserConfirmation=&#123;(message, callback) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is the default behavior</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> allowTransition = <span class=\"built_in\">window</span>.confirm(message);</span><br><span class=\"line\">    callback(allowTransition);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forceRefresh-bool\"><a href=\"#forceRefresh-bool\" class=\"headerlink\" title=\"forceRefresh: bool\"></a>forceRefresh: bool</h3><p>如果为true，则路由器将在页面导航中使用整页刷新。您可能希望使用它来模仿传统的服务器渲染应用程序在页面导航之间刷新整个页面的方式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter forceRefresh=&#123;<span class=\"literal\">true</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keyLength-number\"><a href=\"#keyLength-number\" class=\"headerlink\" title=\"keyLength: number\"></a>keyLength: number</h3><p>location.key的长度。默认为6。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter keyLength=&#123;<span class=\"number\">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<p>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用HTML5历史记录API（pushState，replaceState和popstate事件）的<code>&lt;Router&gt;</code>使UI与URL保持同步。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter</span><br><span class=\"line\">  basename=&#123;optionalString&#125;</span><br><span class=\"line\">  forceRefresh=&#123;optionalBool&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  keyLength=&#123;optionalNumber&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。如果您的应用是通过服务器上的子目录提供的，则需要将其设置为子目录。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=<span class=\"string\">\"/calendar\"</span> /&gt;</span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"/calendar/today\"&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。默认使用window.confirm。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter</span><br><span class=\"line\">  getUserConfirmation=&#123;(message, callback) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is the default behavior</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> allowTransition = <span class=\"built_in\">window</span>.confirm(message);</span><br><span class=\"line\">    callback(allowTransition);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forceRefresh-bool\"><a href=\"#forceRefresh-bool\" class=\"headerlink\" title=\"forceRefresh: bool\"></a>forceRefresh: bool</h3><p>如果为true，则路由器将在页面导航中使用整页刷新。您可能希望使用它来模仿传统的服务器渲染应用程序在页面导航之间刷新整个页面的方式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter forceRefresh=&#123;<span class=\"literal\">true</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keyLength-number\"><a href=\"#keyLength-number\" class=\"headerlink\" title=\"keyLength: number\"></a>keyLength: number</h3><p>location.key的长度。默认为6。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter keyLength=&#123;<span class=\"number\">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<p>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n"},{"_content":"`<Router>`使用URL的哈希部分（即window.location.hash）使UI与URL保持同步。\n\n**重要说明**：哈希历史记录不支持location.key或location.state。在以前的版本中，我们尝试对行为进行匀称处理，但存在一些无法解决的极端情况。任何需要此行为的代码或插件都将无法使用。由于此技术仅旨在支持旧版浏览器，因此建议您将服务器配置为与`<BrowserHistory>`一起使用。\n```jsx harmony\n<HashRouter\n  basename={optionalString}\n  getUserConfirmation={optionalFunc}\n  hashType={optionalString}\n>\n  <App />\n</HashRouter>\n```\n\n### basename: string\n所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<HashRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"#/calendar/today\">\n```\n\n### getUserConfirmation: func\n用于确认导航的功能。默认使用window.confirm。\n```jsx harmony\n<HashRouter\n  getUserConfirmation={(message, callback) => {\n    // this is the default behavior\n    const allowTransition = window.confirm(message);\n    callback(allowTransition);\n  }}\n/>\n```\n\n### hashType: string\n用于window.location.hash的编码类型。可用值为：\n- \"slash\"：创建＃/ 和 ＃/sunshine/lollipops之类的哈希\n- \"slash\"：创建hash # and #sunshine/lollipops\n- \"hashbang\"：创建“可抓取的ajax”（Google弃用）哈希l#!/ and #!/sunshine/lollipops\n默认为“斜线”。\n","source":"_posts/react_router/Api/HashRouter.md","raw":"`<Router>`使用URL的哈希部分（即window.location.hash）使UI与URL保持同步。\n\n**重要说明**：哈希历史记录不支持location.key或location.state。在以前的版本中，我们尝试对行为进行匀称处理，但存在一些无法解决的极端情况。任何需要此行为的代码或插件都将无法使用。由于此技术仅旨在支持旧版浏览器，因此建议您将服务器配置为与`<BrowserHistory>`一起使用。\n```jsx harmony\n<HashRouter\n  basename={optionalString}\n  getUserConfirmation={optionalFunc}\n  hashType={optionalString}\n>\n  <App />\n</HashRouter>\n```\n\n### basename: string\n所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<HashRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"#/calendar/today\">\n```\n\n### getUserConfirmation: func\n用于确认导航的功能。默认使用window.confirm。\n```jsx harmony\n<HashRouter\n  getUserConfirmation={(message, callback) => {\n    // this is the default behavior\n    const allowTransition = window.confirm(message);\n    callback(allowTransition);\n  }}\n/>\n```\n\n### hashType: string\n用于window.location.hash的编码类型。可用值为：\n- \"slash\"：创建＃/ 和 ＃/sunshine/lollipops之类的哈希\n- \"slash\"：创建hash # and #sunshine/lollipops\n- \"hashbang\"：创建“可抓取的ajax”（Google弃用）哈希l#!/ and #!/sunshine/lollipops\n默认为“斜线”。\n","slug":"react_router/Api/HashRouter","published":1,"date":"2020-01-13T08:27:15.997Z","updated":"2020-01-13T08:33:19.505Z","title":"react_router/Api/HashRouter","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnr0001egcoe6bg8nxd","content":"<p><code>&lt;Router&gt;</code>使用URL的哈希部分（即window.location.hash）使UI与URL保持同步。</p>\n<p><strong>重要说明</strong>：哈希历史记录不支持location.key或location.state。在以前的版本中，我们尝试对行为进行匀称处理，但存在一些无法解决的极端情况。任何需要此行为的代码或插件都将无法使用。由于此技术仅旨在支持旧版浏览器，因此建议您将服务器配置为与<code>&lt;BrowserHistory&gt;</code>一起使用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter</span><br><span class=\"line\">  basename=&#123;optionalString&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  hashType=&#123;optionalString&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter basename=<span class=\"string\">\"/calendar\"</span>/&gt;</span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"#/calendar/today\"&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。默认使用window.confirm。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter</span><br><span class=\"line\">  getUserConfirmation=&#123;(message, callback) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is the default behavior</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> allowTransition = <span class=\"built_in\">window</span>.confirm(message);</span><br><span class=\"line\">    callback(allowTransition);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hashType-string\"><a href=\"#hashType-string\" class=\"headerlink\" title=\"hashType: string\"></a>hashType: string</h3><p>用于window.location.hash的编码类型。可用值为：</p>\n<ul>\n<li>“slash”：创建＃/ 和 ＃/sunshine/lollipops之类的哈希</li>\n<li>“slash”：创建hash # and #sunshine/lollipops</li>\n<li>“hashbang”：创建“可抓取的ajax”（Google弃用）哈希l#!/ and #!/sunshine/lollipops<br>默认为“斜线”。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>&lt;Router&gt;</code>使用URL的哈希部分（即window.location.hash）使UI与URL保持同步。</p>\n<p><strong>重要说明</strong>：哈希历史记录不支持location.key或location.state。在以前的版本中，我们尝试对行为进行匀称处理，但存在一些无法解决的极端情况。任何需要此行为的代码或插件都将无法使用。由于此技术仅旨在支持旧版浏览器，因此建议您将服务器配置为与<code>&lt;BrowserHistory&gt;</code>一起使用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter</span><br><span class=\"line\">  basename=&#123;optionalString&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  hashType=&#123;optionalString&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter basename=<span class=\"string\">\"/calendar\"</span>/&gt;</span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"#/calendar/today\"&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。默认使用window.confirm。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter</span><br><span class=\"line\">  getUserConfirmation=&#123;(message, callback) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is the default behavior</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> allowTransition = <span class=\"built_in\">window</span>.confirm(message);</span><br><span class=\"line\">    callback(allowTransition);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hashType-string\"><a href=\"#hashType-string\" class=\"headerlink\" title=\"hashType: string\"></a>hashType: string</h3><p>用于window.location.hash的编码类型。可用值为：</p>\n<ul>\n<li>“slash”：创建＃/ 和 ＃/sunshine/lollipops之类的哈希</li>\n<li>“slash”：创建hash # and #sunshine/lollipops</li>\n<li>“hashbang”：创建“可抓取的ajax”（Google弃用）哈希l#!/ and #!/sunshine/lollipops<br>默认为“斜线”。</li>\n</ul>\n"},{"_content":"### useHistory\nuseHistory挂钩使您可以访问可用于导航的历史记录实例。\n\n```jsx harmony\nimport { useHistory } from \"react-router-dom\";\n\nfunction HomeButton() {\n  let history = useHistory();\n  function handleClick() {\n  history.push(\"/home\")\n    }\n    return  (\n    \n<button type=\"button\" onClick={handleClick}>\n      Go home\n </button>)\n\n}\n```\n\n### useLocation\nuseLocation挂钩返回代表当前URL的位置对象。您可以像useState一样考虑它，只要URL更改，它就会返回一个新位置。\n\n这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：\n```jsx harmony\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  useLocation\n} from \"react-router-dom\";\n\nfunction usePageViews() {\n  let location = useLocation();\n  React.useEffect(() => {\n    ga.send([\"pageview\", location.pathname]);\n  }, [location]);\n}\n\nfunction App() {\n  usePageViews();\n  return <Switch>...</Switch>;\n}\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  node\n);\n```\n\n### useParams\n\nuseParams返回URL参数的键/值对的对象。使用它来访问当前<Route>的match.params。\n```jsx harmony\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\n\nfunction BlogPost() {\n  let { slug } = useParams();\n  return <div>Now showing post {slug}</div>;\n}\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n      <Route path=\"/blog/:slug\">\n        <BlogPost />\n      </Route>\n    </Switch>\n  </Router>,\n  node\n);\n```\n\n### useRouteMatch\n\nuseRouteMatch挂钩尝试以与<Route>相同的方式匹配当前URL。在无需实际呈现`<Route>`的情况下访问匹配数据最有用。\n\n现在，代替\n```jsx harmony\nimport { Route } from \"react-router-dom\";\n\nfunction BlogPost() {\n  return (\n    <Route\n      path=\"/blog/:slug\"\n      render={({ match }) => {\n        // Do whatever you want with the match...\n        return <div />;\n      }}\n    />\n  );\n}\n\n```\n\n你也可以\n```jsx harmony\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction BlogPost() {\n  let match = useRouteMatch(\"/blog/:slug\");\n\n  // Do whatever you want with the match...\n  return <div />;\n}\n```\n","source":"_posts/react_router/Api/Hooks.md","raw":"### useHistory\nuseHistory挂钩使您可以访问可用于导航的历史记录实例。\n\n```jsx harmony\nimport { useHistory } from \"react-router-dom\";\n\nfunction HomeButton() {\n  let history = useHistory();\n  function handleClick() {\n  history.push(\"/home\")\n    }\n    return  (\n    \n<button type=\"button\" onClick={handleClick}>\n      Go home\n </button>)\n\n}\n```\n\n### useLocation\nuseLocation挂钩返回代表当前URL的位置对象。您可以像useState一样考虑它，只要URL更改，它就会返回一个新位置。\n\n这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：\n```jsx harmony\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  useLocation\n} from \"react-router-dom\";\n\nfunction usePageViews() {\n  let location = useLocation();\n  React.useEffect(() => {\n    ga.send([\"pageview\", location.pathname]);\n  }, [location]);\n}\n\nfunction App() {\n  usePageViews();\n  return <Switch>...</Switch>;\n}\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  node\n);\n```\n\n### useParams\n\nuseParams返回URL参数的键/值对的对象。使用它来访问当前<Route>的match.params。\n```jsx harmony\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\n\nfunction BlogPost() {\n  let { slug } = useParams();\n  return <div>Now showing post {slug}</div>;\n}\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n      <Route path=\"/blog/:slug\">\n        <BlogPost />\n      </Route>\n    </Switch>\n  </Router>,\n  node\n);\n```\n\n### useRouteMatch\n\nuseRouteMatch挂钩尝试以与<Route>相同的方式匹配当前URL。在无需实际呈现`<Route>`的情况下访问匹配数据最有用。\n\n现在，代替\n```jsx harmony\nimport { Route } from \"react-router-dom\";\n\nfunction BlogPost() {\n  return (\n    <Route\n      path=\"/blog/:slug\"\n      render={({ match }) => {\n        // Do whatever you want with the match...\n        return <div />;\n      }}\n    />\n  );\n}\n\n```\n\n你也可以\n```jsx harmony\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction BlogPost() {\n  let match = useRouteMatch(\"/blog/:slug\");\n\n  // Do whatever you want with the match...\n  return <div />;\n}\n```\n","slug":"react_router/Api/Hooks","published":1,"date":"2020-01-13T06:10:51.926Z","updated":"2020-01-13T06:26:53.189Z","title":"react_router/Api/Hooks","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnt0002egcob2xd2816","content":"<h3 id=\"useHistory\"><a href=\"#useHistory\" class=\"headerlink\" title=\"useHistory\"></a>useHistory</h3><p>useHistory挂钩使您可以访问可用于导航的历史记录实例。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HomeButton</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> history = useHistory();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  history.push(<span class=\"string\">\"/home\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  (</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Go home</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/button&gt;)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useLocation\"><a href=\"#useLocation\" class=\"headerlink\" title=\"useLocation\"></a>useLocation</h3><p>useLocation挂钩返回代表当前URL的位置对象。您可以像useState一样考虑它，只要URL更改，它就会返回一个新位置。</p>\n<p>这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usePageViews</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> location = useLocation();</span><br><span class=\"line\">  React.useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ga.send([<span class=\"string\">\"pageview\"</span>, location.pathname]);</span><br><span class=\"line\">  &#125;, [location]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  usePageViews();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Switch</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">Switch</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useParams\"><a href=\"#useParams\" class=\"headerlink\" title=\"useParams\"></a>useParams</h3><p>useParams返回URL参数的键/值对的对象。使用它来访问当前<Route>的match.params。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; slug &#125; = useParams();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Now showing post &#123;slug&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">        &lt;HomePage /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route path=\"/</span>blog/:slug<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;BlogPost /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;,</span></span><br><span class=\"line\"><span class=\"string\">  node</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRouteMatch\"><a href=\"#useRouteMatch\" class=\"headerlink\" title=\"useRouteMatch\"></a>useRouteMatch</h3><p>useRouteMatch挂钩尝试以与<Route>相同的方式匹配当前URL。在无需实际呈现<code>&lt;Route&gt;</code>的情况下访问匹配数据最有用。</p>\n<p>现在，代替</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/blog/:slug\"</span></span><br><span class=\"line\">      render=&#123;(&#123; match &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do whatever you want with the match...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouteMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> match = useRouteMatch(<span class=\"string\">\"/blog/:slug\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do whatever you want with the match...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"useHistory\"><a href=\"#useHistory\" class=\"headerlink\" title=\"useHistory\"></a>useHistory</h3><p>useHistory挂钩使您可以访问可用于导航的历史记录实例。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HomeButton</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> history = useHistory();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  history.push(<span class=\"string\">\"/home\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  (</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Go home</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/button&gt;)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useLocation\"><a href=\"#useLocation\" class=\"headerlink\" title=\"useLocation\"></a>useLocation</h3><p>useLocation挂钩返回代表当前URL的位置对象。您可以像useState一样考虑它，只要URL更改，它就会返回一个新位置。</p>\n<p>这可能非常有用，例如在您希望每次加载新页面时都使用Web分析工具触发新的“页面浏览”事件的情况下，如以下示例所示：</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usePageViews</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> location = useLocation();</span><br><span class=\"line\">  React.useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ga.send([<span class=\"string\">\"pageview\"</span>, location.pathname]);</span><br><span class=\"line\">  &#125;, [location]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  usePageViews();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Switch</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">Switch</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  node</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useParams\"><a href=\"#useParams\" class=\"headerlink\" title=\"useParams\"></a>useParams</h3><p>useParams返回URL参数的键/值对的对象。使用它来访问当前<Route>的match.params。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; slug &#125; = useParams();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Now showing post &#123;slug&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route exact path=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">        &lt;HomePage /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route path=\"/</span>blog/:slug<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;BlogPost /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;,</span></span><br><span class=\"line\"><span class=\"string\">  node</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRouteMatch\"><a href=\"#useRouteMatch\" class=\"headerlink\" title=\"useRouteMatch\"></a>useRouteMatch</h3><p>useRouteMatch挂钩尝试以与<Route>相同的方式匹配当前URL。在无需实际呈现<code>&lt;Route&gt;</code>的情况下访问匹配数据最有用。</p>\n<p>现在，代替</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      path=<span class=\"string\">\"/blog/:slug\"</span></span><br><span class=\"line\">      render=&#123;(&#123; match &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do whatever you want with the match...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  );</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouteMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BlogPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> match = useRouteMatch(<span class=\"string\">\"/blog/:slug\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do whatever you want with the match...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"提供围绕应用程序的声明式，可访问的导航。\n```jsx harmony\n<Link to=\"/about\">About</Link>\n```\n\n\n### to: string\n链接位置的字符串表示形式，是通过将位置的路径名，搜索和哈希属性连接起来而创建的。\n```jsx harmony\n<Link to=\"/courses?sort=name\" />\n```\n\n### to: object\n可以具有以下任何属性的对象:\n- pathname:  表示链接到的路径的字符串。\n- search: query 参数的字符串表示形式。\n- hash: 网址中的哈希值，例如＃a-hash。\n- state:  state位置\n```jsx harmony\n<Link\n  to={{\n    pathname: \"/courses\",\n    search: \"?sort=name\",\n    hash: \"#the-hash\",\n    state: { fromDashboard: true }\n  }}\n/>\n```\n### to: function\n当前位置作为参数传递给该函数的函数，该函数应以字符串或对象的形式返回位置表示形式\n```jsx harmony\n<Link to={location => ({ ...location, pathname: \"/courses\" })} />\n```\n```jsx harmony\n<Link to={location => `${location.pathname}?sort=name`} />\n```\n\n### replace: bool\n如果为true，则单击链接将替换历史记录堆栈中的当前条目，而不是添加新条目。\n```jsx harmony\n<Link to=\"/courses\" replace />\n```\n\n### innerRef: function\n从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。\n\n允许访问组件的基础引用。\n```jsx harmony\n<Link\n  to=\"/\"\n  innerRef={node => {\n    // `node` refers 为了挂载 Dom元素\n    // or 卸载时为null\n  }}\n/>\n```\n### innerRef: RefObject\n从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。\n\n使用React.createRef获取组件的基础引用。\n\n```jsx harmony\nlet anchorRef = React.createRef()\n\n<Link to=\"/\" innerRef={anchorRef} />\n```\n\n### others\n\n您还可以通过props想要在`<a>`上显示的例如标题，id，className等。\n","source":"_posts/react_router/Api/Link.md","raw":"提供围绕应用程序的声明式，可访问的导航。\n```jsx harmony\n<Link to=\"/about\">About</Link>\n```\n\n\n### to: string\n链接位置的字符串表示形式，是通过将位置的路径名，搜索和哈希属性连接起来而创建的。\n```jsx harmony\n<Link to=\"/courses?sort=name\" />\n```\n\n### to: object\n可以具有以下任何属性的对象:\n- pathname:  表示链接到的路径的字符串。\n- search: query 参数的字符串表示形式。\n- hash: 网址中的哈希值，例如＃a-hash。\n- state:  state位置\n```jsx harmony\n<Link\n  to={{\n    pathname: \"/courses\",\n    search: \"?sort=name\",\n    hash: \"#the-hash\",\n    state: { fromDashboard: true }\n  }}\n/>\n```\n### to: function\n当前位置作为参数传递给该函数的函数，该函数应以字符串或对象的形式返回位置表示形式\n```jsx harmony\n<Link to={location => ({ ...location, pathname: \"/courses\" })} />\n```\n```jsx harmony\n<Link to={location => `${location.pathname}?sort=name`} />\n```\n\n### replace: bool\n如果为true，则单击链接将替换历史记录堆栈中的当前条目，而不是添加新条目。\n```jsx harmony\n<Link to=\"/courses\" replace />\n```\n\n### innerRef: function\n从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。\n\n允许访问组件的基础引用。\n```jsx harmony\n<Link\n  to=\"/\"\n  innerRef={node => {\n    // `node` refers 为了挂载 Dom元素\n    // or 卸载时为null\n  }}\n/>\n```\n### innerRef: RefObject\n从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。\n\n使用React.createRef获取组件的基础引用。\n\n```jsx harmony\nlet anchorRef = React.createRef()\n\n<Link to=\"/\" innerRef={anchorRef} />\n```\n\n### others\n\n您还可以通过props想要在`<a>`上显示的例如标题，id，className等。\n","slug":"react_router/Api/Link","published":1,"date":"2020-01-13T06:26:48.825Z","updated":"2020-01-13T06:58:45.280Z","title":"react_router/Api/Link","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnu0003egco75bsa92s","content":"<p>提供围绕应用程序的声明式，可访问的导航。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"to-string\"><a href=\"#to-string\" class=\"headerlink\" title=\"to: string\"></a>to: string</h3><p>链接位置的字符串表示形式，是通过将位置的路径名，搜索和哈希属性连接起来而创建的。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses?sort=name\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"to-object\"><a href=\"#to-object\" class=\"headerlink\" title=\"to: object\"></a>to: object</h3><p>可以具有以下任何属性的对象:</p>\n<ul>\n<li>pathname:  表示链接到的路径的字符串。</li>\n<li>search: query 参数的字符串表示形式。</li>\n<li>hash: 网址中的哈希值，例如＃a-hash。</li>\n<li>state:  state位置<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=&#123;&#123;</span><br><span class=\"line\">    pathname: <span class=\"string\">\"/courses\"</span>,</span><br><span class=\"line\">    search: <span class=\"string\">\"?sort=name\"</span>,</span><br><span class=\"line\">    hash: <span class=\"string\">\"#the-hash\"</span>,</span><br><span class=\"line\">    state: &#123; <span class=\"attr\">fromDashboard</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"to-function\"><a href=\"#to-function\" class=\"headerlink\" title=\"to: function\"></a>to: function</h3>当前位置作为参数传递给该函数的函数，该函数应以字符串或对象的形式返回位置表示形式<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&#123;location =&gt; (&#123; ...location, <span class=\"attr\">pathname</span>: <span class=\"string\">\"/courses\"</span> &#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&#123;location =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;location.pathname&#125;</span>?sort=name`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"replace-bool\"><a href=\"#replace-bool\" class=\"headerlink\" title=\"replace: bool\"></a>replace: bool</h3><p>如果为true，则单击链接将替换历史记录堆栈中的当前条目，而不是添加新条目。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span> replace /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"innerRef-function\"><a href=\"#innerRef-function\" class=\"headerlink\" title=\"innerRef: function\"></a>innerRef: function</h3><p>从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。</p>\n<p>允许访问组件的基础引用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">  innerRef=&#123;node =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `node` refers 为了挂载 Dom元素</span></span><br><span class=\"line\">    <span class=\"comment\">// or 卸载时为null</span></span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"innerRef-RefObject\"><a href=\"#innerRef-RefObject\" class=\"headerlink\" title=\"innerRef: RefObject\"></a>innerRef: RefObject</h3><p>从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。</p>\n<p>使用React.createRef获取组件的基础引用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anchorRef = React.createRef()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/\"</span> innerRef=&#123;anchorRef&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h3><p>您还可以通过props想要在<code>&lt;a&gt;</code>上显示的例如标题，id，className等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>提供围绕应用程序的声明式，可访问的导航。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"to-string\"><a href=\"#to-string\" class=\"headerlink\" title=\"to: string\"></a>to: string</h3><p>链接位置的字符串表示形式，是通过将位置的路径名，搜索和哈希属性连接起来而创建的。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses?sort=name\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"to-object\"><a href=\"#to-object\" class=\"headerlink\" title=\"to: object\"></a>to: object</h3><p>可以具有以下任何属性的对象:</p>\n<ul>\n<li>pathname:  表示链接到的路径的字符串。</li>\n<li>search: query 参数的字符串表示形式。</li>\n<li>hash: 网址中的哈希值，例如＃a-hash。</li>\n<li>state:  state位置<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=&#123;&#123;</span><br><span class=\"line\">    pathname: <span class=\"string\">\"/courses\"</span>,</span><br><span class=\"line\">    search: <span class=\"string\">\"?sort=name\"</span>,</span><br><span class=\"line\">    hash: <span class=\"string\">\"#the-hash\"</span>,</span><br><span class=\"line\">    state: &#123; <span class=\"attr\">fromDashboard</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"to-function\"><a href=\"#to-function\" class=\"headerlink\" title=\"to: function\"></a>to: function</h3>当前位置作为参数传递给该函数的函数，该函数应以字符串或对象的形式返回位置表示形式<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&#123;location =&gt; (&#123; ...location, <span class=\"attr\">pathname</span>: <span class=\"string\">\"/courses\"</span> &#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&#123;location =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;location.pathname&#125;</span>?sort=name`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"replace-bool\"><a href=\"#replace-bool\" class=\"headerlink\" title=\"replace: bool\"></a>replace: bool</h3><p>如果为true，则单击链接将替换历史记录堆栈中的当前条目，而不是添加新条目。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span> replace /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"innerRef-function\"><a href=\"#innerRef-function\" class=\"headerlink\" title=\"innerRef: function\"></a>innerRef: function</h3><p>从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。</p>\n<p>允许访问组件的基础引用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">  innerRef=&#123;node =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `node` refers 为了挂载 Dom元素</span></span><br><span class=\"line\">    <span class=\"comment\">// or 卸载时为null</span></span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"innerRef-RefObject\"><a href=\"#innerRef-RefObject\" class=\"headerlink\" title=\"innerRef: RefObject\"></a>innerRef: RefObject</h3><p>从React Router 5.1开始，如果您使用的是React 16，则不需要此道具，因为我们会将ref转发到基础<a>。请改用普通ref替换。</p>\n<p>使用React.createRef获取组件的基础引用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anchorRef = React.createRef()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/\"</span> innerRef=&#123;anchorRef&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h3><p>您还可以通过props想要在<code>&lt;a&gt;</code>上显示的例如标题，id，className等。</p>\n"},{"_content":"一个`<Router>`，用于将“ URL”的历史记录保留在内存中（不读取或写入地址栏）。在测试和非浏览器环境（如React Native）中很有用。\n\n```jsx harmony\n<MemoryRouter\n  initialEntries={optionalArray}\n  initialIndex={optionalNumber}\n  getUserConfirmation={optionalFunc}\n  keyLength={optionalNumber}\n>\n  <App />\n</MemoryRouter>\n```\n\n### initialEntries: array\n历史记录堆栈中的位置数组。这些可能是带有{路径名，搜索，哈希，状态}或简单字符串URL的成熟位置对象。\n```jsx harmony\n<MemoryRouter\n  initialEntries={[\"/one\", \"/two\", { pathname: \"/three\" }]}\n  initialIndex={1}\n>\n  <App />\n</MemoryRouter>\n\n```\n\n### initialIndex: number\n初始位置在initialEntries数组中的索引。\n\n\n### getUserConfirmation: func\n用于确认导航的功能。直接将`<MemoryRouter>`与`<Prompt>`一起使用时，必须使用此选项。\n\n\n### keyLength: number\nlocation.key的长度。默认为6。\n```jsx harmony\n<MemoryRouter keyLength={12} />\n```\n\n### children: node\n要渲染的子元素。\n\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n","source":"_posts/react_router/Api/MemoryRouter.md","raw":"一个`<Router>`，用于将“ URL”的历史记录保留在内存中（不读取或写入地址栏）。在测试和非浏览器环境（如React Native）中很有用。\n\n```jsx harmony\n<MemoryRouter\n  initialEntries={optionalArray}\n  initialIndex={optionalNumber}\n  getUserConfirmation={optionalFunc}\n  keyLength={optionalNumber}\n>\n  <App />\n</MemoryRouter>\n```\n\n### initialEntries: array\n历史记录堆栈中的位置数组。这些可能是带有{路径名，搜索，哈希，状态}或简单字符串URL的成熟位置对象。\n```jsx harmony\n<MemoryRouter\n  initialEntries={[\"/one\", \"/two\", { pathname: \"/three\" }]}\n  initialIndex={1}\n>\n  <App />\n</MemoryRouter>\n\n```\n\n### initialIndex: number\n初始位置在initialEntries数组中的索引。\n\n\n### getUserConfirmation: func\n用于确认导航的功能。直接将`<MemoryRouter>`与`<Prompt>`一起使用时，必须使用此选项。\n\n\n### keyLength: number\nlocation.key的长度。默认为6。\n```jsx harmony\n<MemoryRouter keyLength={12} />\n```\n\n### children: node\n要渲染的子元素。\n\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n","slug":"react_router/Api/MemoryRouter","published":1,"date":"2020-01-13T08:19:54.751Z","updated":"2020-01-13T08:24:06.731Z","title":"react_router/Api/MemoryRouter","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnv0004egco70ip6k5y","content":"<p>一个<code>&lt;Router&gt;</code>，用于将“ URL”的历史记录保留在内存中（不读取或写入地址栏）。在测试和非浏览器环境（如React Native）中很有用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter</span><br><span class=\"line\">  initialEntries=&#123;optionalArray&#125;</span><br><span class=\"line\">  initialIndex=&#123;optionalNumber&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  keyLength=&#123;optionalNumber&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"initialEntries-array\"><a href=\"#initialEntries-array\" class=\"headerlink\" title=\"initialEntries: array\"></a>initialEntries: array</h3><p>历史记录堆栈中的位置数组。这些可能是带有{路径名，搜索，哈希，状态}或简单字符串URL的成熟位置对象。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter</span><br><span class=\"line\">  initialEntries=&#123;[<span class=\"string\">\"/one\"</span>, <span class=\"string\">\"/two\"</span>, &#123; <span class=\"attr\">pathname</span>: <span class=\"string\">\"/three\"</span> &#125;]&#125;</span><br><span class=\"line\">  initialIndex=&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"initialIndex-number\"><a href=\"#initialIndex-number\" class=\"headerlink\" title=\"initialIndex: number\"></a>initialIndex: number</h3><p>初始位置在initialEntries数组中的索引。</p>\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。直接将<code>&lt;MemoryRouter&gt;</code>与<code>&lt;Prompt&gt;</code>一起使用时，必须使用此选项。</p>\n<h3 id=\"keyLength-number\"><a href=\"#keyLength-number\" class=\"headerlink\" title=\"keyLength: number\"></a>keyLength: number</h3><p>location.key的长度。默认为6。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter keyLength=&#123;<span class=\"number\">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<p>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个<code>&lt;Router&gt;</code>，用于将“ URL”的历史记录保留在内存中（不读取或写入地址栏）。在测试和非浏览器环境（如React Native）中很有用。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter</span><br><span class=\"line\">  initialEntries=&#123;optionalArray&#125;</span><br><span class=\"line\">  initialIndex=&#123;optionalNumber&#125;</span><br><span class=\"line\">  getUserConfirmation=&#123;optionalFunc&#125;</span><br><span class=\"line\">  keyLength=&#123;optionalNumber&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"initialEntries-array\"><a href=\"#initialEntries-array\" class=\"headerlink\" title=\"initialEntries: array\"></a>initialEntries: array</h3><p>历史记录堆栈中的位置数组。这些可能是带有{路径名，搜索，哈希，状态}或简单字符串URL的成熟位置对象。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter</span><br><span class=\"line\">  initialEntries=&#123;[<span class=\"string\">\"/one\"</span>, <span class=\"string\">\"/two\"</span>, &#123; <span class=\"attr\">pathname</span>: <span class=\"string\">\"/three\"</span> &#125;]&#125;</span><br><span class=\"line\">  initialIndex=&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/MemoryRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"initialIndex-number\"><a href=\"#initialIndex-number\" class=\"headerlink\" title=\"initialIndex: number\"></a>initialIndex: number</h3><p>初始位置在initialEntries数组中的索引。</p>\n<h3 id=\"getUserConfirmation-func\"><a href=\"#getUserConfirmation-func\" class=\"headerlink\" title=\"getUserConfirmation: func\"></a>getUserConfirmation: func</h3><p>用于确认导航的功能。直接将<code>&lt;MemoryRouter&gt;</code>与<code>&lt;Prompt&gt;</code>一起使用时，必须使用此选项。</p>\n<h3 id=\"keyLength-number\"><a href=\"#keyLength-number\" class=\"headerlink\" title=\"keyLength: number\"></a>keyLength: number</h3><p>location.key的长度。默认为6。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MemoryRouter keyLength=&#123;<span class=\"number\">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。</p>\n<p>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n"},{"_content":"`<Link>`的特殊版本，当它与当前URL匹配时，它将为rendered的元素添加样式属性。\n```jsx harmony\n<NavLink to=\"/about\">About</NavLink>\n```\n\n### activeClassName: string\n元素处于active状态时提供的类。默认给定的类是active的。这将与className prop一起加入。\n```jsx harmony\n<NavLink to=\"/faq\" activeClassName=\"selected\">\n  FAQs\n</NavLink>\n```\n\n### activeStyle: object\n元素处于活动状态时应用于元素的样式。\n```jsx harmony\n<NavLink\n  to=\"/faq\"\n  activeStyle={{\n    fontWeight: \"bold\",\n    color: \"red\"\n  }}\n>\n  FAQs\n</NavLink>\n```\n### exact: bool\n如果为true，则仅在位置完全匹配时才应用活动的类/样式。\n```jsx harmony\n<NavLink exact to=\"/profile\">\n  Profile\n</NavLink>\n```\n### strict: bool\n如果为true，则在确定位置是否与当前URL匹配时，将考虑位置路径名上的斜杠。有关更多信息，请参见`<Route strict>`文档。\n```jsx harmony\n<NavLink strict to=\"/events/\">\n  Events\n</NavLink>\n```\n\n### isActive: func\n\n一种添加额外逻辑以确定链接是否处于活动状态的功能。如果您要做的事情不仅仅是验证链接的路径名是否与当前URL的路径名匹配，则应使用此选项。\n```jsx harmony\n<NavLink\n  to=\"/events/123\"\n  isActive={(match, location) => {\n    if (!match) {\n      return false;\n    }\n\n    // only consider an event active if its event id is an odd number\n    const eventID = parseInt(match.params.eventID);\n    return !isNaN(eventID) && eventID % 2 === 1;\n  }}\n>\n  Event 123\n</NavLink>\n```\n\n### location: object\nisActive比较当前历史记录位置（通常是当前浏览器URL）。要与其他位置进行比较，可以传递一个位置。\n\n### aria-current: string\n\n活动链接上使用的aria-current属性的值。可用值为：\n- \"page\": 用于指示一组分页链接中的链接。\n- \"step\": 用于指示基于步骤的过程的步骤指示器中的链接\n- \"location\": 用于指示视觉上突出显示的图像作为流程图的当前组成部分。\n- \"date\": 用于指示日历中的当前日期。\n- \"time\": 用于指示时间表中的当前时间。\n- \"true\": 用于指示NavLink是否处于活动状态\n默认为“page”。\n\n基于WAI-ARIA 1.1规范\n\n\n\n","source":"_posts/react_router/Api/NavLink.md","raw":"`<Link>`的特殊版本，当它与当前URL匹配时，它将为rendered的元素添加样式属性。\n```jsx harmony\n<NavLink to=\"/about\">About</NavLink>\n```\n\n### activeClassName: string\n元素处于active状态时提供的类。默认给定的类是active的。这将与className prop一起加入。\n```jsx harmony\n<NavLink to=\"/faq\" activeClassName=\"selected\">\n  FAQs\n</NavLink>\n```\n\n### activeStyle: object\n元素处于活动状态时应用于元素的样式。\n```jsx harmony\n<NavLink\n  to=\"/faq\"\n  activeStyle={{\n    fontWeight: \"bold\",\n    color: \"red\"\n  }}\n>\n  FAQs\n</NavLink>\n```\n### exact: bool\n如果为true，则仅在位置完全匹配时才应用活动的类/样式。\n```jsx harmony\n<NavLink exact to=\"/profile\">\n  Profile\n</NavLink>\n```\n### strict: bool\n如果为true，则在确定位置是否与当前URL匹配时，将考虑位置路径名上的斜杠。有关更多信息，请参见`<Route strict>`文档。\n```jsx harmony\n<NavLink strict to=\"/events/\">\n  Events\n</NavLink>\n```\n\n### isActive: func\n\n一种添加额外逻辑以确定链接是否处于活动状态的功能。如果您要做的事情不仅仅是验证链接的路径名是否与当前URL的路径名匹配，则应使用此选项。\n```jsx harmony\n<NavLink\n  to=\"/events/123\"\n  isActive={(match, location) => {\n    if (!match) {\n      return false;\n    }\n\n    // only consider an event active if its event id is an odd number\n    const eventID = parseInt(match.params.eventID);\n    return !isNaN(eventID) && eventID % 2 === 1;\n  }}\n>\n  Event 123\n</NavLink>\n```\n\n### location: object\nisActive比较当前历史记录位置（通常是当前浏览器URL）。要与其他位置进行比较，可以传递一个位置。\n\n### aria-current: string\n\n活动链接上使用的aria-current属性的值。可用值为：\n- \"page\": 用于指示一组分页链接中的链接。\n- \"step\": 用于指示基于步骤的过程的步骤指示器中的链接\n- \"location\": 用于指示视觉上突出显示的图像作为流程图的当前组成部分。\n- \"date\": 用于指示日历中的当前日期。\n- \"time\": 用于指示时间表中的当前时间。\n- \"true\": 用于指示NavLink是否处于活动状态\n默认为“page”。\n\n基于WAI-ARIA 1.1规范\n\n\n\n","slug":"react_router/Api/NavLink","published":1,"date":"2020-01-13T06:59:03.209Z","updated":"2020-01-13T07:30:33.097Z","title":"react_router/Api/NavLink","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnw0005egco6sis3vc2","content":"<p><code>&lt;Link&gt;</code>的特殊版本，当它与当前URL匹配时，它将为rendered的元素添加样式属性。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"activeClassName-string\"><a href=\"#activeClassName-string\" class=\"headerlink\" title=\"activeClassName: string\"></a>activeClassName: string</h3><p>元素处于active状态时提供的类。默认给定的类是active的。这将与className prop一起加入。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink to=<span class=\"string\">\"/faq\"</span> activeClassName=<span class=\"string\">\"selected\"</span>&gt;</span><br><span class=\"line\">  FAQs</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"activeStyle-object\"><a href=\"#activeStyle-object\" class=\"headerlink\" title=\"activeStyle: object\"></a>activeStyle: object</h3><p>元素处于活动状态时应用于元素的样式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink</span><br><span class=\"line\">  to=<span class=\"string\">\"/faq\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123;</span><br><span class=\"line\">    fontWeight: <span class=\"string\">\"bold\"</span>,</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span></span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  FAQs</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"exact-bool\"><a href=\"#exact-bool\" class=\"headerlink\" title=\"exact: bool\"></a>exact: bool</h3><p>如果为true，则仅在位置完全匹配时才应用活动的类/样式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink exact to=<span class=\"string\">\"/profile\"</span>&gt;</span><br><span class=\"line\">  Profile</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"strict-bool\"><a href=\"#strict-bool\" class=\"headerlink\" title=\"strict: bool\"></a>strict: bool</h3><p>如果为true，则在确定位置是否与当前URL匹配时，将考虑位置路径名上的斜杠。有关更多信息，请参见<code>&lt;Route strict&gt;</code>文档。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink strict to=<span class=\"string\">\"/events/\"</span>&gt;</span><br><span class=\"line\">  Events</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isActive-func\"><a href=\"#isActive-func\" class=\"headerlink\" title=\"isActive: func\"></a>isActive: func</h3><p>一种添加额外逻辑以确定链接是否处于活动状态的功能。如果您要做的事情不仅仅是验证链接的路径名是否与当前URL的路径名匹配，则应使用此选项。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink</span><br><span class=\"line\">  to=<span class=\"string\">\"/events/123\"</span></span><br><span class=\"line\">  isActive=&#123;(match, location) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// only consider an event active if its event id is an odd number</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventID = <span class=\"built_in\">parseInt</span>(match.params.eventID);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(eventID) &amp;&amp; eventID % <span class=\"number\">2</span> === <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  Event <span class=\"number\">123</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>isActive比较当前历史记录位置（通常是当前浏览器URL）。要与其他位置进行比较，可以传递一个位置。</p>\n<h3 id=\"aria-current-string\"><a href=\"#aria-current-string\" class=\"headerlink\" title=\"aria-current: string\"></a>aria-current: string</h3><p>活动链接上使用的aria-current属性的值。可用值为：</p>\n<ul>\n<li>“page”: 用于指示一组分页链接中的链接。</li>\n<li>“step”: 用于指示基于步骤的过程的步骤指示器中的链接</li>\n<li>“location”: 用于指示视觉上突出显示的图像作为流程图的当前组成部分。</li>\n<li>“date”: 用于指示日历中的当前日期。</li>\n<li>“time”: 用于指示时间表中的当前时间。</li>\n<li>“true”: 用于指示NavLink是否处于活动状态<br>默认为“page”。</li>\n</ul>\n<p>基于WAI-ARIA 1.1规范</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>&lt;Link&gt;</code>的特殊版本，当它与当前URL匹配时，它将为rendered的元素添加样式属性。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"activeClassName-string\"><a href=\"#activeClassName-string\" class=\"headerlink\" title=\"activeClassName: string\"></a>activeClassName: string</h3><p>元素处于active状态时提供的类。默认给定的类是active的。这将与className prop一起加入。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink to=<span class=\"string\">\"/faq\"</span> activeClassName=<span class=\"string\">\"selected\"</span>&gt;</span><br><span class=\"line\">  FAQs</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"activeStyle-object\"><a href=\"#activeStyle-object\" class=\"headerlink\" title=\"activeStyle: object\"></a>activeStyle: object</h3><p>元素处于活动状态时应用于元素的样式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink</span><br><span class=\"line\">  to=<span class=\"string\">\"/faq\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123;</span><br><span class=\"line\">    fontWeight: <span class=\"string\">\"bold\"</span>,</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span></span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  FAQs</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"exact-bool\"><a href=\"#exact-bool\" class=\"headerlink\" title=\"exact: bool\"></a>exact: bool</h3><p>如果为true，则仅在位置完全匹配时才应用活动的类/样式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink exact to=<span class=\"string\">\"/profile\"</span>&gt;</span><br><span class=\"line\">  Profile</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"strict-bool\"><a href=\"#strict-bool\" class=\"headerlink\" title=\"strict: bool\"></a>strict: bool</h3><p>如果为true，则在确定位置是否与当前URL匹配时，将考虑位置路径名上的斜杠。有关更多信息，请参见<code>&lt;Route strict&gt;</code>文档。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink strict to=<span class=\"string\">\"/events/\"</span>&gt;</span><br><span class=\"line\">  Events</span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isActive-func\"><a href=\"#isActive-func\" class=\"headerlink\" title=\"isActive: func\"></a>isActive: func</h3><p>一种添加额外逻辑以确定链接是否处于活动状态的功能。如果您要做的事情不仅仅是验证链接的路径名是否与当前URL的路径名匹配，则应使用此选项。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavLink</span><br><span class=\"line\">  to=<span class=\"string\">\"/events/123\"</span></span><br><span class=\"line\">  isActive=&#123;(match, location) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// only consider an event active if its event id is an odd number</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventID = <span class=\"built_in\">parseInt</span>(match.params.eventID);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(eventID) &amp;&amp; eventID % <span class=\"number\">2</span> === <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  Event <span class=\"number\">123</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/NavLink&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>isActive比较当前历史记录位置（通常是当前浏览器URL）。要与其他位置进行比较，可以传递一个位置。</p>\n<h3 id=\"aria-current-string\"><a href=\"#aria-current-string\" class=\"headerlink\" title=\"aria-current: string\"></a>aria-current: string</h3><p>活动链接上使用的aria-current属性的值。可用值为：</p>\n<ul>\n<li>“page”: 用于指示一组分页链接中的链接。</li>\n<li>“step”: 用于指示基于步骤的过程的步骤指示器中的链接</li>\n<li>“location”: 用于指示视觉上突出显示的图像作为流程图的当前组成部分。</li>\n<li>“date”: 用于指示日历中的当前日期。</li>\n<li>“time”: 用于指示时间表中的当前时间。</li>\n<li>“true”: 用于指示NavLink是否处于活动状态<br>默认为“page”。</li>\n</ul>\n<p>基于WAI-ARIA 1.1规范</p>\n"},{"_content":"Re-exported from core Prompt。\n","source":"_posts/react_router/Api/Prompt.md","raw":"Re-exported from core Prompt。\n","slug":"react_router/Api/Prompt","published":1,"date":"2020-01-13T08:24:27.980Z","updated":"2020-01-13T08:25:08.197Z","title":"react_router/Api/Prompt","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnw0006egco78tbas4o","content":"<p>Re-exported from core Prompt。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Re-exported from core Prompt。</p>\n"},{"_content":"永远不会更改位置的`<Router>`。\n\n当用户实际上没有四处点击时，这在服务器端渲染方案中很有用，因此位置永远不会发生实际变化。因此，名称为：静态。当您只需要插入一个位置并在渲染输出中进行断言时，它在简单测试中也很有用。\n\n这是一个示例节点服务器，它为`<Redirect>`发送302状态代码，并为其他请求发送常规HTML：\n```jsx harmony\nimport http from \"http\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router\";\n\nhttp\n  .createServer((req, res) => {\n    // This context object contains the results of the render\n    const context = {};\n\n    const html = ReactDOMServer.renderToString(\n      <StaticRouter location={req.url} context={context}>\n        <App />\n      </StaticRouter>\n    );\n\n    // context.url will contain the URL to redirect to if a <Redirect> was used\n    if (context.url) {\n      res.writeHead(302, {\n        Location: context.url\n      });\n      res.end();\n    } else {\n      res.write(html);\n      res.end();\n    }\n  })\n  .listen(3000);\n```\n\n### basename: string\n所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<StaticRouter basename=\"/calendar\">\n  <Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n</StaticRouter>\n```\n\n### location: string\n服务器收到的URL，可能是节点服务器上的req.url。\n```jsx harmony\n<StaticRouter location={req.url}>\n  <App />\n</StaticRouter>\n\n```\n\n### location: object\n类似的位置对象{ pathname, search, hash, state }\n```jsx harmony\n<StaticRouter location={{ pathname: \"/bubblegum\" }}>\n  <App />\n</StaticRouter>\n```\n\n### context: object\n一个普通的JavaScript对象。在渲染期间，组件可以向对象添加属性以存储有关渲染的信息。\n\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n```jsx harmony\nconst context = {}\n<StaticRouter context={context}>\n  <App />\n</StaticRouter>\n```\n\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n\n渲染后，这些属性可用于配置服务器的响应。\n```jsx harmony\nif (context.status === \"404\") {\n  // ...\n}\n```\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n\n\n### children: node\n要渲染的子元素。\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n\n","source":"_posts/react_router/Api/StaticRouter.md","raw":"永远不会更改位置的`<Router>`。\n\n当用户实际上没有四处点击时，这在服务器端渲染方案中很有用，因此位置永远不会发生实际变化。因此，名称为：静态。当您只需要插入一个位置并在渲染输出中进行断言时，它在简单测试中也很有用。\n\n这是一个示例节点服务器，它为`<Redirect>`发送302状态代码，并为其他请求发送常规HTML：\n```jsx harmony\nimport http from \"http\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router\";\n\nhttp\n  .createServer((req, res) => {\n    // This context object contains the results of the render\n    const context = {};\n\n    const html = ReactDOMServer.renderToString(\n      <StaticRouter location={req.url} context={context}>\n        <App />\n      </StaticRouter>\n    );\n\n    // context.url will contain the URL to redirect to if a <Redirect> was used\n    if (context.url) {\n      res.writeHead(302, {\n        Location: context.url\n      });\n      res.end();\n    } else {\n      res.write(html);\n      res.end();\n    }\n  })\n  .listen(3000);\n```\n\n### basename: string\n所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。\n```jsx harmony\n<StaticRouter basename=\"/calendar\">\n  <Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n</StaticRouter>\n```\n\n### location: string\n服务器收到的URL，可能是节点服务器上的req.url。\n```jsx harmony\n<StaticRouter location={req.url}>\n  <App />\n</StaticRouter>\n\n```\n\n### location: object\n类似的位置对象{ pathname, search, hash, state }\n```jsx harmony\n<StaticRouter location={{ pathname: \"/bubblegum\" }}>\n  <App />\n</StaticRouter>\n```\n\n### context: object\n一个普通的JavaScript对象。在渲染期间，组件可以向对象添加属性以存储有关渲染的信息。\n\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n```jsx harmony\nconst context = {}\n<StaticRouter context={context}>\n  <App />\n</StaticRouter>\n```\n\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n\n渲染后，这些属性可用于配置服务器的响应。\n```jsx harmony\nif (context.status === \"404\") {\n  // ...\n}\n```\n当`<Route>`匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。\n\n\n### children: node\n要渲染的子元素。\n注意：在React <16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的`<div>`中。\n\n","slug":"react_router/Api/StaticRouter","published":1,"date":"2020-01-13T08:09:32.682Z","updated":"2020-01-13T08:19:14.079Z","title":"react_router/Api/StaticRouter","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnx0007egco1ry6fkd6","content":"<p>永远不会更改位置的<code>&lt;Router&gt;</code>。</p>\n<p>当用户实际上没有四处点击时，这在服务器端渲染方案中很有用，因此位置永远不会发生实际变化。因此，名称为：静态。当您只需要插入一个位置并在渲染输出中进行断言时，它在简单测试中也很有用。</p>\n<p>这是一个示例节点服务器，它为<code>&lt;Redirect&gt;</code>发送302状态代码，并为其他请求发送常规HTML：</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">\"http\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOMServer <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/server\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This context object contains the results of the render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = ReactDOMServer.renderToString(</span><br><span class=\"line\">      &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used</span></span><br><span class=\"line\"><span class=\"regexp\">    if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.writeHead(302, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        Location: context.url</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.write(html);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  .listen(3000);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter basename=<span class=\"string\">\"/calendar\"</span>&gt;</span><br><span class=\"line\">  &lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"/calendar/today\"&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-string\"><a href=\"#location-string\" class=\"headerlink\" title=\"location: string\"></a>location: string</h3><p>服务器收到的URL，可能是节点服务器上的req.url。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter location=&#123;req.url&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>类似的位置对象{ pathname, search, hash, state }</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter location=&#123;&#123; <span class=\"attr\">pathname</span>: <span class=\"string\">\"/bubblegum\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"context-object\"><a href=\"#context-object\" class=\"headerlink\" title=\"context: object\"></a>context: object</h3><p>一个普通的JavaScript对象。在渲染期间，组件可以向对象添加属性以存储有关渲染的信息。</p>\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;&#125;</span><br><span class=\"line\">&lt;StaticRouter context=&#123;context&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<p>渲染后，这些属性可用于配置服务器的响应。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (context.status === <span class=\"string\">\"404\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。<br>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>永远不会更改位置的<code>&lt;Router&gt;</code>。</p>\n<p>当用户实际上没有四处点击时，这在服务器端渲染方案中很有用，因此位置永远不会发生实际变化。因此，名称为：静态。当您只需要插入一个位置并在渲染输出中进行断言时，它在简单测试中也很有用。</p>\n<p>这是一个示例节点服务器，它为<code>&lt;Redirect&gt;</code>发送302状态代码，并为其他请求发送常规HTML：</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">\"http\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOMServer <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/server\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This context object contains the results of the render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = ReactDOMServer.renderToString(</span><br><span class=\"line\">      &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used</span></span><br><span class=\"line\"><span class=\"regexp\">    if (context.url) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.writeHead(302, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        Location: context.url</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      res.write(html);</span></span><br><span class=\"line\"><span class=\"regexp\">      res.end();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  .listen(3000);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basename-string\"><a href=\"#basename-string\" class=\"headerlink\" title=\"basename: string\"></a>basename: string</h3><p>所有位置的基本URL。格式正确的基本名称应以斜杠开头，但不能以斜杠结尾。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter basename=<span class=\"string\">\"/calendar\"</span>&gt;</span><br><span class=\"line\">  &lt;Link to=<span class=\"string\">\"/today\"</span>/&gt; <span class=\"comment\">// renders &lt;a href=\"/calendar/today\"&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-string\"><a href=\"#location-string\" class=\"headerlink\" title=\"location: string\"></a>location: string</h3><p>服务器收到的URL，可能是节点服务器上的req.url。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter location=&#123;req.url&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-object\"><a href=\"#location-object\" class=\"headerlink\" title=\"location: object\"></a>location: object</h3><p>类似的位置对象{ pathname, search, hash, state }</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaticRouter location=&#123;&#123; <span class=\"attr\">pathname</span>: <span class=\"string\">\"/bubblegum\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"context-object\"><a href=\"#context-object\" class=\"headerlink\" title=\"context: object\"></a>context: object</h3><p>一个普通的JavaScript对象。在渲染期间，组件可以向对象添加属性以存储有关渲染的信息。</p>\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;&#125;</span><br><span class=\"line\">&lt;StaticRouter context=&#123;context&#125;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<p>渲染后，这些属性可用于配置服务器的响应。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (context.status === <span class=\"string\">\"404\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>&lt;Route&gt;</code>匹配时，它将把上下文对象传递给它作为staticContext属性呈现的组件。请查看服务器渲染指南，以获取有关如何自行执行此操作的更多信息。</p>\n<h3 id=\"children-node\"><a href=\"#children-node\" class=\"headerlink\" title=\"children: node\"></a>children: node</h3><p>要渲染的子元素。<br>注意：在React &lt;16上，您必须使用单个子元素，因为render方法不能返回多个元素。如果需要多个元素，则可以尝试将它们包装在额外的<code>&lt;div&gt;</code>中。</p>\n"},{"_content":"匹配对象包含有关`<Route path>`如何与URL匹配的信息。匹配对象包含以下属性：\n- params —— (object) Key/value对从 路径的动态段对应的URL解析\n- isExact —— (boolean)true 如果整个URL都匹配（没有结尾字符）\n- path —— (string) 用于匹配的路径模式。用于构建嵌套的`<Route>`\n- url —— (string) URL的匹配部分。对于构建嵌套的`<Link>`有用\n\n您将可以在各个地方匹配对象：\n\n- Route component as this.props.match\n- Route render as ({ match }) => ()\n- Route children as ({ match }) => ()\n- withRouter as this.props.match\n- matchPath as the return value\n\n如果路线没有路径，因此始终匹配，则将获得最接近的父项匹配项。路由器也是如此。\n### null matches\n\n即使子路径的路径与当前位置不匹配，使用子项道具的`<Route>`也会调用其子函数。在这种情况下，匹配将为空。能够在匹配时呈现`<Route>`的内容可能会很有用，但是这种情况会带来一些挑战。\n“解析” URL的默认方法是将match.url字符串连接到“相对”路径。\n```jsx harmony\nlet path = `${match.url}/relative-path`;\n```\n如果在匹配为null时尝试执行此操作，则最终将出现TypeError。这意味着在使用子道具时尝试在`<Route>`内部加入“相对”路径是不安全的。\n\n当在生成空匹配对象的`<Route>`中使用无路径`<Route>`时，会发生类似但更微妙的情况。\n```jsx harmony\n// location.pathname = '/matches'\n<Route path=\"/does-not-match\"\n  children={({ match }) => (\n    // match === null\n    <Route\n      render={({ match: pathlessMatch }) => (\n        // pathlessMatch === ???\n      )}\n    />\n  )}\n/>\n```\n无路径`<Route>`从其父级继承其match对象。如果其父匹配项为null，则其匹配项也将为null。这意味着a）任何子级路由/链接都必须是绝对的，因为没有父级可以解析，并且b）父级匹配可以为null的无路径路由将需要使用子级prop进行渲染。\n","source":"_posts/react_router/Api/match.md","raw":"匹配对象包含有关`<Route path>`如何与URL匹配的信息。匹配对象包含以下属性：\n- params —— (object) Key/value对从 路径的动态段对应的URL解析\n- isExact —— (boolean)true 如果整个URL都匹配（没有结尾字符）\n- path —— (string) 用于匹配的路径模式。用于构建嵌套的`<Route>`\n- url —— (string) URL的匹配部分。对于构建嵌套的`<Link>`有用\n\n您将可以在各个地方匹配对象：\n\n- Route component as this.props.match\n- Route render as ({ match }) => ()\n- Route children as ({ match }) => ()\n- withRouter as this.props.match\n- matchPath as the return value\n\n如果路线没有路径，因此始终匹配，则将获得最接近的父项匹配项。路由器也是如此。\n### null matches\n\n即使子路径的路径与当前位置不匹配，使用子项道具的`<Route>`也会调用其子函数。在这种情况下，匹配将为空。能够在匹配时呈现`<Route>`的内容可能会很有用，但是这种情况会带来一些挑战。\n“解析” URL的默认方法是将match.url字符串连接到“相对”路径。\n```jsx harmony\nlet path = `${match.url}/relative-path`;\n```\n如果在匹配为null时尝试执行此操作，则最终将出现TypeError。这意味着在使用子道具时尝试在`<Route>`内部加入“相对”路径是不安全的。\n\n当在生成空匹配对象的`<Route>`中使用无路径`<Route>`时，会发生类似但更微妙的情况。\n```jsx harmony\n// location.pathname = '/matches'\n<Route path=\"/does-not-match\"\n  children={({ match }) => (\n    // match === null\n    <Route\n      render={({ match: pathlessMatch }) => (\n        // pathlessMatch === ???\n      )}\n    />\n  )}\n/>\n```\n无路径`<Route>`从其父级继承其match对象。如果其父匹配项为null，则其匹配项也将为null。这意味着a）任何子级路由/链接都必须是绝对的，因为没有父级可以解析，并且b）父级匹配可以为null的无路径路由将需要使用子级prop进行渲染。\n","slug":"react_router/Api/match","published":1,"date":"2020-01-13T07:49:34.704Z","updated":"2020-01-13T08:08:00.828Z","title":"react_router/Api/match","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpny0008egco5imd83bo","content":"<p>匹配对象包含有关<code>&lt;Route path&gt;</code>如何与URL匹配的信息。匹配对象包含以下属性：</p>\n<ul>\n<li>params —— (object) Key/value对从 路径的动态段对应的URL解析</li>\n<li>isExact —— (boolean)true 如果整个URL都匹配（没有结尾字符）</li>\n<li>path —— (string) 用于匹配的路径模式。用于构建嵌套的<code>&lt;Route&gt;</code></li>\n<li>url —— (string) URL的匹配部分。对于构建嵌套的<code>&lt;Link&gt;</code>有用</li>\n</ul>\n<p>您将可以在各个地方匹配对象：</p>\n<ul>\n<li>Route component as this.props.match</li>\n<li>Route render as ({ match }) =&gt; ()</li>\n<li>Route children as ({ match }) =&gt; ()</li>\n<li>withRouter as this.props.match</li>\n<li>matchPath as the return value</li>\n</ul>\n<p>如果路线没有路径，因此始终匹配，则将获得最接近的父项匹配项。路由器也是如此。</p>\n<h3 id=\"null-matches\"><a href=\"#null-matches\" class=\"headerlink\" title=\"null matches\"></a>null matches</h3><p>即使子路径的路径与当前位置不匹配，使用子项道具的<code>&lt;Route&gt;</code>也会调用其子函数。在这种情况下，匹配将为空。能够在匹配时呈现<code>&lt;Route&gt;</code>的内容可能会很有用，但是这种情况会带来一些挑战。<br>“解析” URL的默认方法是将match.url字符串连接到“相对”路径。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;match.url&#125;</span>/relative-path`</span>;</span><br></pre></td></tr></table></figure>\n<p>如果在匹配为null时尝试执行此操作，则最终将出现TypeError。这意味着在使用子道具时尝试在<code>&lt;Route&gt;</code>内部加入“相对”路径是不安全的。</p>\n<p>当在生成空匹配对象的<code>&lt;Route&gt;</code>中使用无路径<code>&lt;Route&gt;</code>时，会发生类似但更微妙的情况。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// location.pathname = '/matches'</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/does-not-match\"</span></span><br><span class=\"line\">  children=&#123;(&#123; match &#125;) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// match === null</span></span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; <span class=\"attr\">match</span>: pathlessMatch &#125;) =&gt; (</span><br><span class=\"line\">        <span class=\"comment\">// pathlessMatch === ???</span></span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>无路径<code>&lt;Route&gt;</code>从其父级继承其match对象。如果其父匹配项为null，则其匹配项也将为null。这意味着a）任何子级路由/链接都必须是绝对的，因为没有父级可以解析，并且b）父级匹配可以为null的无路径路由将需要使用子级prop进行渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>匹配对象包含有关<code>&lt;Route path&gt;</code>如何与URL匹配的信息。匹配对象包含以下属性：</p>\n<ul>\n<li>params —— (object) Key/value对从 路径的动态段对应的URL解析</li>\n<li>isExact —— (boolean)true 如果整个URL都匹配（没有结尾字符）</li>\n<li>path —— (string) 用于匹配的路径模式。用于构建嵌套的<code>&lt;Route&gt;</code></li>\n<li>url —— (string) URL的匹配部分。对于构建嵌套的<code>&lt;Link&gt;</code>有用</li>\n</ul>\n<p>您将可以在各个地方匹配对象：</p>\n<ul>\n<li>Route component as this.props.match</li>\n<li>Route render as ({ match }) =&gt; ()</li>\n<li>Route children as ({ match }) =&gt; ()</li>\n<li>withRouter as this.props.match</li>\n<li>matchPath as the return value</li>\n</ul>\n<p>如果路线没有路径，因此始终匹配，则将获得最接近的父项匹配项。路由器也是如此。</p>\n<h3 id=\"null-matches\"><a href=\"#null-matches\" class=\"headerlink\" title=\"null matches\"></a>null matches</h3><p>即使子路径的路径与当前位置不匹配，使用子项道具的<code>&lt;Route&gt;</code>也会调用其子函数。在这种情况下，匹配将为空。能够在匹配时呈现<code>&lt;Route&gt;</code>的内容可能会很有用，但是这种情况会带来一些挑战。<br>“解析” URL的默认方法是将match.url字符串连接到“相对”路径。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;match.url&#125;</span>/relative-path`</span>;</span><br></pre></td></tr></table></figure>\n<p>如果在匹配为null时尝试执行此操作，则最终将出现TypeError。这意味着在使用子道具时尝试在<code>&lt;Route&gt;</code>内部加入“相对”路径是不安全的。</p>\n<p>当在生成空匹配对象的<code>&lt;Route&gt;</code>中使用无路径<code>&lt;Route&gt;</code>时，会发生类似但更微妙的情况。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// location.pathname = '/matches'</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/does-not-match\"</span></span><br><span class=\"line\">  children=&#123;(&#123; match &#125;) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// match === null</span></span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; <span class=\"attr\">match</span>: pathlessMatch &#125;) =&gt; (</span><br><span class=\"line\">        <span class=\"comment\">// pathlessMatch === ???</span></span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>无路径<code>&lt;Route&gt;</code>从其父级继承其match对象。如果其父匹配项为null，则其匹配项也将为null。这意味着a）任何子级路由/链接都必须是绝对的，因为没有父级可以解析，并且b）父级匹配可以为null的无路径路由将需要使用子级prop进行渲染。</p>\n"},{"_content":"这使您可以使用`<Route>`使用的相同匹配代码，但不在正常渲染周期之内，例如在服务器上渲染之前收集数据依赖项。\n```jsx harmony\nimport { matchPath } from \"react-router\";\n\nconst match = matchPath(\"/users/123\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: false\n});\n```\n### pathname\n第一个参数是您要匹配的路径名。如果您在带有Node.js的服务器上使用它，则为req.path\n\n### props\n第二个参数是要匹配的道具，它们与Route接受的匹配道具相同。它也可以是字符串或字符串数​​组，作为{path}的快捷方式。\n```jsx harmony\n{\n  path, // like /users/:id; either a single string or an array of strings\n  strict, // optional, defaults to false\n  exact  // optional, defaults to false\n}\n```\n\n### returns\n当提供的路径名与路径属性匹配时，它将返回一个对象。\n```jsx harmony\nmatchPath(\"/users/2\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: true\n});\n//  {\n//    isExact: true\n//    params: {\n//        id: \"2\"\n//    }\n//    path: \"/users/:id\"\n//    url: \"/users/2\"\n//  }\n```\n如果提供的路径名与路径属性不匹配，则返回null。\n```jsx harmony\nmatchPath(\"/users\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: true\n});\n\n//  null\n```\n\n","source":"_posts/react_router/Api/matchPath.md","raw":"这使您可以使用`<Route>`使用的相同匹配代码，但不在正常渲染周期之内，例如在服务器上渲染之前收集数据依赖项。\n```jsx harmony\nimport { matchPath } from \"react-router\";\n\nconst match = matchPath(\"/users/123\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: false\n});\n```\n### pathname\n第一个参数是您要匹配的路径名。如果您在带有Node.js的服务器上使用它，则为req.path\n\n### props\n第二个参数是要匹配的道具，它们与Route接受的匹配道具相同。它也可以是字符串或字符串数​​组，作为{path}的快捷方式。\n```jsx harmony\n{\n  path, // like /users/:id; either a single string or an array of strings\n  strict, // optional, defaults to false\n  exact  // optional, defaults to false\n}\n```\n\n### returns\n当提供的路径名与路径属性匹配时，它将返回一个对象。\n```jsx harmony\nmatchPath(\"/users/2\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: true\n});\n//  {\n//    isExact: true\n//    params: {\n//        id: \"2\"\n//    }\n//    path: \"/users/:id\"\n//    url: \"/users/2\"\n//  }\n```\n如果提供的路径名与路径属性不匹配，则返回null。\n```jsx harmony\nmatchPath(\"/users\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: true\n});\n\n//  null\n```\n\n","slug":"react_router/Api/matchPath","published":1,"date":"2020-01-13T07:30:00.292Z","updated":"2020-01-13T07:35:17.653Z","title":"react_router/Api/matchPath","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnz0009egcoapa47rcs","content":"<p>这使您可以使用<code>&lt;Route&gt;</code>使用的相同匹配代码，但不在正常渲染周期之内，例如在服务器上渲染之前收集数据依赖项。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; matchPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> match = matchPath(<span class=\"string\">\"/users/123\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"pathname\"><a href=\"#pathname\" class=\"headerlink\" title=\"pathname\"></a>pathname</h3><p>第一个参数是您要匹配的路径名。如果您在带有Node.js的服务器上使用它，则为req.path</p>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><p>第二个参数是要匹配的道具，它们与Route接受的匹配道具相同。它也可以是字符串或字符串数​​组，作为{path}的快捷方式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path, <span class=\"comment\">// like /users/:id; either a single string or an array of strings</span></span><br><span class=\"line\">  strict, <span class=\"comment\">// optional, defaults to false</span></span><br><span class=\"line\">  exact  <span class=\"comment\">// optional, defaults to false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"returns\"><a href=\"#returns\" class=\"headerlink\" title=\"returns\"></a>returns</h3><p>当提供的路径名与路径属性匹配时，它将返回一个对象。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matchPath(<span class=\"string\">\"/users/2\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    isExact: true</span></span><br><span class=\"line\"><span class=\"comment\">//    params: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        id: \"2\"</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    path: \"/users/:id\"</span></span><br><span class=\"line\"><span class=\"comment\">//    url: \"/users/2\"</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果提供的路径名与路径属性不匹配，则返回null。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matchPath(<span class=\"string\">\"/users\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  null</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>这使您可以使用<code>&lt;Route&gt;</code>使用的相同匹配代码，但不在正常渲染周期之内，例如在服务器上渲染之前收集数据依赖项。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; matchPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> match = matchPath(<span class=\"string\">\"/users/123\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"pathname\"><a href=\"#pathname\" class=\"headerlink\" title=\"pathname\"></a>pathname</h3><p>第一个参数是您要匹配的路径名。如果您在带有Node.js的服务器上使用它，则为req.path</p>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><p>第二个参数是要匹配的道具，它们与Route接受的匹配道具相同。它也可以是字符串或字符串数​​组，作为{path}的快捷方式。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path, <span class=\"comment\">// like /users/:id; either a single string or an array of strings</span></span><br><span class=\"line\">  strict, <span class=\"comment\">// optional, defaults to false</span></span><br><span class=\"line\">  exact  <span class=\"comment\">// optional, defaults to false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"returns\"><a href=\"#returns\" class=\"headerlink\" title=\"returns\"></a>returns</h3><p>当提供的路径名与路径属性匹配时，它将返回一个对象。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matchPath(<span class=\"string\">\"/users/2\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    isExact: true</span></span><br><span class=\"line\"><span class=\"comment\">//    params: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        id: \"2\"</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    path: \"/users/:id\"</span></span><br><span class=\"line\"><span class=\"comment\">//    url: \"/users/2\"</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果提供的路径名与路径属性不匹配，则返回null。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matchPath(<span class=\"string\">\"/users\"</span>, &#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/users/:id\"</span>,</span><br><span class=\"line\">  exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  strict: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  null</span></span><br></pre></td></tr></table></figure>\n\n"},{"_content":"您可以通过withRouter高阶组件访问历史对象的属性和最接近的`<Route>`匹配项。每当呈现时，withRouter都会将更新的匹配，位置和历史道具传递给包装的组件。\n```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router\";\n\n// A simple component that shows the pathname of the current location\nclass ShowTheLocation extends React.Component {\n  static propTypes = {\n    match: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { match, location, history } = this.props;\n\n    return <div>You are now at {location.pathname}</div>;\n  }\n}\n\n// Create a new component that is \"connected\" (to borrow redux\n// terminology) to the router.\nconst ShowTheLocationWithRouter = withRouter(ShowTheLocation);\n```\n\n重要的提示\n\nwithRouter不像React Redux的connect那样订阅位置更改以进行状态更改。而是在位置更改后从`<Router>`组件传播出去后重新渲染。这意味着withRouter不会在路由转换时重新呈现，除非其父组件重新呈现。\n\n静态方法和属性\n\n包装组件的所有非特定于反应的静态方法和属性将自动复制到“connected”组件。\n\n### Component.WrappedComponent\n包装的组件在返回的组件上作为静态属性WrappedComponent公开，它可以用于隔离测试组件等。\n```jsx harmony\n// MyComponent.js\nexport default withRouter(MyComponent)\n\n// MyComponent.test.js\nimport MyComponent from './MyComponent'\nrender(<MyComponent.WrappedComponent location={{...}} ... />)\n```\n\n### wrappedComponentRef: func\n\n该函数将作为ref prop传递给包装的组件。\n\n```jsx harmony\nclass Container extends React.Component {\n  componentDidMount() {\n    this.component.doSomething();\n  }\n\n  render() {\n    return (\n      <MyComponent wrappedComponentRef={c => (this.component = c)} />\n    );\n  }\n}\n```\n","source":"_posts/react_router/Api/withRouter.md","raw":"您可以通过withRouter高阶组件访问历史对象的属性和最接近的`<Route>`匹配项。每当呈现时，withRouter都会将更新的匹配，位置和历史道具传递给包装的组件。\n```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router\";\n\n// A simple component that shows the pathname of the current location\nclass ShowTheLocation extends React.Component {\n  static propTypes = {\n    match: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { match, location, history } = this.props;\n\n    return <div>You are now at {location.pathname}</div>;\n  }\n}\n\n// Create a new component that is \"connected\" (to borrow redux\n// terminology) to the router.\nconst ShowTheLocationWithRouter = withRouter(ShowTheLocation);\n```\n\n重要的提示\n\nwithRouter不像React Redux的connect那样订阅位置更改以进行状态更改。而是在位置更改后从`<Router>`组件传播出去后重新渲染。这意味着withRouter不会在路由转换时重新呈现，除非其父组件重新呈现。\n\n静态方法和属性\n\n包装组件的所有非特定于反应的静态方法和属性将自动复制到“connected”组件。\n\n### Component.WrappedComponent\n包装的组件在返回的组件上作为静态属性WrappedComponent公开，它可以用于隔离测试组件等。\n```jsx harmony\n// MyComponent.js\nexport default withRouter(MyComponent)\n\n// MyComponent.test.js\nimport MyComponent from './MyComponent'\nrender(<MyComponent.WrappedComponent location={{...}} ... />)\n```\n\n### wrappedComponentRef: func\n\n该函数将作为ref prop传递给包装的组件。\n\n```jsx harmony\nclass Container extends React.Component {\n  componentDidMount() {\n    this.component.doSomething();\n  }\n\n  render() {\n    return (\n      <MyComponent wrappedComponentRef={c => (this.component = c)} />\n    );\n  }\n}\n```\n","slug":"react_router/Api/withRouter","published":1,"date":"2020-01-13T07:40:51.739Z","updated":"2020-01-13T07:47:15.104Z","title":"react_router/Api/withRouter","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cbcpnz000aegco5iidfa2y","content":"<p>您可以通过withRouter高阶组件访问历史对象的属性和最接近的<code>&lt;Route&gt;</code>匹配项。每当呈现时，withRouter都会将更新的匹配，位置和历史道具传递给包装的组件。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">\"prop-types\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple component that shows the pathname of the current location</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShowTheLocation</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">    match: PropTypes.object.isRequired,</span><br><span class=\"line\">    location: PropTypes.object.isRequired,</span><br><span class=\"line\">    history: PropTypes.object.isRequired</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; match, location, history &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>You are now at &#123;location.pathname&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a new component that is \"connected\" (to borrow redux</span></span><br><span class=\"line\"><span class=\"comment\">// terminology) to the router.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ShowTheLocationWithRouter = withRouter(ShowTheLocation);</span><br></pre></td></tr></table></figure>\n\n<p>重要的提示</p>\n<p>withRouter不像React Redux的connect那样订阅位置更改以进行状态更改。而是在位置更改后从<code>&lt;Router&gt;</code>组件传播出去后重新渲染。这意味着withRouter不会在路由转换时重新呈现，除非其父组件重新呈现。</p>\n<p>静态方法和属性</p>\n<p>包装组件的所有非特定于反应的静态方法和属性将自动复制到“connected”组件。</p>\n<h3 id=\"Component-WrappedComponent\"><a href=\"#Component-WrappedComponent\" class=\"headerlink\" title=\"Component.WrappedComponent\"></a>Component.WrappedComponent</h3><p>包装的组件在返回的组件上作为静态属性WrappedComponent公开，它可以用于隔离测试组件等。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyComponent.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(MyComponent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyComponent.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent'</span></span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent.WrappedComponent</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;...&#125;&#125;</span> <span class=\"attr\">...</span> /&gt;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wrappedComponentRef-func\"><a href=\"#wrappedComponentRef-func\" class=\"headerlink\" title=\"wrappedComponentRef: func\"></a>wrappedComponentRef: func</h3><p>该函数将作为ref prop传递给包装的组件。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.component.doSomething();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;MyComponent wrappedComponentRef=&#123;c =&gt; (<span class=\"keyword\">this</span>.component = c)&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>您可以通过withRouter高阶组件访问历史对象的属性和最接近的<code>&lt;Route&gt;</code>匹配项。每当呈现时，withRouter都会将更新的匹配，位置和历史道具传递给包装的组件。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">\"prop-types\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple component that shows the pathname of the current location</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShowTheLocation</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">    match: PropTypes.object.isRequired,</span><br><span class=\"line\">    location: PropTypes.object.isRequired,</span><br><span class=\"line\">    history: PropTypes.object.isRequired</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; match, location, history &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>You are now at &#123;location.pathname&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a new component that is \"connected\" (to borrow redux</span></span><br><span class=\"line\"><span class=\"comment\">// terminology) to the router.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ShowTheLocationWithRouter = withRouter(ShowTheLocation);</span><br></pre></td></tr></table></figure>\n\n<p>重要的提示</p>\n<p>withRouter不像React Redux的connect那样订阅位置更改以进行状态更改。而是在位置更改后从<code>&lt;Router&gt;</code>组件传播出去后重新渲染。这意味着withRouter不会在路由转换时重新呈现，除非其父组件重新呈现。</p>\n<p>静态方法和属性</p>\n<p>包装组件的所有非特定于反应的静态方法和属性将自动复制到“connected”组件。</p>\n<h3 id=\"Component-WrappedComponent\"><a href=\"#Component-WrappedComponent\" class=\"headerlink\" title=\"Component.WrappedComponent\"></a>Component.WrappedComponent</h3><p>包装的组件在返回的组件上作为静态属性WrappedComponent公开，它可以用于隔离测试组件等。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyComponent.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(MyComponent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyComponent.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent'</span></span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent.WrappedComponent</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;...&#125;&#125;</span> <span class=\"attr\">...</span> /&gt;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wrappedComponentRef-func\"><a href=\"#wrappedComponentRef-func\" class=\"headerlink\" title=\"wrappedComponentRef: func\"></a>wrappedComponentRef: func</h3><p>该函数将作为ref prop传递给包装的组件。</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.component.doSomething();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;MyComponent wrappedComponentRef=&#123;c =&gt; (<span class=\"keyword\">this</span>.component = c)&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\n// React Router对\n  // 您应该如何解析URL查询字符串。\n   //\n   //  如果您使用简单的key = value查询字符串和\n  // 您不需要支持IE 11，就可以使用\n   //  浏览器的内置URLSearchParams API。\n   //\n   //  如果您的查询字符串包含数组或对象\n    // 语法，您可能需要自带\n   //  查询解析功能。\n\nexport default function QueryParamsExample() {\n  return (\n    <Router>\n      <QueryParamsDemo />\n    </Router>\n  );\n}\n\n// 基于useLocation进行解析的自定义钩子\n   //您的查询字符串。\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction QueryParamsDemo() {\n  let query = useQuery();\n\n  return (\n    <div>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to=\"/account?name=netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Child name={query.get(\"name\")} />\n      </div>\n    </div>\n  );\n}\n\nfunction Child({ name }) {\n  return (\n    <div>\n      {name ? (\n        <h3>\n          The <code>name</code> in the query string is &quot;{name}\n          &quot;\n        </h3>\n      ) : (\n        <h3>There is no name in the query string</h3>\n      )}\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/Animated_Transitions.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\n// React Router对\n  // 您应该如何解析URL查询字符串。\n   //\n   //  如果您使用简单的key = value查询字符串和\n  // 您不需要支持IE 11，就可以使用\n   //  浏览器的内置URLSearchParams API。\n   //\n   //  如果您的查询字符串包含数组或对象\n    // 语法，您可能需要自带\n   //  查询解析功能。\n\nexport default function QueryParamsExample() {\n  return (\n    <Router>\n      <QueryParamsDemo />\n    </Router>\n  );\n}\n\n// 基于useLocation进行解析的自定义钩子\n   //您的查询字符串。\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction QueryParamsDemo() {\n  let query = useQuery();\n\n  return (\n    <div>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to=\"/account?name=netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Child name={query.get(\"name\")} />\n      </div>\n    </div>\n  );\n}\n\nfunction Child({ name }) {\n  return (\n    <div>\n      {name ? (\n        <h3>\n          The <code>name</code> in the query string is &quot;{name}\n          &quot;\n        </h3>\n      ) : (\n        <h3>There is no name in the query string</h3>\n      )}\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/Animated_Transitions","published":1,"date":"2020-01-13T11:02:47.165Z","updated":"2020-01-13T11:04:21.650Z","title":"react_router/examples/Animated_Transitions","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xc0000s0co8fuleuwe","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// React Router对</span></span><br><span class=\"line\">  <span class=\"comment\">// 您应该如何解析URL查询字符串。</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//  如果您使用简单的key = value查询字符串和</span></span><br><span class=\"line\">  <span class=\"comment\">// 您不需要支持IE 11，就可以使用</span></span><br><span class=\"line\">   <span class=\"comment\">//  浏览器的内置URLSearchParams API。</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//  如果您的查询字符串包含数组或对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 语法，您可能需要自带</span></span><br><span class=\"line\">   <span class=\"comment\">//  查询解析功能。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueryParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;QueryParamsDemo /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 基于useLocation进行解析的自定义钩子</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/您的查询字符串。</span></span><br><span class=\"line\"><span class=\"regexp\">function useQuery() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function QueryParamsDemo() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let query = useQuery();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;Accounts&lt;/</span>h2&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=netflix\"</span>&gt;Netflix&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=zillow-group\"</span>&gt;Zillow Group&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=yahoo\"</span>&gt;Yahoo&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=modus-create\"</span>&gt;Modus Create&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Child name=&#123;query.get(\"name\")&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; name &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;name ? (</span><br><span class=\"line\">        &lt;h3&gt;</span><br><span class=\"line\">          The &lt;code&gt;name&lt;<span class=\"regexp\">/code&gt; in the query string is &amp;quot;&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &amp;quot;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h3&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;h3&gt;There is no name <span class=\"keyword\">in</span> the query string&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// React Router对</span></span><br><span class=\"line\">  <span class=\"comment\">// 您应该如何解析URL查询字符串。</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//  如果您使用简单的key = value查询字符串和</span></span><br><span class=\"line\">  <span class=\"comment\">// 您不需要支持IE 11，就可以使用</span></span><br><span class=\"line\">   <span class=\"comment\">//  浏览器的内置URLSearchParams API。</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//  如果您的查询字符串包含数组或对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 语法，您可能需要自带</span></span><br><span class=\"line\">   <span class=\"comment\">//  查询解析功能。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueryParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;QueryParamsDemo /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 基于useLocation进行解析的自定义钩子</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/您的查询字符串。</span></span><br><span class=\"line\"><span class=\"regexp\">function useQuery() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function QueryParamsDemo() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let query = useQuery();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;Accounts&lt;/</span>h2&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=netflix\"</span>&gt;Netflix&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=zillow-group\"</span>&gt;Zillow Group&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=yahoo\"</span>&gt;Yahoo&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=modus-create\"</span>&gt;Modus Create&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Child name=&#123;query.get(\"name\")&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; name &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;name ? (</span><br><span class=\"line\">        &lt;h3&gt;</span><br><span class=\"line\">          The &lt;code&gt;name&lt;<span class=\"regexp\">/code&gt; in the query string is &amp;quot;&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &amp;quot;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h3&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;h3&gt;There is no name <span class=\"keyword\">in</span> the query string&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\n\n/* 您可以将<Switch>中的最后一个<Route>用作一种\n   “后备”路线，以捕获404错误。\n\n关于此示例，有一些有用的注意事项：\n    <Switch>呈现与之匹配的第一个子元素<Route>\n  <Redirect>可以用于将旧URL重定向到新URL\n  <Route path =“ *>始终匹配\n\n\n*/\n\n\nexport default function NoMatchExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/old-match\">Old Match, to be redirected</Link>\n          </li>\n          <li>\n            <Link to=\"/will-match\">Will Match</Link>\n          </li>\n          <li>\n            <Link to=\"/will-not-match\">Will Not Match</Link>\n          </li>\n          <li>\n            <Link to=\"/also/will/not/match\">Also Will Not Match</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/old-match\">\n            <Redirect to=\"/will-match\" />\n          </Route>\n          <Route path=\"/will-match\">\n            <WillMatch />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h3>Home</h3>;\n}\n\nfunction WillMatch() {\n  return <h3>Matched!</h3>;\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/No_Match.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\n\n/* 您可以将<Switch>中的最后一个<Route>用作一种\n   “后备”路线，以捕获404错误。\n\n关于此示例，有一些有用的注意事项：\n    <Switch>呈现与之匹配的第一个子元素<Route>\n  <Redirect>可以用于将旧URL重定向到新URL\n  <Route path =“ *>始终匹配\n\n\n*/\n\n\nexport default function NoMatchExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/old-match\">Old Match, to be redirected</Link>\n          </li>\n          <li>\n            <Link to=\"/will-match\">Will Match</Link>\n          </li>\n          <li>\n            <Link to=\"/will-not-match\">Will Not Match</Link>\n          </li>\n          <li>\n            <Link to=\"/also/will/not/match\">Also Will Not Match</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/old-match\">\n            <Redirect to=\"/will-match\" />\n          </Route>\n          <Route path=\"/will-match\">\n            <WillMatch />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h3>Home</h3>;\n}\n\nfunction WillMatch() {\n  return <h3>Matched!</h3>;\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/No_Match","published":1,"date":"2020-01-13T11:14:52.115Z","updated":"2020-01-13T11:18:17.273Z","title":"react_router/examples/No_Match","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xg0001s0co5okybczb","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Redirect,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 您可以将&lt;Switch&gt;中的最后一个&lt;Route&gt;用作一种</span></span><br><span class=\"line\"><span class=\"comment\">   “后备”路线，以捕获404错误。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">关于此示例，有一些有用的注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;Switch&gt;呈现与之匹配的第一个子元素&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;Redirect&gt;可以用于将旧URL重定向到新URL</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;Route path =“ *&gt;始终匹配</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NoMatchExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/old-match\"</span>&gt;Old Match, to be redirected&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/will-match\"</span>&gt;Will Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/will-not-match\"</span>&gt;Will Not Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/also/will/not/match\"</span>&gt;Also Will Not Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route exact path=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/old-match<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Redirect to=\"</span>/will-match<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/will-match<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;WillMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>*<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Home&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function WillMatch() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Matched!&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function NoMatch() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let location = useLocation();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        No match for &lt;code&gt;&#123;location.pathname&#125;&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Redirect,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 您可以将&lt;Switch&gt;中的最后一个&lt;Route&gt;用作一种</span></span><br><span class=\"line\"><span class=\"comment\">   “后备”路线，以捕获404错误。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">关于此示例，有一些有用的注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;Switch&gt;呈现与之匹配的第一个子元素&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;Redirect&gt;可以用于将旧URL重定向到新URL</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;Route path =“ *&gt;始终匹配</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NoMatchExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/old-match\"</span>&gt;Old Match, to be redirected&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/will-match\"</span>&gt;Will Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/will-not-match\"</span>&gt;Will Not Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/also/will/not/match\"</span>&gt;Also Will Not Match&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Route exact path=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/old-match<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Redirect to=\"</span>/will-match<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>/will-match<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;WillMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Route path=\"</span>*<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;NoMatch /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Home() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Home&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function WillMatch() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Matched!&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function NoMatch() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let location = useLocation();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">        No match for &lt;code&gt;&#123;location.pathname&#125;&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\n\n// 本示例说明如何渲染两个不同的屏幕（或在不同上下文中的同一屏幕）在同一URL上，取决于您到达那里的方式。\n// 点击“精选图片”，然后全屏查看。然后“访问图库”，然后单击颜色。注意URL和组件与以前相同，但现在我们可以看到它们在图库屏幕顶部的模态中。\nexport default function ModalGalleryExample() {\n  return (\n    <Router>\n      <ModalSwitch />\n    </Router>\n  );\n}\n\nfunction ModalSwitch() {\n  let location = useLocation();\n\n  // 当其中一个单击图库链接。“背景”状态是其中之一时我们所在的位置单击图库链接。如果有的话将其用作`<Switch>`的位置，因此//我们在后台显示画廊模态\n  let background = location.state && location.state.background;\n\n  return (\n    <div>\n      <Switch location={background || location}>\n        <Route exact path=\"/\" children={<Home />} />\n        <Route path=\"/gallery\" children={<Gallery />} />\n        <Route path=\"/img/:id\" children={<ImageView />} />\n      </Switch>\n\n      {/* 设置背景页面时显示模式 */}\n      {background && <Route path=\"/img/:id\" children={<Modal />} />}\n    </div>\n  );\n}\n\nconst IMAGES = [\n  { id: 0, title: \"Dark Orchid\", color: \"DarkOrchid\" },\n  { id: 1, title: \"Lime Green\", color: \"LimeGreen\" },\n  { id: 2, title: \"Tomato\", color: \"Tomato\" },\n  { id: 3, title: \"Seven Ate Nine\", color: \"#789\" },\n  { id: 4, title: \"Crimson\", color: \"Crimson\" }\n];\n\nfunction Thumbnail({ color }) {\n  return (\n    <div\n      style={{\n        width: 50,\n        height: 50,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Image({ color }) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: 400,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/gallery\">Visit the Gallery</Link>\n      <h2>Featured Images</h2>\n      <ul>\n        <li>\n          <Link to=\"/img/2\">Tomato</Link>\n        </li>\n        <li>\n          <Link to=\"/img/4\">Crimson</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction Gallery() {\n  let location = useLocation();\n\n  return (\n    <div>\n      {IMAGES.map(i => (\n        <Link\n          key={i.id}\n          to={{\n            pathname: `/img/${i.id}`,\n            // 这是把戏！ 该链接集\n            // the `background` in location state.\n            state: { background: location }\n          }}\n        >\n          <Thumbnail color={i.color} />\n          <p>{i.title}</p>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction ImageView() {\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image color={image.color} />\n    </div>\n  );\n}\n\nfunction Modal() {\n  let history = useHistory();\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return null;\n\n  let back = e => {\n    e.stopPropagation();\n    history.goBack();\n  };\n\n  return (\n    <div\n      onClick={back}\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        background: \"rgba(0, 0, 0, 0.15)\"\n      }}\n    >\n      <div\n        className=\"modal\"\n        style={{\n          position: \"absolute\",\n          background: \"#fff\",\n          top: 25,\n          left: \"10%\",\n          right: \"10%\",\n          padding: 15,\n          border: \"2px solid #444\"\n        }}\n      >\n        <h1>{image.title}</h1>\n        <Image color={image.color} />\n        <button type=\"button\" onClick={back}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/Modal_Gallery.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\n\n// 本示例说明如何渲染两个不同的屏幕（或在不同上下文中的同一屏幕）在同一URL上，取决于您到达那里的方式。\n// 点击“精选图片”，然后全屏查看。然后“访问图库”，然后单击颜色。注意URL和组件与以前相同，但现在我们可以看到它们在图库屏幕顶部的模态中。\nexport default function ModalGalleryExample() {\n  return (\n    <Router>\n      <ModalSwitch />\n    </Router>\n  );\n}\n\nfunction ModalSwitch() {\n  let location = useLocation();\n\n  // 当其中一个单击图库链接。“背景”状态是其中之一时我们所在的位置单击图库链接。如果有的话将其用作`<Switch>`的位置，因此//我们在后台显示画廊模态\n  let background = location.state && location.state.background;\n\n  return (\n    <div>\n      <Switch location={background || location}>\n        <Route exact path=\"/\" children={<Home />} />\n        <Route path=\"/gallery\" children={<Gallery />} />\n        <Route path=\"/img/:id\" children={<ImageView />} />\n      </Switch>\n\n      {/* 设置背景页面时显示模式 */}\n      {background && <Route path=\"/img/:id\" children={<Modal />} />}\n    </div>\n  );\n}\n\nconst IMAGES = [\n  { id: 0, title: \"Dark Orchid\", color: \"DarkOrchid\" },\n  { id: 1, title: \"Lime Green\", color: \"LimeGreen\" },\n  { id: 2, title: \"Tomato\", color: \"Tomato\" },\n  { id: 3, title: \"Seven Ate Nine\", color: \"#789\" },\n  { id: 4, title: \"Crimson\", color: \"Crimson\" }\n];\n\nfunction Thumbnail({ color }) {\n  return (\n    <div\n      style={{\n        width: 50,\n        height: 50,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Image({ color }) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: 400,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/gallery\">Visit the Gallery</Link>\n      <h2>Featured Images</h2>\n      <ul>\n        <li>\n          <Link to=\"/img/2\">Tomato</Link>\n        </li>\n        <li>\n          <Link to=\"/img/4\">Crimson</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction Gallery() {\n  let location = useLocation();\n\n  return (\n    <div>\n      {IMAGES.map(i => (\n        <Link\n          key={i.id}\n          to={{\n            pathname: `/img/${i.id}`,\n            // 这是把戏！ 该链接集\n            // the `background` in location state.\n            state: { background: location }\n          }}\n        >\n          <Thumbnail color={i.color} />\n          <p>{i.title}</p>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction ImageView() {\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image color={image.color} />\n    </div>\n  );\n}\n\nfunction Modal() {\n  let history = useHistory();\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return null;\n\n  let back = e => {\n    e.stopPropagation();\n    history.goBack();\n  };\n\n  return (\n    <div\n      onClick={back}\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        background: \"rgba(0, 0, 0, 0.15)\"\n      }}\n    >\n      <div\n        className=\"modal\"\n        style={{\n          position: \"absolute\",\n          background: \"#fff\",\n          top: 25,\n          left: \"10%\",\n          right: \"10%\",\n          padding: 15,\n          border: \"2px solid #444\"\n        }}\n      >\n        <h1>{image.title}</h1>\n        <Image color={image.color} />\n        <button type=\"button\" onClick={back}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/Modal_Gallery","published":1,"date":"2020-01-13T10:52:52.158Z","updated":"2020-01-13T10:58:45.726Z","title":"react_router/examples/Modal_Gallery","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xi0002s0co6cyr6du6","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useHistory,</span><br><span class=\"line\">  useLocation,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本示例说明如何渲染两个不同的屏幕（或在不同上下文中的同一屏幕）在同一URL上，取决于您到达那里的方式。</span></span><br><span class=\"line\"><span class=\"comment\">// 点击“精选图片”，然后全屏查看。然后“访问图库”，然后单击颜色。注意URL和组件与以前相同，但现在我们可以看到它们在图库屏幕顶部的模态中。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ModalGalleryExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ModalSwitch /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function ModalSwitch() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let location = useLocation();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 当其中一个单击图库链接。“背景”状态是其中之一时我们所在的位置单击图库链接。如果有的话将其用作`&lt;Switch&gt;`的位置，因此/</span><span class=\"regexp\">/我们在后台显示画廊模态</span></span><br><span class=\"line\"><span class=\"regexp\">  let background = location.state &amp;&amp; location.state.background;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch location=&#123;background || location&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route exact path=\"/</span><span class=\"string\">\" children=&#123;&lt;Home /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/gallery<span class=\"string\">\" children=&#123;&lt;Gallery /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/img/:id<span class=\"string\">\" children=&#123;&lt;ImageView /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &#123;/* 设置背景页面时显示模式 */&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;background &amp;&amp; &lt;Route path=\"</span>/img/:id<span class=\"string\">\" children=&#123;&lt;Modal /&gt;&#125; /&gt;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const IMAGES = [</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 0, title: \"</span>Dark Orchid<span class=\"string\">\", color: \"</span>DarkOrchid<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 1, title: \"</span>Lime Green<span class=\"string\">\", color: \"</span>LimeGreen<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 2, title: \"</span>Tomato<span class=\"string\">\", color: \"</span>Tomato<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\">  &#123; id: 3, title: \"Seven Ate Nine\", color: \"#789\" &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"Crimson\"</span>, <span class=\"attr\">color</span>: <span class=\"string\">\"Crimson\"</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thumbnail</span>(<span class=\"params\">&#123; color &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: <span class=\"number\">50</span>,</span><br><span class=\"line\">        height: <span class=\"number\">50</span>,</span><br><span class=\"line\">        background: color</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Image</span>(<span class=\"params\">&#123; color &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">        height: <span class=\"number\">400</span>,</span><br><span class=\"line\">        background: color</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Home</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/gallery\"</span>&gt;Visit the Gallery&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;Featured Images&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/img/2\"</span>&gt;Tomato&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/img/4\"</span>&gt;Crimson&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Gallery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> location = useLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;IMAGES.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;Link</span><br><span class=\"line\">          key=&#123;i.id&#125;</span><br><span class=\"line\">          to=&#123;&#123;</span><br><span class=\"line\">            pathname: <span class=\"string\">`/img/<span class=\"subst\">$&#123;i.id&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 这是把戏！ 该链接集</span></span><br><span class=\"line\">            <span class=\"comment\">// the `background` in location state.</span></span><br><span class=\"line\">            state: &#123; <span class=\"attr\">background</span>: location &#125;</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;Thumbnail color=&#123;i.color&#125; /&gt;</span><br><span class=\"line\">          &lt;p&gt;&#123;i.title&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>Link&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function ImageView() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"regexp\">  let image = IMAGES[parseInt(id, 10)];</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  if (!image) return &lt;div&gt;Image not found&lt;/</span>div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;&#123;image.title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Image color=&#123;image.color&#125; /</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function Modal() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let history = useHistory();</span></span><br><span class=\"line\"><span class=\"regexp\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"regexp\">  let image = IMAGES[parseInt(id, 10)];</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  if (!image) return null;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  let back = e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    e.stopPropagation();</span></span><br><span class=\"line\"><span class=\"regexp\">    history.goBack();</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">      onClick=&#123;back&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      style=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        position: \"absolute\",</span></span><br><span class=\"line\"><span class=\"regexp\">        top: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        left: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        bottom: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        right: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        background: \"rgba(0, 0, 0, 0.15)\"</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">        className=\"modal\"</span></span><br><span class=\"line\"><span class=\"regexp\">        style=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          position: \"absolute\",</span></span><br><span class=\"line\"><span class=\"regexp\">          background: \"#fff\",</span></span><br><span class=\"line\"><span class=\"regexp\">          top: 25,</span></span><br><span class=\"line\"><span class=\"regexp\">          left: \"10%\",</span></span><br><span class=\"line\"><span class=\"regexp\">          right: \"10%\",</span></span><br><span class=\"line\"><span class=\"regexp\">          padding: 15,</span></span><br><span class=\"line\"><span class=\"regexp\">          border: \"2px solid #444\"</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h1&gt;&#123;image.title&#125;&lt;/</span>h1&gt;</span><br><span class=\"line\">        &lt;Image color=&#123;image.color&#125; /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\"button\"</span> onClick=&#123;back&#125;&gt;</span><br><span class=\"line\">          Close</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useHistory,</span><br><span class=\"line\">  useLocation,</span><br><span class=\"line\">  useParams</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本示例说明如何渲染两个不同的屏幕（或在不同上下文中的同一屏幕）在同一URL上，取决于您到达那里的方式。</span></span><br><span class=\"line\"><span class=\"comment\">// 点击“精选图片”，然后全屏查看。然后“访问图库”，然后单击颜色。注意URL和组件与以前相同，但现在我们可以看到它们在图库屏幕顶部的模态中。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ModalGalleryExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ModalSwitch /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function ModalSwitch() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let location = useLocation();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 当其中一个单击图库链接。“背景”状态是其中之一时我们所在的位置单击图库链接。如果有的话将其用作`&lt;Switch&gt;`的位置，因此/</span><span class=\"regexp\">/我们在后台显示画廊模态</span></span><br><span class=\"line\"><span class=\"regexp\">  let background = location.state &amp;&amp; location.state.background;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch location=&#123;background || location&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route exact path=\"/</span><span class=\"string\">\" children=&#123;&lt;Home /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/gallery<span class=\"string\">\" children=&#123;&lt;Gallery /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/img/:id<span class=\"string\">\" children=&#123;&lt;ImageView /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &#123;/* 设置背景页面时显示模式 */&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;background &amp;&amp; &lt;Route path=\"</span>/img/:id<span class=\"string\">\" children=&#123;&lt;Modal /&gt;&#125; /&gt;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const IMAGES = [</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 0, title: \"</span>Dark Orchid<span class=\"string\">\", color: \"</span>DarkOrchid<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 1, title: \"</span>Lime Green<span class=\"string\">\", color: \"</span>LimeGreen<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 2, title: \"</span>Tomato<span class=\"string\">\", color: \"</span>Tomato<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\">  &#123; id: 3, title: \"Seven Ate Nine\", color: \"#789\" &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"Crimson\"</span>, <span class=\"attr\">color</span>: <span class=\"string\">\"Crimson\"</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thumbnail</span>(<span class=\"params\">&#123; color &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: <span class=\"number\">50</span>,</span><br><span class=\"line\">        height: <span class=\"number\">50</span>,</span><br><span class=\"line\">        background: color</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Image</span>(<span class=\"params\">&#123; color &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">        height: <span class=\"number\">400</span>,</span><br><span class=\"line\">        background: color</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Home</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Link to=<span class=\"string\">\"/gallery\"</span>&gt;Visit the Gallery&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;Featured Images&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/img/2\"</span>&gt;Tomato&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/img/4\"</span>&gt;Crimson&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Gallery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> location = useLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;IMAGES.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;Link</span><br><span class=\"line\">          key=&#123;i.id&#125;</span><br><span class=\"line\">          to=&#123;&#123;</span><br><span class=\"line\">            pathname: <span class=\"string\">`/img/<span class=\"subst\">$&#123;i.id&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 这是把戏！ 该链接集</span></span><br><span class=\"line\">            <span class=\"comment\">// the `background` in location state.</span></span><br><span class=\"line\">            state: &#123; <span class=\"attr\">background</span>: location &#125;</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;Thumbnail color=&#123;i.color&#125; /&gt;</span><br><span class=\"line\">          &lt;p&gt;&#123;i.title&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>Link&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function ImageView() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"regexp\">  let image = IMAGES[parseInt(id, 10)];</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  if (!image) return &lt;div&gt;Image not found&lt;/</span>div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;&#123;image.title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Image color=&#123;image.color&#125; /</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function Modal() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let history = useHistory();</span></span><br><span class=\"line\"><span class=\"regexp\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"regexp\">  let image = IMAGES[parseInt(id, 10)];</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  if (!image) return null;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  let back = e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    e.stopPropagation();</span></span><br><span class=\"line\"><span class=\"regexp\">    history.goBack();</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">      onClick=&#123;back&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      style=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        position: \"absolute\",</span></span><br><span class=\"line\"><span class=\"regexp\">        top: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        left: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        bottom: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        right: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">        background: \"rgba(0, 0, 0, 0.15)\"</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">        className=\"modal\"</span></span><br><span class=\"line\"><span class=\"regexp\">        style=&#123;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          position: \"absolute\",</span></span><br><span class=\"line\"><span class=\"regexp\">          background: \"#fff\",</span></span><br><span class=\"line\"><span class=\"regexp\">          top: 25,</span></span><br><span class=\"line\"><span class=\"regexp\">          left: \"10%\",</span></span><br><span class=\"line\"><span class=\"regexp\">          right: \"10%\",</span></span><br><span class=\"line\"><span class=\"regexp\">          padding: 15,</span></span><br><span class=\"line\"><span class=\"regexp\">          border: \"2px solid #444\"</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h1&gt;&#123;image.title&#125;&lt;/</span>h1&gt;</span><br><span class=\"line\">        &lt;Image color=&#123;image.color&#125; /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\"button\"</span> onClick=&#123;back&#125;&gt;</span><br><span class=\"line\">          Close</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Prompt\n} from \"react-router-dom\";\n\n/*有时您想阻止用户\n    离开页面导航。 最常见的\n  用例是当他们输入一些数据时\n  表格，但尚未提交，并且\n  你不希望他们失去它。*/\n\nexport default function PreventingTransitionsExample() {\n  return (\n    <Router>\n      <ul>\n        <li>\n          <Link to=\"/\">Form</Link>\n        </li>\n        <li>\n          <Link to=\"/one\">One</Link>\n        </li>\n        <li>\n          <Link to=\"/two\">Two</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/\" exact children={<BlockingForm />} />\n        <Route path=\"/one\" children={<h3>One</h3>} />\n        <Route path=\"/two\" children={<h3>Two</h3>} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction BlockingForm() {\n  let [isBlocking, setIsBlocking] = useState(false);\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n        event.target.reset();\n        setIsBlocking(false);\n      }}\n    >\n      <Prompt\n        when={isBlocking}\n        message={location =>\n          `Are you sure you want to go to ${location.pathname}`\n        }\n      />\n\n      <p>\n        Blocking?{\" \"}\n        {isBlocking ? \"Yes, click a link or the back button\" : \"Nope\"}\n      </p>\n\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={event => {\n            setIsBlocking(event.target.value.length > 0);\n          }}\n        />\n      </p>\n\n      <p>\n        <button>Submit to stop blocking</button>\n      </p>\n    </form>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/Preventing_Transition.md","raw":"```jsx harmony\nimport React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Prompt\n} from \"react-router-dom\";\n\n/*有时您想阻止用户\n    离开页面导航。 最常见的\n  用例是当他们输入一些数据时\n  表格，但尚未提交，并且\n  你不希望他们失去它。*/\n\nexport default function PreventingTransitionsExample() {\n  return (\n    <Router>\n      <ul>\n        <li>\n          <Link to=\"/\">Form</Link>\n        </li>\n        <li>\n          <Link to=\"/one\">One</Link>\n        </li>\n        <li>\n          <Link to=\"/two\">Two</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/\" exact children={<BlockingForm />} />\n        <Route path=\"/one\" children={<h3>One</h3>} />\n        <Route path=\"/two\" children={<h3>Two</h3>} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction BlockingForm() {\n  let [isBlocking, setIsBlocking] = useState(false);\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n        event.target.reset();\n        setIsBlocking(false);\n      }}\n    >\n      <Prompt\n        when={isBlocking}\n        message={location =>\n          `Are you sure you want to go to ${location.pathname}`\n        }\n      />\n\n      <p>\n        Blocking?{\" \"}\n        {isBlocking ? \"Yes, click a link or the back button\" : \"Nope\"}\n      </p>\n\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={event => {\n            setIsBlocking(event.target.value.length > 0);\n          }}\n        />\n      </p>\n\n      <p>\n        <button>Submit to stop blocking</button>\n      </p>\n    </form>\n  );\n}\n\n```\n","slug":"react_router/examples/Preventing_Transition","published":1,"date":"2020-01-13T11:18:55.488Z","updated":"2020-01-13T11:25:49.919Z","title":"react_router/examples/Preventing_Transition","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xi0003s0co8r7bay4t","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Prompt</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*有时您想阻止用户</span></span><br><span class=\"line\"><span class=\"comment\">    离开页面导航。 最常见的</span></span><br><span class=\"line\"><span class=\"comment\">  用例是当他们输入一些数据时</span></span><br><span class=\"line\"><span class=\"comment\">  表格，但尚未提交，并且</span></span><br><span class=\"line\"><span class=\"comment\">  你不希望他们失去它。*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PreventingTransitionsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Form&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/one\"</span>&gt;One&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/two\"</span>&gt;Two&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span><span class=\"string\">\" exact children=&#123;&lt;BlockingForm /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/one<span class=\"string\">\" children=&#123;&lt;h3&gt;One&lt;/h3&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/two<span class=\"string\">\" children=&#123;&lt;h3&gt;Two&lt;/h3&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function BlockingForm() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let [isBlocking, setIsBlocking] = useState(false);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form</span></span><br><span class=\"line\"><span class=\"string\">      onSubmit=&#123;event =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        event.preventDefault();</span></span><br><span class=\"line\"><span class=\"string\">        event.target.reset();</span></span><br><span class=\"line\"><span class=\"string\">        setIsBlocking(false);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Prompt</span></span><br><span class=\"line\"><span class=\"string\">        when=&#123;isBlocking&#125;</span></span><br><span class=\"line\"><span class=\"string\">        message=&#123;location =&gt;</span></span><br><span class=\"line\"><span class=\"string\">          `Are you sure you want to go to $&#123;location.pathname&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      /&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        Blocking?&#123;\"</span> <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;isBlocking ? \"</span>Yes, click a link or the back button<span class=\"string\">\" : \"</span>Nope<span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input</span></span><br><span class=\"line\"><span class=\"string\">          size=\"</span><span class=\"number\">50</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          placeholder=\"</span>type something to block transitions<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          onChange=&#123;event =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            setIsBlocking(event.target.value.length &gt; 0);</span></span><br><span class=\"line\"><span class=\"string\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button&gt;Submit to stop blocking&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Prompt</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*有时您想阻止用户</span></span><br><span class=\"line\"><span class=\"comment\">    离开页面导航。 最常见的</span></span><br><span class=\"line\"><span class=\"comment\">  用例是当他们输入一些数据时</span></span><br><span class=\"line\"><span class=\"comment\">  表格，但尚未提交，并且</span></span><br><span class=\"line\"><span class=\"comment\">  你不希望他们失去它。*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PreventingTransitionsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Form&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/one\"</span>&gt;One&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/two\"</span>&gt;Two&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>li&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span><span class=\"string\">\" exact children=&#123;&lt;BlockingForm /&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/one<span class=\"string\">\" children=&#123;&lt;h3&gt;One&lt;/h3&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/two<span class=\"string\">\" children=&#123;&lt;h3&gt;Two&lt;/h3&gt;&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function BlockingForm() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let [isBlocking, setIsBlocking] = useState(false);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form</span></span><br><span class=\"line\"><span class=\"string\">      onSubmit=&#123;event =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        event.preventDefault();</span></span><br><span class=\"line\"><span class=\"string\">        event.target.reset();</span></span><br><span class=\"line\"><span class=\"string\">        setIsBlocking(false);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Prompt</span></span><br><span class=\"line\"><span class=\"string\">        when=&#123;isBlocking&#125;</span></span><br><span class=\"line\"><span class=\"string\">        message=&#123;location =&gt;</span></span><br><span class=\"line\"><span class=\"string\">          `Are you sure you want to go to $&#123;location.pathname&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      /&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        Blocking?&#123;\"</span> <span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;isBlocking ? \"</span>Yes, click a link or the back button<span class=\"string\">\" : \"</span>Nope<span class=\"string\">\"&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input</span></span><br><span class=\"line\"><span class=\"string\">          size=\"</span><span class=\"number\">50</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          placeholder=\"</span>type something to block transitions<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          onChange=&#123;event =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            setIsBlocking(event.target.value.length &gt; 0);</span></span><br><span class=\"line\"><span class=\"string\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button&gt;Submit to stop blocking&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\n// React Router对您应该如何解析URL查询字符串。\n//\n// 如果你使用  key=value query strings and\n// 你不需要 支持 IE 11, 您可以使用//浏览器的内置URLSearchParams API。\n//\n//如果您的查询字符串包含数组或对象语法，您可能需要自带语法查询解析功能。\n\nexport default function QueryParamsExample() {\n  return (\n    <Router>\n      <QueryParamsDemo />\n    </Router>\n  );\n}\n\n// 基于useLocation进行解析的自定义钩子您的查询字符串。\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction QueryParamsDemo() {\n  let query = useQuery();\n\n  return (\n    <div>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to=\"/account?name=netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Child name={query.get(\"name\")} />\n      </div>\n    </div>\n  );\n}\n\nfunction Child({ name }) {\n  return (\n    <div>\n      {name ? (\n        <h3>\n          The <code>name</code> in the query string is &quot;{name}\n          &quot;\n        </h3>\n      ) : (\n        <h3>There is no name in the query string</h3>\n      )}\n    </div>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/Query_Paramenters.md","raw":"```jsx harmony\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\n// React Router对您应该如何解析URL查询字符串。\n//\n// 如果你使用  key=value query strings and\n// 你不需要 支持 IE 11, 您可以使用//浏览器的内置URLSearchParams API。\n//\n//如果您的查询字符串包含数组或对象语法，您可能需要自带语法查询解析功能。\n\nexport default function QueryParamsExample() {\n  return (\n    <Router>\n      <QueryParamsDemo />\n    </Router>\n  );\n}\n\n// 基于useLocation进行解析的自定义钩子您的查询字符串。\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction QueryParamsDemo() {\n  let query = useQuery();\n\n  return (\n    <div>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to=\"/account?name=netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/account?name=modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Child name={query.get(\"name\")} />\n      </div>\n    </div>\n  );\n}\n\nfunction Child({ name }) {\n  return (\n    <div>\n      {name ? (\n        <h3>\n          The <code>name</code> in the query string is &quot;{name}\n          &quot;\n        </h3>\n      ) : (\n        <h3>There is no name in the query string</h3>\n      )}\n    </div>\n  );\n}\n\n```\n","slug":"react_router/examples/Query_Paramenters","published":1,"date":"2020-01-13T10:43:07.627Z","updated":"2020-01-13T10:48:36.871Z","title":"react_router/examples/Query_Paramenters","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xj0004s0cogs8bctya","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// React Router对您应该如何解析URL查询字符串。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 如果你使用  key=value query strings and</span></span><br><span class=\"line\"><span class=\"comment\">// 你不需要 支持 IE 11, 您可以使用//浏览器的内置URLSearchParams API。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//如果您的查询字符串包含数组或对象语法，您可能需要自带语法查询解析功能。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueryParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;QueryParamsDemo /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 基于useLocation进行解析的自定义钩子您的查询字符串。</span></span><br><span class=\"line\"><span class=\"regexp\">function useQuery() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function QueryParamsDemo() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let query = useQuery();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;Accounts&lt;/</span>h2&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=netflix\"</span>&gt;Netflix&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=zillow-group\"</span>&gt;Zillow Group&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=yahoo\"</span>&gt;Yahoo&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=modus-create\"</span>&gt;Modus Create&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Child name=&#123;query.get(\"name\")&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; name &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;name ? (</span><br><span class=\"line\">        &lt;h3&gt;</span><br><span class=\"line\">          The &lt;code&gt;name&lt;<span class=\"regexp\">/code&gt; in the query string is &amp;quot;&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &amp;quot;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h3&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;h3&gt;There is no name <span class=\"keyword\">in</span> the query string&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useLocation</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// React Router对您应该如何解析URL查询字符串。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 如果你使用  key=value query strings and</span></span><br><span class=\"line\"><span class=\"comment\">// 你不需要 支持 IE 11, 您可以使用//浏览器的内置URLSearchParams API。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//如果您的查询字符串包含数组或对象语法，您可能需要自带语法查询解析功能。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QueryParamsExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;QueryParamsDemo /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 基于useLocation进行解析的自定义钩子您的查询字符串。</span></span><br><span class=\"line\"><span class=\"regexp\">function useQuery() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function QueryParamsDemo() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  let query = useQuery();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;Accounts&lt;/</span>h2&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=netflix\"</span>&gt;Netflix&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=zillow-group\"</span>&gt;Zillow Group&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=yahoo\"</span>&gt;Yahoo&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/account?name=modus-create\"</span>&gt;Modus Create&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Child name=&#123;query.get(\"name\")&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; name &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;name ? (</span><br><span class=\"line\">        &lt;h3&gt;</span><br><span class=\"line\">          The &lt;code&gt;name&lt;<span class=\"regexp\">/code&gt; in the query string is &amp;quot;&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &amp;quot;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h3&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;h3&gt;There is no name <span class=\"keyword\">in</span> the query string&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\n/*\n有时您不知道所有可能的路线\n预先为您的应用程序； 例如，当\n构建文件系统浏览UI或确定\n网址是根据数据动态生成的。 在这些情况下，\n它有助于拥有一个能够\n在运行时根据需要生成路由。\n\n\n该示例使您可以深入了解朋友\n递归列表，查看每个用户的朋友列表\n一路上。 向下钻取时，请注意每个细分\n被添加到URL。 您可以复制/粘贴此链接\n  给其他人，他们将看到相同的用户界面。\n\n然后单击后退按钮并观看最后一个\nURL的段与最后一个段一起消失\n好友列表。\n\n*/\n\n\nexport default function RecursiveExample() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:id\">\n          <Person />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/0\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Person() {\n  let { url } = useRouteMatch();\n  let { id } = useParams();\n  let person = find(parseInt(id));\n\n  return (\n    <div>\n      <h3>{person.name}’s Friends</h3>\n\n      <ul>\n        {person.friends.map(id => (\n          <li key={id}>\n            <Link to={`${url}/${id}`}>{find(id).name}</Link>\n          </li>\n        ))}\n      </ul>\n\n      <Switch>\n        <Route path={`${url}/:id`}>\n          <Person />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nconst PEEPS = [\n  { id: 0, name: \"Michelle\", friends: [1, 2, 3] },\n  { id: 1, name: \"Sean\", friends: [0, 3] },\n  { id: 2, name: \"Kim\", friends: [0, 1, 3] },\n  { id: 3, name: \"David\", friends: [1, 2] }\n];\n\nfunction find(id) {\n  return PEEPS.find(p => p.id === id);\n}\n\n```\n","source":"_posts/react_router/examples/Recursive_Paths.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\n/*\n有时您不知道所有可能的路线\n预先为您的应用程序； 例如，当\n构建文件系统浏览UI或确定\n网址是根据数据动态生成的。 在这些情况下，\n它有助于拥有一个能够\n在运行时根据需要生成路由。\n\n\n该示例使您可以深入了解朋友\n递归列表，查看每个用户的朋友列表\n一路上。 向下钻取时，请注意每个细分\n被添加到URL。 您可以复制/粘贴此链接\n  给其他人，他们将看到相同的用户界面。\n\n然后单击后退按钮并观看最后一个\nURL的段与最后一个段一起消失\n好友列表。\n\n*/\n\n\nexport default function RecursiveExample() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:id\">\n          <Person />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/0\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Person() {\n  let { url } = useRouteMatch();\n  let { id } = useParams();\n  let person = find(parseInt(id));\n\n  return (\n    <div>\n      <h3>{person.name}’s Friends</h3>\n\n      <ul>\n        {person.friends.map(id => (\n          <li key={id}>\n            <Link to={`${url}/${id}`}>{find(id).name}</Link>\n          </li>\n        ))}\n      </ul>\n\n      <Switch>\n        <Route path={`${url}/:id`}>\n          <Person />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nconst PEEPS = [\n  { id: 0, name: \"Michelle\", friends: [1, 2, 3] },\n  { id: 1, name: \"Sean\", friends: [0, 3] },\n  { id: 2, name: \"Kim\", friends: [0, 1, 3] },\n  { id: 3, name: \"David\", friends: [1, 2] }\n];\n\nfunction find(id) {\n  return PEEPS.find(p => p.id === id);\n}\n\n```\n","slug":"react_router/examples/Recursive_Paths","published":1,"date":"2020-01-13T11:12:35.304Z","updated":"2020-01-13T11:14:36.107Z","title":"react_router/examples/Recursive_Paths","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xk0005s0cofne1f7su","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Redirect,</span><br><span class=\"line\">  useParams,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">有时您不知道所有可能的路线</span></span><br><span class=\"line\"><span class=\"comment\">预先为您的应用程序； 例如，当</span></span><br><span class=\"line\"><span class=\"comment\">构建文件系统浏览UI或确定</span></span><br><span class=\"line\"><span class=\"comment\">网址是根据数据动态生成的。 在这些情况下，</span></span><br><span class=\"line\"><span class=\"comment\">它有助于拥有一个能够</span></span><br><span class=\"line\"><span class=\"comment\">在运行时根据需要生成路由。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">该示例使您可以深入了解朋友</span></span><br><span class=\"line\"><span class=\"comment\">递归列表，查看每个用户的朋友列表</span></span><br><span class=\"line\"><span class=\"comment\">一路上。 向下钻取时，请注意每个细分</span></span><br><span class=\"line\"><span class=\"comment\">被添加到URL。 您可以复制/粘贴此链接</span></span><br><span class=\"line\"><span class=\"comment\">  给其他人，他们将看到相同的用户界面。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">然后单击后退按钮并观看最后一个</span></span><br><span class=\"line\"><span class=\"comment\">URL的段与最后一个段一起消失</span></span><br><span class=\"line\"><span class=\"comment\">好友列表。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RecursiveExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/:id\"</span>&gt;</span><br><span class=\"line\">          &lt;Person /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Redirect to=\"</span>/<span class=\"number\">0</span><span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Person() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; url &#125; = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\">  let person = find(parseInt(id));</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;&#123;person.name&#125;’s Friends&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;person.friends.map(id =&gt; (</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li key=&#123;id&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=&#123;`$&#123;url&#125;/$&#123;id&#125;`&#125;&gt;&#123;find(id).name&#125;&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;url&#125;/:id`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Person /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const PEEPS = [</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 0, name: \"</span>Michelle<span class=\"string\">\", friends: [1, 2, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 1, name: \"</span>Sean<span class=\"string\">\", friends: [0, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 2, name: \"</span>Kim<span class=\"string\">\", friends: [0, 1, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 3, name: \"</span>David<span class=\"string\">\", friends: [1, 2] &#125;</span></span><br><span class=\"line\"><span class=\"string\">];</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function find(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return PEEPS.find(p =&gt; p.id === id);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  Redirect,</span><br><span class=\"line\">  useParams,</span><br><span class=\"line\">  useRouteMatch</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">有时您不知道所有可能的路线</span></span><br><span class=\"line\"><span class=\"comment\">预先为您的应用程序； 例如，当</span></span><br><span class=\"line\"><span class=\"comment\">构建文件系统浏览UI或确定</span></span><br><span class=\"line\"><span class=\"comment\">网址是根据数据动态生成的。 在这些情况下，</span></span><br><span class=\"line\"><span class=\"comment\">它有助于拥有一个能够</span></span><br><span class=\"line\"><span class=\"comment\">在运行时根据需要生成路由。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">该示例使您可以深入了解朋友</span></span><br><span class=\"line\"><span class=\"comment\">递归列表，查看每个用户的朋友列表</span></span><br><span class=\"line\"><span class=\"comment\">一路上。 向下钻取时，请注意每个细分</span></span><br><span class=\"line\"><span class=\"comment\">被添加到URL。 您可以复制/粘贴此链接</span></span><br><span class=\"line\"><span class=\"comment\">  给其他人，他们将看到相同的用户界面。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">然后单击后退按钮并观看最后一个</span></span><br><span class=\"line\"><span class=\"comment\">URL的段与最后一个段一起消失</span></span><br><span class=\"line\"><span class=\"comment\">好友列表。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RecursiveExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/:id\"</span>&gt;</span><br><span class=\"line\">          &lt;Person /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Redirect to=\"</span>/<span class=\"number\">0</span><span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Person() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; url &#125; = useRouteMatch();</span></span><br><span class=\"line\"><span class=\"string\">  let &#123; id &#125; = useParams();</span></span><br><span class=\"line\"><span class=\"string\">  let person = find(parseInt(id));</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;&#123;person.name&#125;’s Friends&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;person.friends.map(id =&gt; (</span></span><br><span class=\"line\"><span class=\"string\">          &lt;li key=&#123;id&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Link to=&#123;`$&#123;url&#125;/$&#123;id&#125;`&#125;&gt;&#123;find(id).name&#125;&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=&#123;`$&#123;url&#125;/:id`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Person /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const PEEPS = [</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 0, name: \"</span>Michelle<span class=\"string\">\", friends: [1, 2, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 1, name: \"</span>Sean<span class=\"string\">\", friends: [0, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 2, name: \"</span>Kim<span class=\"string\">\", friends: [0, 1, 3] &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123; id: 3, name: \"</span>David<span class=\"string\">\", friends: [1, 2] &#125;</span></span><br><span class=\"line\"><span class=\"string\">];</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function find(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return PEEPS.find(p =&gt; p.id === id);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React, { Component } from \"react\";\nimport { StaticRouter as Router, Route } from \"react-router-dom\";\n\n// 本示例在StaticRouter中渲染路由并填充其路由staticContext，然后将其打印出来。在现实世界中，您会使用StaticRouter进行服务器端渲染：\n//\n// import express from \"express\";\n// import ReactDOMServer from \"react-dom/server\";\n//\n// const app = express()\n//\n// app.get('*', (req, res) => {\n//   let staticContext = {}\n//\n//   let html = ReactDOMServer.renderToString(\n//     <StaticRouter location={req.url} context={staticContext}>\n//       <App /> (includes the RouteStatus component below e.g. for 404 errors)\n//     </StaticRouter>\n//   );\n//\n//   res.status(staticContext.statusCode || 200).send(html);\n// });\n//\n// app.listen(process.env.PORT || 3000);\n\nfunction RouteStatus(props) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // 我们必须检查staticContext是否存在//，因为如果通过BrowserRouter呈现，它将是未定义的\n        if (staticContext) {\n          staticContext.statusCode = props.statusCode;\n        }\n\n        return <div>{props.children}</div>;\n      }}\n    />\n  );\n}\n\nfunction PrintContext(props) {\n  return <p>Static context: {JSON.stringify(props.staticContext)}</p>;\n}\n\nexport default class StaticRouterExample extends Component {\n  // 这是我们传递给StaticRouter的上下文对象。可以通过路由进行修改以提供其他信息,用于服务器端渲染。\n  staticContext = {};\n\n  render() {\n    return (\n      <Router location=\"/foo\" context={this.staticContext}>\n        <div>\n          <RouteStatus statusCode={404}>\n            <p>Route with statusCode 404</p>\n            <PrintContext staticContext={this.staticContext} />\n          </RouteStatus>\n        </div>\n      </Router>\n    );\n  }\n}\n```\n","source":"_posts/react_router/examples/StaticRouter_Context.md","raw":"```jsx harmony\nimport React, { Component } from \"react\";\nimport { StaticRouter as Router, Route } from \"react-router-dom\";\n\n// 本示例在StaticRouter中渲染路由并填充其路由staticContext，然后将其打印出来。在现实世界中，您会使用StaticRouter进行服务器端渲染：\n//\n// import express from \"express\";\n// import ReactDOMServer from \"react-dom/server\";\n//\n// const app = express()\n//\n// app.get('*', (req, res) => {\n//   let staticContext = {}\n//\n//   let html = ReactDOMServer.renderToString(\n//     <StaticRouter location={req.url} context={staticContext}>\n//       <App /> (includes the RouteStatus component below e.g. for 404 errors)\n//     </StaticRouter>\n//   );\n//\n//   res.status(staticContext.statusCode || 200).send(html);\n// });\n//\n// app.listen(process.env.PORT || 3000);\n\nfunction RouteStatus(props) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // 我们必须检查staticContext是否存在//，因为如果通过BrowserRouter呈现，它将是未定义的\n        if (staticContext) {\n          staticContext.statusCode = props.statusCode;\n        }\n\n        return <div>{props.children}</div>;\n      }}\n    />\n  );\n}\n\nfunction PrintContext(props) {\n  return <p>Static context: {JSON.stringify(props.staticContext)}</p>;\n}\n\nexport default class StaticRouterExample extends Component {\n  // 这是我们传递给StaticRouter的上下文对象。可以通过路由进行修改以提供其他信息,用于服务器端渲染。\n  staticContext = {};\n\n  render() {\n    return (\n      <Router location=\"/foo\" context={this.staticContext}>\n        <div>\n          <RouteStatus statusCode={404}>\n            <p>Route with statusCode 404</p>\n            <PrintContext staticContext={this.staticContext} />\n          </RouteStatus>\n        </div>\n      </Router>\n    );\n  }\n}\n```\n","slug":"react_router/examples/StaticRouter_Context","published":1,"date":"2020-01-13T10:49:24.935Z","updated":"2020-01-13T10:51:55.744Z","title":"react_router/examples/StaticRouter_Context","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xk0006s0cob5f134f2","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本示例在StaticRouter中渲染路由并填充其路由staticContext，然后将其打印出来。在现实世界中，您会使用StaticRouter进行服务器端渲染：</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// import express from \"express\";</span></span><br><span class=\"line\"><span class=\"comment\">// import ReactDOMServer from \"react-dom/server\";</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// const app = express()</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// app.get('*', (req, res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   let staticContext = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   let html = ReactDOMServer.renderToString(</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;StaticRouter location=&#123;req.url&#125; context=&#123;staticContext&#125;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;App /&gt; (includes the RouteStatus component below e.g. for 404 errors)</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//   );</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   res.status(staticContext.statusCode || 200).send(html);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// app.listen(process.env.PORT || 3000);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouteStatus</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们必须检查staticContext是否存在//，因为如果通过BrowserRouter呈现，它将是未定义的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) &#123;</span><br><span class=\"line\">          staticContext.statusCode = props.statusCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrintContext</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Static context: &#123;JSON.stringify(props.staticContext)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticRouterExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这是我们传递给StaticRouter的上下文对象。可以通过路由进行修改以提供其他信息,用于服务器端渲染。</span></span><br><span class=\"line\">  staticContext = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Router location=<span class=\"string\">\"/foo\"</span> context=&#123;<span class=\"keyword\">this</span>.staticContext&#125;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;RouteStatus statusCode=&#123;<span class=\"number\">404</span>&#125;&gt;</span><br><span class=\"line\">            &lt;p&gt;Route <span class=\"keyword\">with</span> statusCode <span class=\"number\">404</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;PrintContext staticContext=&#123;this.staticContext&#125; /</span>&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/RouteStatus&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter <span class=\"keyword\">as</span> Router, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本示例在StaticRouter中渲染路由并填充其路由staticContext，然后将其打印出来。在现实世界中，您会使用StaticRouter进行服务器端渲染：</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// import express from \"express\";</span></span><br><span class=\"line\"><span class=\"comment\">// import ReactDOMServer from \"react-dom/server\";</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// const app = express()</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// app.get('*', (req, res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   let staticContext = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   let html = ReactDOMServer.renderToString(</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;StaticRouter location=&#123;req.url&#125; context=&#123;staticContext&#125;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;App /&gt; (includes the RouteStatus component below e.g. for 404 errors)</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//   );</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   res.status(staticContext.statusCode || 200).send(html);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// app.listen(process.env.PORT || 3000);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouteStatus</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Route</span><br><span class=\"line\">      render=&#123;(&#123; staticContext &#125;) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们必须检查staticContext是否存在//，因为如果通过BrowserRouter呈现，它将是未定义的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticContext) &#123;</span><br><span class=\"line\">          staticContext.statusCode = props.statusCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrintContext</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Static context: &#123;JSON.stringify(props.staticContext)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticRouterExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这是我们传递给StaticRouter的上下文对象。可以通过路由进行修改以提供其他信息,用于服务器端渲染。</span></span><br><span class=\"line\">  staticContext = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Router location=<span class=\"string\">\"/foo\"</span> context=&#123;<span class=\"keyword\">this</span>.staticContext&#125;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;RouteStatus statusCode=&#123;<span class=\"number\">404</span>&#125;&gt;</span><br><span class=\"line\">            &lt;p&gt;Route <span class=\"keyword\">with</span> statusCode <span class=\"number\">404</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;PrintContext staticContext=&#123;this.staticContext&#125; /</span>&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/RouteStatus&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// 有些人在集中式路由配置中发现价值。路由配置只是数据。React擅长映射将数据放入组件中，而`<Route>`是一个组件。\n\n// 我们的路由配置只是逻辑“路由”的数组\n// 与`path`和`component`道具一起订购\n// 您在`<Switch>`中执行的方式。\nconst routes = [\n  {\n    path: \"/sandwiches\",\n    component: Sandwiches\n  },\n  {\n    path: \"/tacos\",\n    component: Tacos,\n    routes: [\n      {\n        path: \"/tacos/bus\",\n        component: Bus\n      },\n      {\n        path: \"/tacos/cart\",\n        component: Cart\n      }\n    ]\n  }\n];\n\nexport default function RouteConfigExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/tacos\">Tacos</Link>\n          </li>\n          <li>\n            <Link to=\"/sandwiches\">Sandwiches</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          {routes.map((route, i) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// `<Route>`的特殊包装，它知道如何\n   //通过在“路由”中传递“子”路由\n   //对其呈现的组件进行支撑。\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        // 向下传递子路线以保持嵌套\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nfunction Sandwiches() {\n  return <h2>Sandwiches</h2>;\n}\n\nfunction Tacos({ routes }) {\n  return (\n    <div>\n      <h2>Tacos</h2>\n      <ul>\n        <li>\n          <Link to=\"/tacos/bus\">Bus</Link>\n        </li>\n        <li>\n          <Link to=\"/tacos/cart\">Cart</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        {routes.map((route, i) => (\n          <RouteWithSubRoutes key={i} {...route} />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nfunction Bus() {\n  return <h3>Bus</h3>;\n}\n\nfunction Cart() {\n  return <h3>Cart</h3>;\n}\n\n```\n","source":"_posts/react_router/examples/Route_Config.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// 有些人在集中式路由配置中发现价值。路由配置只是数据。React擅长映射将数据放入组件中，而`<Route>`是一个组件。\n\n// 我们的路由配置只是逻辑“路由”的数组\n// 与`path`和`component`道具一起订购\n// 您在`<Switch>`中执行的方式。\nconst routes = [\n  {\n    path: \"/sandwiches\",\n    component: Sandwiches\n  },\n  {\n    path: \"/tacos\",\n    component: Tacos,\n    routes: [\n      {\n        path: \"/tacos/bus\",\n        component: Bus\n      },\n      {\n        path: \"/tacos/cart\",\n        component: Cart\n      }\n    ]\n  }\n];\n\nexport default function RouteConfigExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/tacos\">Tacos</Link>\n          </li>\n          <li>\n            <Link to=\"/sandwiches\">Sandwiches</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          {routes.map((route, i) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// `<Route>`的特殊包装，它知道如何\n   //通过在“路由”中传递“子”路由\n   //对其呈现的组件进行支撑。\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        // 向下传递子路线以保持嵌套\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nfunction Sandwiches() {\n  return <h2>Sandwiches</h2>;\n}\n\nfunction Tacos({ routes }) {\n  return (\n    <div>\n      <h2>Tacos</h2>\n      <ul>\n        <li>\n          <Link to=\"/tacos/bus\">Bus</Link>\n        </li>\n        <li>\n          <Link to=\"/tacos/cart\">Cart</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        {routes.map((route, i) => (\n          <RouteWithSubRoutes key={i} {...route} />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nfunction Bus() {\n  return <h3>Bus</h3>;\n}\n\nfunction Cart() {\n  return <h3>Cart</h3>;\n}\n\n```\n","slug":"react_router/examples/Route_Config","published":1,"date":"2020-01-13T10:59:04.757Z","updated":"2020-01-13T11:02:12.146Z","title":"react_router/examples/Route_Config","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xl0007s0co1n983dtg","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有些人在集中式路由配置中发现价值。路由配置只是数据。React擅长映射将数据放入组件中，而`&lt;Route&gt;`是一个组件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们的路由配置只是逻辑“路由”的数组</span></span><br><span class=\"line\"><span class=\"comment\">// 与`path`和`component`道具一起订购</span></span><br><span class=\"line\"><span class=\"comment\">// 您在`&lt;Switch&gt;`中执行的方式。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/sandwiches\"</span>,</span><br><span class=\"line\">    component: Sandwiches</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/tacos\"</span>,</span><br><span class=\"line\">    component: Tacos,</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/tacos/bus\"</span>,</span><br><span class=\"line\">        component: Bus</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/tacos/cart\"</span>,</span><br><span class=\"line\">        component: Cart</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouteConfigExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/tacos\"</span>&gt;Tacos&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/sandwiches\"</span>&gt;Sandwiches&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;routes.map((route, i) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /</span>&gt;</span><br><span class=\"line\">          ))&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ `&lt;Route&gt;`的特殊包装，它知道如何</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/通过在“路由”中传递“子”路由</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/对其呈现的组件进行支撑。</span></span><br><span class=\"line\"><span class=\"regexp\">function RouteWithSubRoutes(route) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">      path=&#123;route.path&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      render=&#123;props =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/ 向下传递子路线以保持嵌套</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /</span>&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sandwiches</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Sandwiches<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tacos</span>(<span class=\"params\">&#123; routes &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;Tacos&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Link to=\"/</span>tacos/bus<span class=\"string\">\"&gt;Bus&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=\"</span>/tacos/cart<span class=\"string\">\"&gt;Cart&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;routes.map((route, i) =&gt; (</span></span><br><span class=\"line\"><span class=\"string\">          &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Bus() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Bus&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Cart() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Cart&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有些人在集中式路由配置中发现价值。路由配置只是数据。React擅长映射将数据放入组件中，而`&lt;Route&gt;`是一个组件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们的路由配置只是逻辑“路由”的数组</span></span><br><span class=\"line\"><span class=\"comment\">// 与`path`和`component`道具一起订购</span></span><br><span class=\"line\"><span class=\"comment\">// 您在`&lt;Switch&gt;`中执行的方式。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/sandwiches\"</span>,</span><br><span class=\"line\">    component: Sandwiches</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/tacos\"</span>,</span><br><span class=\"line\">    component: Tacos,</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/tacos/bus\"</span>,</span><br><span class=\"line\">        component: Bus</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/tacos/cart\"</span>,</span><br><span class=\"line\">        component: Cart</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouteConfigExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/tacos\"</span>&gt;Tacos&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/sandwiches\"</span>&gt;Sandwiches&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;routes.map((route, i) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /</span>&gt;</span><br><span class=\"line\">          ))&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ `&lt;Route&gt;`的特殊包装，它知道如何</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/通过在“路由”中传递“子”路由</span></span><br><span class=\"line\"><span class=\"regexp\">   /</span><span class=\"regexp\">/对其呈现的组件进行支撑。</span></span><br><span class=\"line\"><span class=\"regexp\">function RouteWithSubRoutes(route) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">      path=&#123;route.path&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      render=&#123;props =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/ 向下传递子路线以保持嵌套</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /</span>&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sandwiches</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Sandwiches<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tacos</span>(<span class=\"params\">&#123; routes &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;Tacos&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Link to=\"/</span>tacos/bus<span class=\"string\">\"&gt;Bus&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Link to=\"</span>/tacos/cart<span class=\"string\">\"&gt;Cart&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;routes.map((route, i) =&gt; (</span></span><br><span class=\"line\"><span class=\"string\">          &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Bus() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Bus&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function Cart() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &lt;h3&gt;Cart&lt;/h3&gt;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// 每个逻辑“路线”都有两个组成部分，一个用于\n   //侧边栏，一个用于主区域。 我们想\n   //当路径与当前URL匹配。\n\n// 我们将在2中使用此路由配置\n   //景点：一次用于侧边栏，一次在主区域\n   //内容部分。 所有路线都在同一条\n   //将它们显示在<Switch>中的顺序。\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div>home!</div>,\n    main: () => <h2>Home</h2>\n  },\n  {\n    path: \"/bubblegum\",\n    sidebar: () => <div>bubblegum!</div>,\n    main: () => <h2>Bubblegum</h2>\n  },\n  {\n    path: \"/shoelaces\",\n    sidebar: () => <div>shoelaces!</div>,\n    main: () => <h2>Shoelaces</h2>\n  }\n];\n\nexport default function SidebarExample() {\n  return (\n    <Router>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            padding: \"10px\",\n            width: \"40%\",\n            background: \"#f0f0f0\"\n          }}\n        >\n          <ul style={{ listStyleType: \"none\", padding: 0 }}>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/bubblegum\">Bubblegum</Link>\n            </li>\n            <li>\n              <Link to=\"/shoelaces\">Shoelaces</Link>\n            </li>\n          </ul>\n\n          <Switch>\n            {routes.map((route, index) => (\n              //您可以在许多地方渲染<Route>\n                             //如您所愿，在您的应用中。 它将沿着\n                             //和其他也与URL匹配的<Route>匹配。\n                             //因此，侧边栏或面包屑或其他任何东西\n                             //需要您渲染多个事物\n                             //在同一网址的多个位置没有任何内容\n                             //超过多个<Route>。\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.sidebar />}\n              />\n            ))}\n          </Switch>\n        </div>\n\n        <div style={{ flex: 1, padding: \"10px\" }}>\n          <Switch>\n            {routes.map((route, index) => (\n              // //渲染更多具有相同路径的<Route>\n                                //，但这次是不同的组件。\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.main />}\n              />\n            ))}\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\n```\n","source":"_posts/react_router/examples/Siderbar.md","raw":"```jsx harmony\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// 每个逻辑“路线”都有两个组成部分，一个用于\n   //侧边栏，一个用于主区域。 我们想\n   //当路径与当前URL匹配。\n\n// 我们将在2中使用此路由配置\n   //景点：一次用于侧边栏，一次在主区域\n   //内容部分。 所有路线都在同一条\n   //将它们显示在<Switch>中的顺序。\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div>home!</div>,\n    main: () => <h2>Home</h2>\n  },\n  {\n    path: \"/bubblegum\",\n    sidebar: () => <div>bubblegum!</div>,\n    main: () => <h2>Bubblegum</h2>\n  },\n  {\n    path: \"/shoelaces\",\n    sidebar: () => <div>shoelaces!</div>,\n    main: () => <h2>Shoelaces</h2>\n  }\n];\n\nexport default function SidebarExample() {\n  return (\n    <Router>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            padding: \"10px\",\n            width: \"40%\",\n            background: \"#f0f0f0\"\n          }}\n        >\n          <ul style={{ listStyleType: \"none\", padding: 0 }}>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/bubblegum\">Bubblegum</Link>\n            </li>\n            <li>\n              <Link to=\"/shoelaces\">Shoelaces</Link>\n            </li>\n          </ul>\n\n          <Switch>\n            {routes.map((route, index) => (\n              //您可以在许多地方渲染<Route>\n                             //如您所愿，在您的应用中。 它将沿着\n                             //和其他也与URL匹配的<Route>匹配。\n                             //因此，侧边栏或面包屑或其他任何东西\n                             //需要您渲染多个事物\n                             //在同一网址的多个位置没有任何内容\n                             //超过多个<Route>。\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.sidebar />}\n              />\n            ))}\n          </Switch>\n        </div>\n\n        <div style={{ flex: 1, padding: \"10px\" }}>\n          <Switch>\n            {routes.map((route, index) => (\n              // //渲染更多具有相同路径的<Route>\n                                //，但这次是不同的组件。\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.main />}\n              />\n            ))}\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\n```\n","slug":"react_router/examples/Siderbar","published":1,"date":"2020-01-13T11:04:46.476Z","updated":"2020-01-13T11:06:27.881Z","title":"react_router/examples/Siderbar","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5cd31xm0008s0co3sdoft8w","content":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个逻辑“路线”都有两个组成部分，一个用于</span></span><br><span class=\"line\">   <span class=\"comment\">//侧边栏，一个用于主区域。 我们想</span></span><br><span class=\"line\">   <span class=\"comment\">//当路径与当前URL匹配。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们将在2中使用此路由配置</span></span><br><span class=\"line\">   <span class=\"comment\">//景点：一次用于侧边栏，一次在主区域</span></span><br><span class=\"line\">   <span class=\"comment\">//内容部分。 所有路线都在同一条</span></span><br><span class=\"line\">   <span class=\"comment\">//将它们显示在&lt;Switch&gt;中的顺序。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/bubblegum\"</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>bubblegum!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Bubblegum<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/shoelaces\"</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>shoelaces!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Shoelaces<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SidebarExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div style=&#123;&#123; <span class=\"attr\">display</span>: <span class=\"string\">\"flex\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;div</span><br><span class=\"line\">          style=&#123;&#123;</span><br><span class=\"line\">            padding: <span class=\"string\">\"10px\"</span>,</span><br><span class=\"line\">            width: <span class=\"string\">\"40%\"</span>,</span><br><span class=\"line\">            background: <span class=\"string\">\"#f0f0f0\"</span></span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;ul style=&#123;&#123; <span class=\"attr\">listStyleType</span>: <span class=\"string\">\"none\"</span>, <span class=\"attr\">padding</span>: <span class=\"number\">0</span> &#125;&#125;&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/bubblegum\"</span>&gt;Bubblegum&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/shoelaces\"</span>&gt;Shoelaces&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#123;routes.map((route, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">              /</span><span class=\"regexp\">/您可以在许多地方渲染&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/如您所愿，在您的应用中。 它将沿着</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/和其他也与URL匹配的&lt;Route&gt;匹配。</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/因此，侧边栏或面包屑或其他任何东西</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/需要您渲染多个事物</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/在同一网址的多个位置没有任何内容</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/超过多个&lt;Route&gt;。</span></span><br><span class=\"line\"><span class=\"regexp\">              &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">                key=&#123;index&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                path=&#123;route.path&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                exact=&#123;route.exact&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                children=&#123;&lt;route.sidebar /</span>&gt;&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">            ))&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span>, <span class=\"attr\">padding</span>: <span class=\"string\">\"10px\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;Switch&gt;</span><br><span class=\"line\">            &#123;routes.map(<span class=\"function\">(<span class=\"params\">route, index</span>) =&gt;</span> (</span><br><span class=\"line\">              <span class=\"comment\">// //渲染更多具有相同路径的&lt;Route&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">//，但这次是不同的组件。</span></span><br><span class=\"line\">              &lt;Route</span><br><span class=\"line\">                key=&#123;index&#125;</span><br><span class=\"line\">                path=&#123;route.path&#125;</span><br><span class=\"line\">                exact=&#123;route.exact&#125;</span><br><span class=\"line\">                children=&#123;&lt;route.main /&gt;&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">            ))&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个逻辑“路线”都有两个组成部分，一个用于</span></span><br><span class=\"line\">   <span class=\"comment\">//侧边栏，一个用于主区域。 我们想</span></span><br><span class=\"line\">   <span class=\"comment\">//当路径与当前URL匹配。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们将在2中使用此路由配置</span></span><br><span class=\"line\">   <span class=\"comment\">//景点：一次用于侧边栏，一次在主区域</span></span><br><span class=\"line\">   <span class=\"comment\">//内容部分。 所有路线都在同一条</span></span><br><span class=\"line\">   <span class=\"comment\">//将它们显示在&lt;Switch&gt;中的顺序。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    exact: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/bubblegum\"</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>bubblegum!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Bubblegum<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/shoelaces\"</span>,</span><br><span class=\"line\">    sidebar: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>shoelaces!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</span><br><span class=\"line\">    main: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Shoelaces<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SidebarExample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div style=&#123;&#123; <span class=\"attr\">display</span>: <span class=\"string\">\"flex\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;div</span><br><span class=\"line\">          style=&#123;&#123;</span><br><span class=\"line\">            padding: <span class=\"string\">\"10px\"</span>,</span><br><span class=\"line\">            width: <span class=\"string\">\"40%\"</span>,</span><br><span class=\"line\">            background: <span class=\"string\">\"#f0f0f0\"</span></span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;ul style=&#123;&#123; <span class=\"attr\">listStyleType</span>: <span class=\"string\">\"none\"</span>, <span class=\"attr\">padding</span>: <span class=\"number\">0</span> &#125;&#125;&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/bubblegum\"</span>&gt;Bubblegum&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/shoelaces\"</span>&gt;Shoelaces&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#123;routes.map((route, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">              /</span><span class=\"regexp\">/您可以在许多地方渲染&lt;Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/如您所愿，在您的应用中。 它将沿着</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/和其他也与URL匹配的&lt;Route&gt;匹配。</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/因此，侧边栏或面包屑或其他任何东西</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/需要您渲染多个事物</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/在同一网址的多个位置没有任何内容</span></span><br><span class=\"line\"><span class=\"regexp\">                             /</span><span class=\"regexp\">/超过多个&lt;Route&gt;。</span></span><br><span class=\"line\"><span class=\"regexp\">              &lt;Route</span></span><br><span class=\"line\"><span class=\"regexp\">                key=&#123;index&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                path=&#123;route.path&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                exact=&#123;route.exact&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                children=&#123;&lt;route.sidebar /</span>&gt;&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">            ))&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span>, <span class=\"attr\">padding</span>: <span class=\"string\">\"10px\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;Switch&gt;</span><br><span class=\"line\">            &#123;routes.map(<span class=\"function\">(<span class=\"params\">route, index</span>) =&gt;</span> (</span><br><span class=\"line\">              <span class=\"comment\">// //渲染更多具有相同路径的&lt;Route&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">//，但这次是不同的组件。</span></span><br><span class=\"line\">              &lt;Route</span><br><span class=\"line\">                key=&#123;index&#125;</span><br><span class=\"line\">                path=&#123;route.path&#125;</span><br><span class=\"line\">                exact=&#123;route.exact&#125;</span><br><span class=\"line\">                children=&#123;&lt;route.main /&gt;&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">            ))&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"this.setState 同步和异步特性：\n\n    setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。\n    setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\n    setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。\n  https://juejin.im/post/5bf1444cf265da614a3a1660\n  \n写一个闭包：\n\n```js\n    function foo() {\n        let a = 2;\n    \n        function bar() {\n            console.log( a );\n        }\n    \n        return bar;\n    }\n    \n    let baz = foo();\n    \n    baz();\n   ```\n\n防抖和节流：\n\n    函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。\n    函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。\n    \n  结合应用场景\n    \n  - debounce\n    search搜索联想，用户在不断输入值时，用防抖来节约请求资源。\n    window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次\n    \n    \n  - throttle\n    鼠标不断点击触发，mousedown(单位时间内只触发一次)\n    监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断\n    \n   https://juejin.im/post/5b8de829f265da43623c4261\n\n\n什么事真实dom?什么是虚拟dom?\n\n\nlocalStorage 和 sessionStorage 的区别？\n\n\nes6 的新特性：\n\n\nReact怎么判断重新渲染该组件：\n\n\njs的同源策略？\n\n\n\n手写一个冒泡排序算法：\n\n\n\njsde的执行顺序：\n\n\n\n","source":"_posts/面试题/react_面试题.md","raw":"this.setState 同步和异步特性：\n\n    setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。\n    setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\n    setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。\n  https://juejin.im/post/5bf1444cf265da614a3a1660\n  \n写一个闭包：\n\n```js\n    function foo() {\n        let a = 2;\n    \n        function bar() {\n            console.log( a );\n        }\n    \n        return bar;\n    }\n    \n    let baz = foo();\n    \n    baz();\n   ```\n\n防抖和节流：\n\n    函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。\n    函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。\n    \n  结合应用场景\n    \n  - debounce\n    search搜索联想，用户在不断输入值时，用防抖来节约请求资源。\n    window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次\n    \n    \n  - throttle\n    鼠标不断点击触发，mousedown(单位时间内只触发一次)\n    监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断\n    \n   https://juejin.im/post/5b8de829f265da43623c4261\n\n\n什么事真实dom?什么是虚拟dom?\n\n\nlocalStorage 和 sessionStorage 的区别？\n\n\nes6 的新特性：\n\n\nReact怎么判断重新渲染该组件：\n\n\njs的同源策略？\n\n\n\n手写一个冒泡排序算法：\n\n\n\njsde的执行顺序：\n\n\n\n","slug":"面试题/react_面试题","published":1,"date":"2020-01-14T03:22:51.671Z","updated":"2020-01-14T04:06:52.668Z","title":"面试题/react_面试题","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dej1rn0000esco3cdkbhju","content":"<p>this.setState 同步和异步特性：</p>\n<pre><code>setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。\nsetState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\nsetState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。</code></pre><p>  <a href=\"https://juejin.im/post/5bf1444cf265da614a3a1660\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bf1444cf265da614a3a1660</a></p>\n<p>写一个闭包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">baz();</span><br></pre></td></tr></table></figure>\n\n<p>防抖和节流：</p>\n<pre><code>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。\n函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。</code></pre><p>  结合应用场景</p>\n<ul>\n<li>debounce<br>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li>\n</ul>\n<ul>\n<li><p>throttle<br>鼠标不断点击触发，mousedown(单位时间内只触发一次)<br>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</p>\n<p><a href=\"https://juejin.im/post/5b8de829f265da43623c4261\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b8de829f265da43623c4261</a></p>\n</li>\n</ul>\n<p>什么事真实dom?什么是虚拟dom?</p>\n<p>localStorage 和 sessionStorage 的区别？</p>\n<p>es6 的新特性：</p>\n<p>React怎么判断重新渲染该组件：</p>\n<p>js的同源策略？</p>\n<p>手写一个冒泡排序算法：</p>\n<p>jsde的执行顺序：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this.setState 同步和异步特性：</p>\n<pre><code>setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。\nsetState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\nsetState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。</code></pre><p>  <a href=\"https://juejin.im/post/5bf1444cf265da614a3a1660\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bf1444cf265da614a3a1660</a></p>\n<p>写一个闭包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">baz();</span><br></pre></td></tr></table></figure>\n\n<p>防抖和节流：</p>\n<pre><code>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。\n函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。</code></pre><p>  结合应用场景</p>\n<ul>\n<li>debounce<br>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li>\n</ul>\n<ul>\n<li><p>throttle<br>鼠标不断点击触发，mousedown(单位时间内只触发一次)<br>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</p>\n<p><a href=\"https://juejin.im/post/5b8de829f265da43623c4261\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b8de829f265da43623c4261</a></p>\n</li>\n</ul>\n<p>什么事真实dom?什么是虚拟dom?</p>\n<p>localStorage 和 sessionStorage 的区别？</p>\n<p>es6 的新特性：</p>\n<p>React怎么判断重新渲染该组件：</p>\n<p>js的同源策略？</p>\n<p>手写一个冒泡排序算法：</p>\n<p>jsde的执行顺序：</p>\n"},{"_content":"    cnpm install mongodb\n\n### 创建数据库\n   要在MongoDB中创建数据库，请先创建一个MongoClient对象，然后使用正确的IP地址和要创建的数据库名称指定连接URL。\n   \n   如果数据库不存在，MongoDB将创建该数据库并建立连接。\n   \n   创建mydb数据库:\n   ```js\n    var MongoClient = require('mongodb').MongoClient;\n    var url = \"mongodb://localhost:27017/mydb\";\n    \n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      console.log(\"Database created!\");\n      db.close();\n    });\n```\n **重要提示：在MongoDB中，直到获得内容才创建数据库**\n  \n  在实际创建数据库（和集合）之前，MongoDB会等到您创建了一个集合（表）（至少包含一个文档（记录））后，再进行创建。\n### 创建集合\n**MongoDB中的集合与MySQL中的表相同**\n\n要在MongoDB中创建集合，请使用createCollection()方法：\n\n创建一个名为“客户”的集合：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.createCollection(\"customers\", function(err, res) {\n    if (err) throw err;\n    console.log(\"Collection created!\");\n    db.close();\n  });\n});\n```\n**重要提示：在MongoDB中，只有在获得内容后才创建集合！**\n\nMongoDB等到您插入文档后才真正创建集合。\n### 数据库操作\n-  insert\n\n    #### 插入集合\n             \n   要将记录或在MongoDB中调用的文档插入集合，我们使用insertOne（）方法。\n\n   **MongoDB中的文档与MySQL中的记录相同**\n   insertOne（）方法的第一个参数是一个对象，其中包含您要插入的文档中每个字段的名称和值。\n   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：例\n\n\n   将文档插入“customs”集合中：\n   ```js\n    var MongoClient = require('mongodb').MongoClient;\n    var url = \"mongodb://localhost:27017/\";\n    \n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      var dbo = db.db(\"mydb\");\n      var myobj = { name: \"Company Inc\", address: \"Highway 37\" };\n      dbo.collection(\"customers\").insertOne(myobj, function(err, res) {\n        if (err) throw err;\n        console.log(\"1 document inserted\");\n        db.close();\n      });\n    });\n```\n   **注意：如果您尝试在不存在的集合中插入文档，MongoDB将自动创建集合。**\n   \n   #### 插入多个文档\n   \n   要将多个文档插入MongoDB的集合中，我们使用insertMany()方法。\n   \n   insertMany()方法的第一个参数是一个对象数组，其中包含要插入的数据。\n   \n   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：\n   \n   在\"customrs\"集合插入多个文档\n   ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myobj = [\n    { name: 'John', address: 'Highway 71'},\n    { name: 'Peter', address: 'Lowstreet 4'},\n    { name: 'Amy', address: 'Apple st 652'},\n    { name: 'Hannah', address: 'Mountain 21'},\n    { name: 'Michael', address: 'Valley 345'},\n    { name: 'Sandy', address: 'Ocean blvd 2'},\n    { name: 'Betty', address: 'Green Grass 1'},\n    { name: 'Richard', address: 'Sky st 331'},\n    { name: 'Susan', address: 'One way 98'},\n    { name: 'Vicky', address: 'Yellow Garden 2'},\n    { name: 'Ben', address: 'Park Lane 38'},\n    { name: 'William', address: 'Central st 954'},\n    { name: 'Chuck', address: 'Main Road 989'},\n    { name: 'Viola', address: 'Sideway 1633'}\n  ];\n  dbo.collection(\"customers\").insertMany(myobj, function(err, res) {\n    if (err) throw err;\n    console.log(\"Number of documents inserted: \" + res.insertedCount);\n    db.close();\n  });\n});\n```\n\n   #### 结果对象\n   执行insertMany（）方法时，将返回结果对象。\n   结果对象包含有关插入如何影响数据库的信息\n   从上面的示例返回的对象如下所示：\n   ```js\n{\n  result: { ok: 1, n: 14 },\n  ops: [\n    { name: 'John', address: 'Highway 71', _id: 58fdbf5c0ef8a50b4cdd9a84 },\n    { name: 'Peter', address: 'Lowstreet 4', _id: 58fdbf5c0ef8a50b4cdd9a85 },\n    { name: 'Amy', address: 'Apple st 652', _id: 58fdbf5c0ef8a50b4cdd9a86 },\n    { name: 'Hannah', address: 'Mountain 21', _id: 58fdbf5c0ef8a50b4cdd9a87 },\n    { name: 'Michael', address: 'Valley 345', _id: 58fdbf5c0ef8a50b4cdd9a88 },\n    { name: 'Sandy', address: 'Ocean blvd 2', _id: 58fdbf5c0ef8a50b4cdd9a89 },\n    { name: 'Betty', address: 'Green Grass 1', _id: 58fdbf5c0ef8a50b4cdd9a8a },\n    { name: 'Richard', address: 'Sky st 331', _id: 58fdbf5c0ef8a50b4cdd9a8b },\n    { name: 'Susan', address: 'One way 98', _id: 58fdbf5c0ef8a50b4cdd9a8c },\n    { name: 'Vicky', address: 'Yellow Garden 2', _id: 58fdbf5c0ef8a50b4cdd9a8d },\n    { name: 'Ben', address: 'Park Lane 38', _id: 58fdbf5c0ef8a50b4cdd9a8e },\n    { name: 'William', address: 'Central st 954', _id: 58fdbf5c0ef8a50b4cdd9a8f },\n    { name: 'Chuck', address: 'Main Road 989', _id: 58fdbf5c0ef8a50b4cdd9a90 },\n    { name: 'Viola', address: 'Sideway 1633', _id: 58fdbf5c0ef8a50b4cdd9a91 } ],\n  insertedCount: 14,\n  insertedIds: [\n    58fdbf5c0ef8a50b4cdd9a84,\n    58fdbf5c0ef8a50b4cdd9a85,\n    58fdbf5c0ef8a50b4cdd9a86,\n    58fdbf5c0ef8a50b4cdd9a87,\n    58fdbf5c0ef8a50b4cdd9a88,\n    58fdbf5c0ef8a50b4cdd9a89,\n    58fdbf5c0ef8a50b4cdd9a8a,\n    58fdbf5c0ef8a50b4cdd9a8b,\n    58fdbf5c0ef8a50b4cdd9a8c,\n    58fdbf5c0ef8a50b4cdd9a8d,\n    58fdbf5c0ef8a50b4cdd9a8e,\n    58fdbf5c0ef8a50b4cdd9a8f\n    58fdbf5c0ef8a50b4cdd9a90,\n    58fdbf5c0ef8a50b4cdd9a91 ]\n}\n```\n属性值可以这样显示：\n\n   返回插入的文档数：\n   ```js\nconsole.log(res.insertedCount)\n```\n\n\n   #### _id字段\n   如果您未指定_id字段，则MongoDB将为您添加一个，并为每个文档分配唯一的ID。\n   \n   在上面的示例中，没有指定_id字段，从结果对象可以看到，MongoDB为每个文档分配了唯一的_id。\n\n   如果确实指定_id字段，则每个文档的值必须唯一：\n   \n  在带有指定_id字段的“products”表中插入三个记录：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myobj = [\n    { _id: 154, name: 'Chocolate Heaven'},\n    { _id: 155, name: 'Tasty Lemon'},\n    { _id: 156, name: 'Vanilla Dream'}\n  ];\n  dbo.collection(\"products\").insertMany(myobj, function(err, res) {\n    if (err) throw err;\n    console.log(res);\n    db.close();\n  });\n});\n```\n\n   #### Find\n   \n   **在MongoDB中，我们使用find和findOne方法在集合中查找数据。就像SELECT语句用于在MySQL数据库的表中查找数据一样。**\n    \n   ##### Find One\n   要从MongoDB中的集合中选择数据，我们可以使用findOne（）方法。\n   \n   findOne（）方法返回选择中的第一个匹配项。\n\n   findOne（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档（但仅返回第一个文档）。\n\n在客户集合中找到第一个文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").findOne({}, function(err, result) {\n    if (err) throw err;\n    console.log(result.name);\n    db.close();\n  });\n});\n```\n\n   #### Find All\n   要从MongoDB中的表中选择数据，我们还可以使用find（）方法。\n   \n   find（）方法返回选择中的所有匹配项。\n   \n   find（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档。\n   \n   \n   查找customs集合中的所有文档：\n   ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n```\n\n   #### Find Some\n   \n   find（）方法的第二个参数是投影对象，它描述要在结果中包括哪些字段。\n   \n   此参数是可选的，如果省略，则所有字段都将包含在结果中。\n   \n   返回客户集合中所有文档的“名称”和“地址”字段：\n   ```js\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { _id: 0, name: 1, address: 1 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n   **您不允许在同一对象中同时指定0和1值（除非其中一个字段是_id字段）。如果您指定值为0的字段，则所有其他字段的值为1，反之亦然：**\n   \n  此示例将从结果中排除“地址”：\n  ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { address: 0 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n**要排除_id字段，必须将其值设置为0：**\n\n如果在同一对象中同时指定0和1值，则会出现错误（除非其中一个字段是_id字段）：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { name: 1, address: 0 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 结果对象\n从上面示例的结果可以看出，可以将结果转换为包含每个文档作为对象的数组。要返回例如第三个文档的地址，只需引用第三个数组对象的address属性：\n\n返回第三个文档的地址：\n```js\nconsole.log(result[2].address);\n```\n\n### query\n\n#### Filter 结果\n\n在集合中查找文档时，可以使用查询对象过滤结果。\n\nfind（）方法的第一个参数是查询对象，用于限制搜索。\n\n查找address“ Park Lane 38”的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var query = { address: \"Park Lane 38\" };\n  dbo.collection(\"customers\").find(query).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 用正则表达式过滤\n您可以编写正则表达式以准确查找要搜索的内容。\n\n**正则表达式只能用于查询字符串。**\n\n要仅查找“address”字段以字母“ S”开头的文档，请使用正则表达式/ ^ S /：\n\n查找地址以字母“ S”开头的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var query = { address: /^S/ };\n  dbo.collection(\"customers\").find(query).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 排序结果\n\n使用sort（）方法对结果进行升序或降序排序。\n\nsort（）方法采用一个参数，这是一个定义排序顺序的对象。\n\n按名称的字母顺序对结果进行排序：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: 1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 降序排列\n在排序对象中使用值-1进行降序排序。\n\n```js\n{ name: 1 } // ascending\n{ name: -1 } // descending\n```\n\n按名称的字母顺序对结果进行反向排序：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: -1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### delete\n\n#### 删除文件\n\n要删除在MongoDB中调用的记录或文档，我们使用deleteOne（）方法。\n\ndeleteOne（）方法的第一个参数是一个查询对象，用于定义要删除的文档\n\n**注意：如果查询找到多个文档，则仅删除第一次出现的文档。**\n\n删除address \"Mountain 21\" 的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: 'Mountain 21' };\n  dbo.collection(\"customers\").deleteOne(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(\"1 document deleted\");\n    db.close();\n  });\n});\n```\n\n#### 删除许多\n要删除多个文档，请使用deleteMany（）方法。\n\ndeleteMany（）方法的第一个参数是一个查询对象，用于定义要删除的文档。\n\n删除地址以字母“ O”开头的所有文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^O/ };\n  dbo.collection(\"customers\").deleteMany(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(obj.result.n + \" document(s) deleted\");\n    db.close();\n  });\n});\n```\n\n#### 结果对象\n\ndeleteMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。\n\n大多数信息不是很重要，但该对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及有多少文档受到影响\n\n结果对象如下所示：\n```json\n{ n: 2, ok: 1 }\n```\n您可以使用此对象返回已删除文档的数量：\n\n返回已删除文档的数量：\n```js\nconsole.log(obj.result.n);\n```\n\n### drop集合\n您可以使用drop（）方法删除表或在MongoDB中调用的集合。\n\ndrop（）方法采用一个回调函数，该函数包含错误对象和result参数，如果成功删除了集合，则返回true，否则返回false。\n\n删除\"customs\"表：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").drop(function(err, delOK) {\n    if (err) throw err;\n    if (delOK) console.log(\"Collection deleted\");\n    db.close();\n  });\n});\n```\n\n#### db.dropCollection\n\n您也可以使用dropCollection（）方法删除表（集合）。\n\ndropCollection（）方法采用两个参数：集合的名称和回调函数。\n\n使用dropCollection（）删除“customs”集合：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.dropCollection(\"customers\", function(err, delOK) {\n    if (err) throw err;\n    if (delOK) console.log(\"Collection deleted\");\n    db.close();\n  });\n});\n```\n\n#### 更新文件\n\n您可以使用updateOne（）方法更新记录或在MongoDB中调用的文档。\n\nupdateOne（）方法的第一个参数是一个查询对象，用于定义要更新的文档。\n\n**注意：如果查询找到多个记录，则仅更新第一个记录。**\n\n第二个参数是定义文档新值的对象。\n\n使用address=\"Valley 345\"将文档更新为name =\"Mickey\"和address =\"Canyon 123\"：\n\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: \"Valley 345\" };\n  var newvalues = { $set: {name: \"Mickey\", address: \"Canyon 123\" } };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(\"1 document updated\");\n    db.close();\n  });\n});\n```\n\n#### 仅更新特定字段\n\n使用`$set`运算符时，仅更新指定的字段：\n\n\n将address =\"Valley 345\"更新为\"Canyon 123\"：\n\n```js\nvar myquery = { address: \"Valley 345\" };\n  var newvalues = { $set: { address: \"Canyon 123\" } };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n```\n\n#### 更新许多文件\n\n要更新所有符合查询条件的文档，请使用updateMany（）方法。\n\n更新名称以字母“ S”开头的所有文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^S/ };\n  var newvalues = {$set: {name: \"Minnie\"} };\n  dbo.collection(\"customers\").updateMany(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(res.result.nModified + \" document(s) updated\");\n    db.close();\n  });\n});\n```\n\n#### 结果对象\nupdateOne（）和updateMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。\n\n大多数信息并不是很重要，但对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及受影响的文档数量。\n\n结果对象如下所示：\n```js\n{ n: 1, nModified: 2, ok: 1 }\n```\n\n您可以使用此对象返回更新的文档数：\n\n返回更新的文档数：\n```js\nconsole.log(res.result.nModified);\n```\n\n### limit\n\n#### 限制结果\n\n为了限制MongoDB中的结果，我们使用limit（）方法。\n\nlimit（）方法采用一个参数，一个数字定义要返回的文档数。\n\n\n考虑您有一个\"customs\"集合：\n\n将结果限制为仅返回5个文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find().limit(5).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n\n### join\n\n#### join集合\n\nMongoDB不是关联数据库，但是您可以使用`$lookup`阶段执行左外部联接。\n\n通过`$lookup`阶段，您可以指定要与当前集合一起加入的集合以及应该匹配的字段。\n\n考虑您有一个\"orders\"集合和一个\"products\"集合：\n\n   orders\n    \n    [\n      { _id: 1, product_id: 154, status: 1 }\n    ]\n    \n  products\n  \n       [\n         { _id: 154, name: 'Chocolate Heaven' },\n         { _id: 155, name: 'Tasty Lemons' },\n         { _id: 156, name: 'Vanilla Dreams' }\n       ]\n       \n       \n\n将匹配的“products”文档加入“orders”集合：\n\n```js\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection('orders').aggregate([\n    { $lookup:\n       {\n         from: 'products',\n         localField: 'product_id',\n         foreignField: '_id',\n         as: 'orderdetails'\n       }\n     }\n    ]).toArray(function(err, res) {\n    if (err) throw err;\n    console.log(JSON.stringify(res));\n    db.close();\n  });\n});\n```\n\n从上面的结果可以看到，产品集合中的匹配文档以数组的形式包含在订单集合中。\n\n\n\n\n\n\n    \n","source":"_posts/NodeJS/MongoDB.md","raw":"    cnpm install mongodb\n\n### 创建数据库\n   要在MongoDB中创建数据库，请先创建一个MongoClient对象，然后使用正确的IP地址和要创建的数据库名称指定连接URL。\n   \n   如果数据库不存在，MongoDB将创建该数据库并建立连接。\n   \n   创建mydb数据库:\n   ```js\n    var MongoClient = require('mongodb').MongoClient;\n    var url = \"mongodb://localhost:27017/mydb\";\n    \n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      console.log(\"Database created!\");\n      db.close();\n    });\n```\n **重要提示：在MongoDB中，直到获得内容才创建数据库**\n  \n  在实际创建数据库（和集合）之前，MongoDB会等到您创建了一个集合（表）（至少包含一个文档（记录））后，再进行创建。\n### 创建集合\n**MongoDB中的集合与MySQL中的表相同**\n\n要在MongoDB中创建集合，请使用createCollection()方法：\n\n创建一个名为“客户”的集合：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.createCollection(\"customers\", function(err, res) {\n    if (err) throw err;\n    console.log(\"Collection created!\");\n    db.close();\n  });\n});\n```\n**重要提示：在MongoDB中，只有在获得内容后才创建集合！**\n\nMongoDB等到您插入文档后才真正创建集合。\n### 数据库操作\n-  insert\n\n    #### 插入集合\n             \n   要将记录或在MongoDB中调用的文档插入集合，我们使用insertOne（）方法。\n\n   **MongoDB中的文档与MySQL中的记录相同**\n   insertOne（）方法的第一个参数是一个对象，其中包含您要插入的文档中每个字段的名称和值。\n   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：例\n\n\n   将文档插入“customs”集合中：\n   ```js\n    var MongoClient = require('mongodb').MongoClient;\n    var url = \"mongodb://localhost:27017/\";\n    \n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      var dbo = db.db(\"mydb\");\n      var myobj = { name: \"Company Inc\", address: \"Highway 37\" };\n      dbo.collection(\"customers\").insertOne(myobj, function(err, res) {\n        if (err) throw err;\n        console.log(\"1 document inserted\");\n        db.close();\n      });\n    });\n```\n   **注意：如果您尝试在不存在的集合中插入文档，MongoDB将自动创建集合。**\n   \n   #### 插入多个文档\n   \n   要将多个文档插入MongoDB的集合中，我们使用insertMany()方法。\n   \n   insertMany()方法的第一个参数是一个对象数组，其中包含要插入的数据。\n   \n   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：\n   \n   在\"customrs\"集合插入多个文档\n   ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myobj = [\n    { name: 'John', address: 'Highway 71'},\n    { name: 'Peter', address: 'Lowstreet 4'},\n    { name: 'Amy', address: 'Apple st 652'},\n    { name: 'Hannah', address: 'Mountain 21'},\n    { name: 'Michael', address: 'Valley 345'},\n    { name: 'Sandy', address: 'Ocean blvd 2'},\n    { name: 'Betty', address: 'Green Grass 1'},\n    { name: 'Richard', address: 'Sky st 331'},\n    { name: 'Susan', address: 'One way 98'},\n    { name: 'Vicky', address: 'Yellow Garden 2'},\n    { name: 'Ben', address: 'Park Lane 38'},\n    { name: 'William', address: 'Central st 954'},\n    { name: 'Chuck', address: 'Main Road 989'},\n    { name: 'Viola', address: 'Sideway 1633'}\n  ];\n  dbo.collection(\"customers\").insertMany(myobj, function(err, res) {\n    if (err) throw err;\n    console.log(\"Number of documents inserted: \" + res.insertedCount);\n    db.close();\n  });\n});\n```\n\n   #### 结果对象\n   执行insertMany（）方法时，将返回结果对象。\n   结果对象包含有关插入如何影响数据库的信息\n   从上面的示例返回的对象如下所示：\n   ```js\n{\n  result: { ok: 1, n: 14 },\n  ops: [\n    { name: 'John', address: 'Highway 71', _id: 58fdbf5c0ef8a50b4cdd9a84 },\n    { name: 'Peter', address: 'Lowstreet 4', _id: 58fdbf5c0ef8a50b4cdd9a85 },\n    { name: 'Amy', address: 'Apple st 652', _id: 58fdbf5c0ef8a50b4cdd9a86 },\n    { name: 'Hannah', address: 'Mountain 21', _id: 58fdbf5c0ef8a50b4cdd9a87 },\n    { name: 'Michael', address: 'Valley 345', _id: 58fdbf5c0ef8a50b4cdd9a88 },\n    { name: 'Sandy', address: 'Ocean blvd 2', _id: 58fdbf5c0ef8a50b4cdd9a89 },\n    { name: 'Betty', address: 'Green Grass 1', _id: 58fdbf5c0ef8a50b4cdd9a8a },\n    { name: 'Richard', address: 'Sky st 331', _id: 58fdbf5c0ef8a50b4cdd9a8b },\n    { name: 'Susan', address: 'One way 98', _id: 58fdbf5c0ef8a50b4cdd9a8c },\n    { name: 'Vicky', address: 'Yellow Garden 2', _id: 58fdbf5c0ef8a50b4cdd9a8d },\n    { name: 'Ben', address: 'Park Lane 38', _id: 58fdbf5c0ef8a50b4cdd9a8e },\n    { name: 'William', address: 'Central st 954', _id: 58fdbf5c0ef8a50b4cdd9a8f },\n    { name: 'Chuck', address: 'Main Road 989', _id: 58fdbf5c0ef8a50b4cdd9a90 },\n    { name: 'Viola', address: 'Sideway 1633', _id: 58fdbf5c0ef8a50b4cdd9a91 } ],\n  insertedCount: 14,\n  insertedIds: [\n    58fdbf5c0ef8a50b4cdd9a84,\n    58fdbf5c0ef8a50b4cdd9a85,\n    58fdbf5c0ef8a50b4cdd9a86,\n    58fdbf5c0ef8a50b4cdd9a87,\n    58fdbf5c0ef8a50b4cdd9a88,\n    58fdbf5c0ef8a50b4cdd9a89,\n    58fdbf5c0ef8a50b4cdd9a8a,\n    58fdbf5c0ef8a50b4cdd9a8b,\n    58fdbf5c0ef8a50b4cdd9a8c,\n    58fdbf5c0ef8a50b4cdd9a8d,\n    58fdbf5c0ef8a50b4cdd9a8e,\n    58fdbf5c0ef8a50b4cdd9a8f\n    58fdbf5c0ef8a50b4cdd9a90,\n    58fdbf5c0ef8a50b4cdd9a91 ]\n}\n```\n属性值可以这样显示：\n\n   返回插入的文档数：\n   ```js\nconsole.log(res.insertedCount)\n```\n\n\n   #### _id字段\n   如果您未指定_id字段，则MongoDB将为您添加一个，并为每个文档分配唯一的ID。\n   \n   在上面的示例中，没有指定_id字段，从结果对象可以看到，MongoDB为每个文档分配了唯一的_id。\n\n   如果确实指定_id字段，则每个文档的值必须唯一：\n   \n  在带有指定_id字段的“products”表中插入三个记录：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myobj = [\n    { _id: 154, name: 'Chocolate Heaven'},\n    { _id: 155, name: 'Tasty Lemon'},\n    { _id: 156, name: 'Vanilla Dream'}\n  ];\n  dbo.collection(\"products\").insertMany(myobj, function(err, res) {\n    if (err) throw err;\n    console.log(res);\n    db.close();\n  });\n});\n```\n\n   #### Find\n   \n   **在MongoDB中，我们使用find和findOne方法在集合中查找数据。就像SELECT语句用于在MySQL数据库的表中查找数据一样。**\n    \n   ##### Find One\n   要从MongoDB中的集合中选择数据，我们可以使用findOne（）方法。\n   \n   findOne（）方法返回选择中的第一个匹配项。\n\n   findOne（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档（但仅返回第一个文档）。\n\n在客户集合中找到第一个文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").findOne({}, function(err, result) {\n    if (err) throw err;\n    console.log(result.name);\n    db.close();\n  });\n});\n```\n\n   #### Find All\n   要从MongoDB中的表中选择数据，我们还可以使用find（）方法。\n   \n   find（）方法返回选择中的所有匹配项。\n   \n   find（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档。\n   \n   \n   查找customs集合中的所有文档：\n   ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n```\n\n   #### Find Some\n   \n   find（）方法的第二个参数是投影对象，它描述要在结果中包括哪些字段。\n   \n   此参数是可选的，如果省略，则所有字段都将包含在结果中。\n   \n   返回客户集合中所有文档的“名称”和“地址”字段：\n   ```js\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { _id: 0, name: 1, address: 1 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n   **您不允许在同一对象中同时指定0和1值（除非其中一个字段是_id字段）。如果您指定值为0的字段，则所有其他字段的值为1，反之亦然：**\n   \n  此示例将从结果中排除“地址”：\n  ```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { address: 0 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n**要排除_id字段，必须将其值设置为0：**\n\n如果在同一对象中同时指定0和1值，则会出现错误（除非其中一个字段是_id字段）：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find({}, { projection: { name: 1, address: 0 } }).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 结果对象\n从上面示例的结果可以看出，可以将结果转换为包含每个文档作为对象的数组。要返回例如第三个文档的地址，只需引用第三个数组对象的address属性：\n\n返回第三个文档的地址：\n```js\nconsole.log(result[2].address);\n```\n\n### query\n\n#### Filter 结果\n\n在集合中查找文档时，可以使用查询对象过滤结果。\n\nfind（）方法的第一个参数是查询对象，用于限制搜索。\n\n查找address“ Park Lane 38”的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var query = { address: \"Park Lane 38\" };\n  dbo.collection(\"customers\").find(query).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 用正则表达式过滤\n您可以编写正则表达式以准确查找要搜索的内容。\n\n**正则表达式只能用于查询字符串。**\n\n要仅查找“address”字段以字母“ S”开头的文档，请使用正则表达式/ ^ S /：\n\n查找地址以字母“ S”开头的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var query = { address: /^S/ };\n  dbo.collection(\"customers\").find(query).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 排序结果\n\n使用sort（）方法对结果进行升序或降序排序。\n\nsort（）方法采用一个参数，这是一个定义排序顺序的对象。\n\n按名称的字母顺序对结果进行排序：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: 1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### 降序排列\n在排序对象中使用值-1进行降序排序。\n\n```js\n{ name: 1 } // ascending\n{ name: -1 } // descending\n```\n\n按名称的字母顺序对结果进行反向排序：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: -1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n#### delete\n\n#### 删除文件\n\n要删除在MongoDB中调用的记录或文档，我们使用deleteOne（）方法。\n\ndeleteOne（）方法的第一个参数是一个查询对象，用于定义要删除的文档\n\n**注意：如果查询找到多个文档，则仅删除第一次出现的文档。**\n\n删除address \"Mountain 21\" 的文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: 'Mountain 21' };\n  dbo.collection(\"customers\").deleteOne(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(\"1 document deleted\");\n    db.close();\n  });\n});\n```\n\n#### 删除许多\n要删除多个文档，请使用deleteMany（）方法。\n\ndeleteMany（）方法的第一个参数是一个查询对象，用于定义要删除的文档。\n\n删除地址以字母“ O”开头的所有文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^O/ };\n  dbo.collection(\"customers\").deleteMany(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(obj.result.n + \" document(s) deleted\");\n    db.close();\n  });\n});\n```\n\n#### 结果对象\n\ndeleteMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。\n\n大多数信息不是很重要，但该对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及有多少文档受到影响\n\n结果对象如下所示：\n```json\n{ n: 2, ok: 1 }\n```\n您可以使用此对象返回已删除文档的数量：\n\n返回已删除文档的数量：\n```js\nconsole.log(obj.result.n);\n```\n\n### drop集合\n您可以使用drop（）方法删除表或在MongoDB中调用的集合。\n\ndrop（）方法采用一个回调函数，该函数包含错误对象和result参数，如果成功删除了集合，则返回true，否则返回false。\n\n删除\"customs\"表：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").drop(function(err, delOK) {\n    if (err) throw err;\n    if (delOK) console.log(\"Collection deleted\");\n    db.close();\n  });\n});\n```\n\n#### db.dropCollection\n\n您也可以使用dropCollection（）方法删除表（集合）。\n\ndropCollection（）方法采用两个参数：集合的名称和回调函数。\n\n使用dropCollection（）删除“customs”集合：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.dropCollection(\"customers\", function(err, delOK) {\n    if (err) throw err;\n    if (delOK) console.log(\"Collection deleted\");\n    db.close();\n  });\n});\n```\n\n#### 更新文件\n\n您可以使用updateOne（）方法更新记录或在MongoDB中调用的文档。\n\nupdateOne（）方法的第一个参数是一个查询对象，用于定义要更新的文档。\n\n**注意：如果查询找到多个记录，则仅更新第一个记录。**\n\n第二个参数是定义文档新值的对象。\n\n使用address=\"Valley 345\"将文档更新为name =\"Mickey\"和address =\"Canyon 123\"：\n\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: \"Valley 345\" };\n  var newvalues = { $set: {name: \"Mickey\", address: \"Canyon 123\" } };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(\"1 document updated\");\n    db.close();\n  });\n});\n```\n\n#### 仅更新特定字段\n\n使用`$set`运算符时，仅更新指定的字段：\n\n\n将address =\"Valley 345\"更新为\"Canyon 123\"：\n\n```js\nvar myquery = { address: \"Valley 345\" };\n  var newvalues = { $set: { address: \"Canyon 123\" } };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n```\n\n#### 更新许多文件\n\n要更新所有符合查询条件的文档，请使用updateMany（）方法。\n\n更新名称以字母“ S”开头的所有文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^S/ };\n  var newvalues = {$set: {name: \"Minnie\"} };\n  dbo.collection(\"customers\").updateMany(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(res.result.nModified + \" document(s) updated\");\n    db.close();\n  });\n});\n```\n\n#### 结果对象\nupdateOne（）和updateMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。\n\n大多数信息并不是很重要，但对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及受影响的文档数量。\n\n结果对象如下所示：\n```js\n{ n: 1, nModified: 2, ok: 1 }\n```\n\n您可以使用此对象返回更新的文档数：\n\n返回更新的文档数：\n```js\nconsole.log(res.result.nModified);\n```\n\n### limit\n\n#### 限制结果\n\n为了限制MongoDB中的结果，我们使用limit（）方法。\n\nlimit（）方法采用一个参数，一个数字定义要返回的文档数。\n\n\n考虑您有一个\"customs\"集合：\n\n将结果限制为仅返回5个文档：\n```js\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find().limit(5).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n```\n\n\n### join\n\n#### join集合\n\nMongoDB不是关联数据库，但是您可以使用`$lookup`阶段执行左外部联接。\n\n通过`$lookup`阶段，您可以指定要与当前集合一起加入的集合以及应该匹配的字段。\n\n考虑您有一个\"orders\"集合和一个\"products\"集合：\n\n   orders\n    \n    [\n      { _id: 1, product_id: 154, status: 1 }\n    ]\n    \n  products\n  \n       [\n         { _id: 154, name: 'Chocolate Heaven' },\n         { _id: 155, name: 'Tasty Lemons' },\n         { _id: 156, name: 'Vanilla Dreams' }\n       ]\n       \n       \n\n将匹配的“products”文档加入“orders”集合：\n\n```js\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection('orders').aggregate([\n    { $lookup:\n       {\n         from: 'products',\n         localField: 'product_id',\n         foreignField: '_id',\n         as: 'orderdetails'\n       }\n     }\n    ]).toArray(function(err, res) {\n    if (err) throw err;\n    console.log(JSON.stringify(res));\n    db.close();\n  });\n});\n```\n\n从上面的结果可以看到，产品集合中的匹配文档以数组的形式包含在订单集合中。\n\n\n\n\n\n\n    \n","slug":"NodeJS/MongoDB","published":1,"date":"2020-01-14T06:48:28.400Z","updated":"2020-01-14T08:50:15.042Z","title":"NodeJS/MongoDB","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dn161w00014kco2qm00lx4","content":"<p>cnpm install mongodb</p>\n<h3><span id=\"创建数据库\">创建数据库</span></h3><p>   要在MongoDB中创建数据库，请先创建一个MongoClient对象，然后使用正确的IP地址和要创建的数据库名称指定连接URL。</p>\n<p>   如果数据库不存在，MongoDB将创建该数据库并建立连接。</p>\n<p>   创建mydb数据库:<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/mydb\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Database created!\"</span>);</span><br><span class=\"line\">  db.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br> <strong>重要提示：在MongoDB中，直到获得内容才创建数据库</strong></p>\n<p>  在实际创建数据库（和集合）之前，MongoDB会等到您创建了一个集合（表）（至少包含一个文档（记录））后，再进行创建。</p>\n<h3><span id=\"创建集合\">创建集合</span></h3><p><strong>MongoDB中的集合与MySQL中的表相同</strong></p>\n<p>要在MongoDB中创建集合，请使用createCollection()方法：</p>\n<p>创建一个名为“客户”的集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.createCollection(<span class=\"string\">\"customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection created!\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>重要提示：在MongoDB中，只有在获得内容后才创建集合！</strong></p>\n<p>MongoDB等到您插入文档后才真正创建集合。</p>\n<h3><span id=\"数据库操作\">数据库操作</span></h3><ul>\n<li><p>insert</p>\n<h4><span id=\"插入集合\">插入集合</span></h4><p>要将记录或在MongoDB中调用的文档插入集合，我们使用insertOne（）方法。</p>\n<p><strong>MongoDB中的文档与MySQL中的记录相同</strong><br>insertOne（）方法的第一个参数是一个对象，其中包含您要插入的文档中每个字段的名称和值。<br>它还带有一个回调函数，您可以在其中处理任何错误或插入结果：例</p>\n</li>\n</ul>\n<p>   将文档插入“customs”集合中：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Company Inc\"</span>, <span class=\"attr\">address</span>: <span class=\"string\">\"Highway 37\"</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).insertOne(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document inserted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>   <strong>注意：如果您尝试在不存在的集合中插入文档，MongoDB将自动创建集合。</strong></p>\n<h4><span id=\"插入多个文档\">插入多个文档</span></h4><p>   要将多个文档插入MongoDB的集合中，我们使用insertMany()方法。</p>\n<p>   insertMany()方法的第一个参数是一个对象数组，其中包含要插入的数据。</p>\n<p>   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：</p>\n<p>   在”customrs”集合插入多个文档<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).insertMany(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of documents inserted: \"</span> + res.insertedCount);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"结果对象\">结果对象</span></h4><p>   执行insertMany（）方法时，将返回结果对象。<br>   结果对象包含有关插入如何影响数据库的信息<br>   从上面的示例返回的对象如下所示：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  result: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">14</span> &#125;,</span><br><span class=\"line\">  ops: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a84 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a85 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a86 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a87 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a88 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a89 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8a &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8b &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8c &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8d &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8e &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8f &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a90 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a91 &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">14</span>,</span><br><span class=\"line\">  insertedIds: [</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a84,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a85,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a86,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a87,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a88,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a89,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8a,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8b,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8c,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8d,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8e,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8f</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a90,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a91 ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>属性值可以这样显示：</p>\n<p>   返回插入的文档数：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(res.insertedCount)</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"_id字段\">_id字段</span></h4><p>   如果您未指定_id字段，则MongoDB将为您添加一个，并为每个文档分配唯一的ID。</p>\n<p>   在上面的示例中，没有指定_id字段，从结果对象可以看到，MongoDB为每个文档分配了唯一的_id。</p>\n<p>   如果确实指定_id字段，则每个文档的值必须唯一：</p>\n<p>  在带有指定_id字段的“products”表中插入三个记录：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">154</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chocolate Heaven'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">155</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tasty Lemon'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">156</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vanilla Dream'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"products\"</span>).insertMany(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"find\">Find</span></h4><p>   <strong>在MongoDB中，我们使用find和findOne方法在集合中查找数据。就像SELECT语句用于在MySQL数据库的表中查找数据一样。</strong></p>\n<h5><span id=\"find-one\">Find One</span></h5><p>   要从MongoDB中的集合中选择数据，我们可以使用findOne（）方法。</p>\n<p>   findOne（）方法返回选择中的第一个匹配项。</p>\n<p>   findOne（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档（但仅返回第一个文档）。</p>\n<p>在客户集合中找到第一个文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).findOne(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.name);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"find-all\">Find All</span></h4><p>   要从MongoDB中的表中选择数据，我们还可以使用find（）方法。</p>\n<p>   find（）方法返回选择中的所有匹配项。</p>\n<p>   find（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档。</p>\n<p>   查找customs集合中的所有文档：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"find-some\">Find Some</span></h4><p>   find（）方法的第二个参数是投影对象，它描述要在结果中包括哪些字段。</p>\n<p>   此参数是可选的，如果省略，则所有字段都将包含在结果中。</p>\n<p>   返回客户集合中所有文档的“名称”和“地址”字段：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">_id</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">address</span>: <span class=\"number\">1</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>   <strong>您不允许在同一对象中同时指定0和1值（除非其中一个字段是_id字段）。如果您指定值为0的字段，则所有其他字段的值为1，反之亦然：</strong></p>\n<p>  此示例将从结果中排除“地址”：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">address</span>: <span class=\"number\">0</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br><strong>要排除_id字段，必须将其值设置为0：</strong></p>\n<p>如果在同一对象中同时指定0和1值，则会出现错误（除非其中一个字段是_id字段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">address</span>: <span class=\"number\">0</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"结果对象\">结果对象</span></h4><p>从上面示例的结果可以看出，可以将结果转换为包含每个文档作为对象的数组。要返回例如第三个文档的地址，只需引用第三个数组对象的address属性：</p>\n<p>返回第三个文档的地址：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">2</span>].address);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"query\">query</span></h3><h4><span id=\"filter-结果\">Filter 结果</span></h4><p>在集合中查找文档时，可以使用查询对象过滤结果。</p>\n<p>find（）方法的第一个参数是查询对象，用于限制搜索。</p>\n<p>查找address“ Park Lane 38”的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Park Lane 38\"</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(query).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"用正则表达式过滤\">用正则表达式过滤</span></h4><p>您可以编写正则表达式以准确查找要搜索的内容。</p>\n<p><strong>正则表达式只能用于查询字符串。</strong></p>\n<p>要仅查找“address”字段以字母“ S”开头的文档，请使用正则表达式/ ^ S /：</p>\n<p>查找地址以字母“ S”开头的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^S/</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(query).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"排序结果\">排序结果</span></h4><p>使用sort（）方法对结果进行升序或降序排序。</p>\n<p>sort（）方法采用一个参数，这是一个定义排序顺序的对象。</p>\n<p>按名称的字母顺序对结果进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mysort = &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().sort(mysort).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"降序排列\">降序排列</span></h4><p>在排序对象中使用值-1进行降序排序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// ascending</span></span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"number\">-1</span> &#125; <span class=\"comment\">// descending</span></span><br></pre></td></tr></table></figure>\n\n<p>按名称的字母顺序对结果进行反向排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mysort = &#123; <span class=\"attr\">name</span>: <span class=\"number\">-1</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().sort(mysort).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"delete\">delete</span></h4><h4><span id=\"删除文件\">删除文件</span></h4><p>要删除在MongoDB中调用的记录或文档，我们使用deleteOne（）方法。</p>\n<p>deleteOne（）方法的第一个参数是一个查询对象，用于定义要删除的文档</p>\n<p><strong>注意：如果查询找到多个文档，则仅删除第一次出现的文档。</strong></p>\n<p>删除address “Mountain 21” 的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).deleteOne(myquery, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"删除许多\">删除许多</span></h4><p>要删除多个文档，请使用deleteMany（）方法。</p>\n<p>deleteMany（）方法的第一个参数是一个查询对象，用于定义要删除的文档。</p>\n<p>删除地址以字母“ O”开头的所有文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^O/</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).deleteMany(myquery, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.result.n + <span class=\"string\">\" document(s) deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"结果对象\">结果对象</span></h4><p>deleteMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。</p>\n<p>大多数信息不是很重要，但该对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及有多少文档受到影响</p>\n<p>结果对象如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; n: 2, ok: 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>您可以使用此对象返回已删除文档的数量：</p>\n<p>返回已删除文档的数量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.result.n);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"drop集合\">drop集合</span></h3><p>您可以使用drop（）方法删除表或在MongoDB中调用的集合。</p>\n<p>drop（）方法采用一个回调函数，该函数包含错误对象和result参数，如果成功删除了集合，则返回true，否则返回false。</p>\n<p>删除”customs”表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).drop(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, delOK</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delOK) <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"dbdropcollection\">db.dropCollection</span></h4><p>您也可以使用dropCollection（）方法删除表（集合）。</p>\n<p>dropCollection（）方法采用两个参数：集合的名称和回调函数。</p>\n<p>使用dropCollection（）删除“customs”集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.dropCollection(<span class=\"string\">\"customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, delOK</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delOK) <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"更新文件\">更新文件</span></h4><p>您可以使用updateOne（）方法更新记录或在MongoDB中调用的文档。</p>\n<p>updateOne（）方法的第一个参数是一个查询对象，用于定义要更新的文档。</p>\n<p><strong>注意：如果查询找到多个记录，则仅更新第一个记录。</strong></p>\n<p>第二个参数是定义文档新值的对象。</p>\n<p>使用address=”Valley 345”将文档更新为name =”Mickey”和address =”Canyon 123”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Valley 345\"</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123; <span class=\"attr\">$set</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Mickey\"</span>, <span class=\"attr\">address</span>: <span class=\"string\">\"Canyon 123\"</span> &#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateOne(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document updated\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"仅更新特定字段\">仅更新特定字段</span></h4><p>使用<code>$set</code>运算符时，仅更新指定的字段：</p>\n<p>将address =”Valley 345”更新为”Canyon 123”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Valley 345\"</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Canyon 123\"</span> &#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateOne(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"更新许多文件\">更新许多文件</span></h4><p>要更新所有符合查询条件的文档，请使用updateMany（）方法。</p>\n<p>更新名称以字母“ S”开头的所有文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^S/</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123;<span class=\"attr\">$set</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Minnie\"</span>&#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateMany(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.result.nModified + <span class=\"string\">\" document(s) updated\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"结果对象\">结果对象</span></h4><p>updateOne（）和updateMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。</p>\n<p>大多数信息并不是很重要，但对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及受影响的文档数量。</p>\n<p>结果对象如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span>, <span class=\"attr\">nModified</span>: <span class=\"number\">2</span>, <span class=\"attr\">ok</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用此对象返回更新的文档数：</p>\n<p>返回更新的文档数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(res.result.nModified);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"limit\">limit</span></h3><h4><span id=\"限制结果\">限制结果</span></h4><p>为了限制MongoDB中的结果，我们使用limit（）方法。</p>\n<p>limit（）方法采用一个参数，一个数字定义要返回的文档数。</p>\n<p>考虑您有一个”customs”集合：</p>\n<p>将结果限制为仅返回5个文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().limit(<span class=\"number\">5</span>).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"join\">join</span></h3><h4><span id=\"join集合\">join集合</span></h4><p>MongoDB不是关联数据库，但是您可以使用<code>$lookup</code>阶段执行左外部联接。</p>\n<p>通过<code>$lookup</code>阶段，您可以指定要与当前集合一起加入的集合以及应该匹配的字段。</p>\n<p>考虑您有一个”orders”集合和一个”products”集合：</p>\n<p>   orders</p>\n<pre><code>[\n  { _id: 1, product_id: 154, status: 1 }\n]</code></pre><p>  products</p>\n<pre><code>[\n  { _id: 154, name: &apos;Chocolate Heaven&apos; },\n  { _id: 155, name: &apos;Tasty Lemons&apos; },\n  { _id: 156, name: &apos;Vanilla Dreams&apos; }\n]</code></pre><p>将匹配的“products”文档加入“orders”集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">'orders'</span>).aggregate([</span><br><span class=\"line\">    &#123; <span class=\"attr\">$lookup</span>:</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         <span class=\"keyword\">from</span>: <span class=\"string\">'products'</span>,</span><br><span class=\"line\">         localField: <span class=\"string\">'product_id'</span>,</span><br><span class=\"line\">         foreignField: <span class=\"string\">'_id'</span>,</span><br><span class=\"line\">         <span class=\"keyword\">as</span>: <span class=\"string\">'orderdetails'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    ]).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(res));</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>从上面的结果可以看到，产品集合中的匹配文档以数组的形式包含在订单集合中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>cnpm install mongodb</p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>   要在MongoDB中创建数据库，请先创建一个MongoClient对象，然后使用正确的IP地址和要创建的数据库名称指定连接URL。</p>\n<p>   如果数据库不存在，MongoDB将创建该数据库并建立连接。</p>\n<p>   创建mydb数据库:<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/mydb\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Database created!\"</span>);</span><br><span class=\"line\">  db.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br> <strong>重要提示：在MongoDB中，直到获得内容才创建数据库</strong></p>\n<p>  在实际创建数据库（和集合）之前，MongoDB会等到您创建了一个集合（表）（至少包含一个文档（记录））后，再进行创建。</p>\n<h3 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h3><p><strong>MongoDB中的集合与MySQL中的表相同</strong></p>\n<p>要在MongoDB中创建集合，请使用createCollection()方法：</p>\n<p>创建一个名为“客户”的集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.createCollection(<span class=\"string\">\"customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection created!\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>重要提示：在MongoDB中，只有在获得内容后才创建集合！</strong></p>\n<p>MongoDB等到您插入文档后才真正创建集合。</p>\n<h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><ul>\n<li><p>insert</p>\n<h4 id=\"插入集合\"><a href=\"#插入集合\" class=\"headerlink\" title=\"插入集合\"></a>插入集合</h4><p>要将记录或在MongoDB中调用的文档插入集合，我们使用insertOne（）方法。</p>\n<p><strong>MongoDB中的文档与MySQL中的记录相同</strong><br>insertOne（）方法的第一个参数是一个对象，其中包含您要插入的文档中每个字段的名称和值。<br>它还带有一个回调函数，您可以在其中处理任何错误或插入结果：例</p>\n</li>\n</ul>\n<p>   将文档插入“customs”集合中：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Company Inc\"</span>, <span class=\"attr\">address</span>: <span class=\"string\">\"Highway 37\"</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).insertOne(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document inserted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>   <strong>注意：如果您尝试在不存在的集合中插入文档，MongoDB将自动创建集合。</strong></p>\n<h4 id=\"插入多个文档\"><a href=\"#插入多个文档\" class=\"headerlink\" title=\"插入多个文档\"></a>插入多个文档</h4><p>   要将多个文档插入MongoDB的集合中，我们使用insertMany()方法。</p>\n<p>   insertMany()方法的第一个参数是一个对象数组，其中包含要插入的数据。</p>\n<p>   它还带有一个回调函数，您可以在其中处理任何错误或插入结果：</p>\n<p>   在”customrs”集合插入多个文档<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).insertMany(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of documents inserted: \"</span> + res.insertedCount);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结果对象\"><a href=\"#结果对象\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h4><p>   执行insertMany（）方法时，将返回结果对象。<br>   结果对象包含有关插入如何影响数据库的信息<br>   从上面的示例返回的对象如下所示：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  result: &#123; <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">n</span>: <span class=\"number\">14</span> &#125;,</span><br><span class=\"line\">  ops: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a84 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a85 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a86 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a87 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a88 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a89 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8a &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8b &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8c &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8d &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8e &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8f &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a90 &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>, <span class=\"attr\">_id</span>: <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a91 &#125; ],</span><br><span class=\"line\">  insertedCount: <span class=\"number\">14</span>,</span><br><span class=\"line\">  insertedIds: [</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a84,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a85,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a86,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a87,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a88,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a89,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8a,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8b,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8c,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8d,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8e,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a8f</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a90,</span><br><span class=\"line\">    <span class=\"number\">58</span>fdbf5c0ef8a50b4cdd9a91 ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>属性值可以这样显示：</p>\n<p>   返回插入的文档数：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(res.insertedCount)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"id字段\"><a href=\"#id字段\" class=\"headerlink\" title=\"_id字段\"></a>_id字段</h4><p>   如果您未指定_id字段，则MongoDB将为您添加一个，并为每个文档分配唯一的ID。</p>\n<p>   在上面的示例中，没有指定_id字段，从结果对象可以看到，MongoDB为每个文档分配了唯一的_id。</p>\n<p>   如果确实指定_id字段，则每个文档的值必须唯一：</p>\n<p>  在带有指定_id字段的“products”表中插入三个记录：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myobj = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">154</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chocolate Heaven'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">155</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tasty Lemon'</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">156</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vanilla Dream'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"products\"</span>).insertMany(myobj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Find\"><a href=\"#Find\" class=\"headerlink\" title=\"Find\"></a>Find</h4><p>   <strong>在MongoDB中，我们使用find和findOne方法在集合中查找数据。就像SELECT语句用于在MySQL数据库的表中查找数据一样。</strong></p>\n<h5 id=\"Find-One\"><a href=\"#Find-One\" class=\"headerlink\" title=\"Find One\"></a>Find One</h5><p>   要从MongoDB中的集合中选择数据，我们可以使用findOne（）方法。</p>\n<p>   findOne（）方法返回选择中的第一个匹配项。</p>\n<p>   findOne（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档（但仅返回第一个文档）。</p>\n<p>在客户集合中找到第一个文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).findOne(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.name);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Find-All\"><a href=\"#Find-All\" class=\"headerlink\" title=\"Find All\"></a>Find All</h4><p>   要从MongoDB中的表中选择数据，我们还可以使用find（）方法。</p>\n<p>   find（）方法返回选择中的所有匹配项。</p>\n<p>   find（）方法的第一个参数是查询对象。在此示例中，我们使用一个空的查询对象，该对象选择集合中的所有文档。</p>\n<p>   查找customs集合中的所有文档：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Find-Some\"><a href=\"#Find-Some\" class=\"headerlink\" title=\"Find Some\"></a>Find Some</h4><p>   find（）方法的第二个参数是投影对象，它描述要在结果中包括哪些字段。</p>\n<p>   此参数是可选的，如果省略，则所有字段都将包含在结果中。</p>\n<p>   返回客户集合中所有文档的“名称”和“地址”字段：<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">_id</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">address</span>: <span class=\"number\">1</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>   <strong>您不允许在同一对象中同时指定0和1值（除非其中一个字段是_id字段）。如果您指定值为0的字段，则所有其他字段的值为1，反之亦然：</strong></p>\n<p>  此示例将从结果中排除“地址”：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">address</span>: <span class=\"number\">0</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br><strong>要排除_id字段，必须将其值设置为0：</strong></p>\n<p>如果在同一对象中同时指定0和1值，则会出现错误（除非其中一个字段是_id字段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(&#123;&#125;, &#123; <span class=\"attr\">projection</span>: &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">address</span>: <span class=\"number\">0</span> &#125; &#125;).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果对象-1\"><a href=\"#结果对象-1\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h4><p>从上面示例的结果可以看出，可以将结果转换为包含每个文档作为对象的数组。要返回例如第三个文档的地址，只需引用第三个数组对象的address属性：</p>\n<p>返回第三个文档的地址：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">2</span>].address);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><h4 id=\"Filter-结果\"><a href=\"#Filter-结果\" class=\"headerlink\" title=\"Filter 结果\"></a>Filter 结果</h4><p>在集合中查找文档时，可以使用查询对象过滤结果。</p>\n<p>find（）方法的第一个参数是查询对象，用于限制搜索。</p>\n<p>查找address“ Park Lane 38”的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Park Lane 38\"</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(query).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用正则表达式过滤\"><a href=\"#用正则表达式过滤\" class=\"headerlink\" title=\"用正则表达式过滤\"></a>用正则表达式过滤</h4><p>您可以编写正则表达式以准确查找要搜索的内容。</p>\n<p><strong>正则表达式只能用于查询字符串。</strong></p>\n<p>要仅查找“address”字段以字母“ S”开头的文档，请使用正则表达式/ ^ S /：</p>\n<p>查找地址以字母“ S”开头的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^S/</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find(query).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排序结果\"><a href=\"#排序结果\" class=\"headerlink\" title=\"排序结果\"></a>排序结果</h4><p>使用sort（）方法对结果进行升序或降序排序。</p>\n<p>sort（）方法采用一个参数，这是一个定义排序顺序的对象。</p>\n<p>按名称的字母顺序对结果进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mysort = &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().sort(mysort).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"降序排列\"><a href=\"#降序排列\" class=\"headerlink\" title=\"降序排列\"></a>降序排列</h4><p>在排序对象中使用值-1进行降序排序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// ascending</span></span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"number\">-1</span> &#125; <span class=\"comment\">// descending</span></span><br></pre></td></tr></table></figure>\n\n<p>按名称的字母顺序对结果进行反向排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mysort = &#123; <span class=\"attr\">name</span>: <span class=\"number\">-1</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().sort(mysort).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p>要删除在MongoDB中调用的记录或文档，我们使用deleteOne（）方法。</p>\n<p>deleteOne（）方法的第一个参数是一个查询对象，用于定义要删除的文档</p>\n<p><strong>注意：如果查询找到多个文档，则仅删除第一次出现的文档。</strong></p>\n<p>删除address “Mountain 21” 的文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).deleteOne(myquery, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除许多\"><a href=\"#删除许多\" class=\"headerlink\" title=\"删除许多\"></a>删除许多</h4><p>要删除多个文档，请使用deleteMany（）方法。</p>\n<p>deleteMany（）方法的第一个参数是一个查询对象，用于定义要删除的文档。</p>\n<p>删除地址以字母“ O”开头的所有文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^O/</span> &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).deleteMany(myquery, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.result.n + <span class=\"string\">\" document(s) deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果对象-2\"><a href=\"#结果对象-2\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h4><p>deleteMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。</p>\n<p>大多数信息不是很重要，但该对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及有多少文档受到影响</p>\n<p>结果对象如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; n: 2, ok: 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>您可以使用此对象返回已删除文档的数量：</p>\n<p>返回已删除文档的数量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.result.n);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"drop集合\"><a href=\"#drop集合\" class=\"headerlink\" title=\"drop集合\"></a>drop集合</h3><p>您可以使用drop（）方法删除表或在MongoDB中调用的集合。</p>\n<p>drop（）方法采用一个回调函数，该函数包含错误对象和result参数，如果成功删除了集合，则返回true，否则返回false。</p>\n<p>删除”customs”表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).drop(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, delOK</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delOK) <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"db-dropCollection\"><a href=\"#db-dropCollection\" class=\"headerlink\" title=\"db.dropCollection\"></a>db.dropCollection</h4><p>您也可以使用dropCollection（）方法删除表（集合）。</p>\n<p>dropCollection（）方法采用两个参数：集合的名称和回调函数。</p>\n<p>使用dropCollection（）删除“customs”集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.dropCollection(<span class=\"string\">\"customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, delOK</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delOK) <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Collection deleted\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新文件\"><a href=\"#更新文件\" class=\"headerlink\" title=\"更新文件\"></a>更新文件</h4><p>您可以使用updateOne（）方法更新记录或在MongoDB中调用的文档。</p>\n<p>updateOne（）方法的第一个参数是一个查询对象，用于定义要更新的文档。</p>\n<p><strong>注意：如果查询找到多个记录，则仅更新第一个记录。</strong></p>\n<p>第二个参数是定义文档新值的对象。</p>\n<p>使用address=”Valley 345”将文档更新为name =”Mickey”和address =”Canyon 123”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Valley 345\"</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123; <span class=\"attr\">$set</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Mickey\"</span>, <span class=\"attr\">address</span>: <span class=\"string\">\"Canyon 123\"</span> &#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateOne(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 document updated\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仅更新特定字段\"><a href=\"#仅更新特定字段\" class=\"headerlink\" title=\"仅更新特定字段\"></a>仅更新特定字段</h4><p>使用<code>$set</code>运算符时，仅更新指定的字段：</p>\n<p>将address =”Valley 345”更新为”Canyon 123”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Valley 345\"</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123; <span class=\"attr\">$set</span>: &#123; <span class=\"attr\">address</span>: <span class=\"string\">\"Canyon 123\"</span> &#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateOne(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新许多文件\"><a href=\"#更新许多文件\" class=\"headerlink\" title=\"更新许多文件\"></a>更新许多文件</h4><p>要更新所有符合查询条件的文档，请使用updateMany（）方法。</p>\n<p>更新名称以字母“ S”开头的所有文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myquery = &#123; <span class=\"attr\">address</span>: <span class=\"regexp\">/^S/</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newvalues = &#123;<span class=\"attr\">$set</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Minnie\"</span>&#125; &#125;;</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).updateMany(myquery, newvalues, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.result.nModified + <span class=\"string\">\" document(s) updated\"</span>);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果对象-3\"><a href=\"#结果对象-3\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h4><p>updateOne（）和updateMany（）方法返回一个对象，该对象包含有关执行如何影响数据库的信息。</p>\n<p>大多数信息并不是很重要，但对象内部的一个对象称为“结果”，它告诉我们执行是否正常以及受影响的文档数量。</p>\n<p>结果对象如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span>, <span class=\"attr\">nModified</span>: <span class=\"number\">2</span>, <span class=\"attr\">ok</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用此对象返回更新的文档数：</p>\n<p>返回更新的文档数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(res.result.nModified);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h3><h4 id=\"限制结果\"><a href=\"#限制结果\" class=\"headerlink\" title=\"限制结果\"></a>限制结果</h4><p>为了限制MongoDB中的结果，我们使用limit（）方法。</p>\n<p>limit（）方法采用一个参数，一个数字定义要返回的文档数。</p>\n<p>考虑您有一个”customs”集合：</p>\n<p>将结果限制为仅返回5个文档：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://localhost:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">\"customers\"</span>).find().limit(<span class=\"number\">5</span>).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><h4 id=\"join集合\"><a href=\"#join集合\" class=\"headerlink\" title=\"join集合\"></a>join集合</h4><p>MongoDB不是关联数据库，但是您可以使用<code>$lookup</code>阶段执行左外部联接。</p>\n<p>通过<code>$lookup</code>阶段，您可以指定要与当前集合一起加入的集合以及应该匹配的字段。</p>\n<p>考虑您有一个”orders”集合和一个”products”集合：</p>\n<p>   orders</p>\n<pre><code>[\n  { _id: 1, product_id: 154, status: 1 }\n]</code></pre><p>  products</p>\n<pre><code>[\n  { _id: 154, name: &apos;Chocolate Heaven&apos; },\n  { _id: 155, name: &apos;Tasty Lemons&apos; },\n  { _id: 156, name: &apos;Vanilla Dreams&apos; }\n]</code></pre><p>将匹配的“products”文档加入“orders”集合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"mongodb://127.0.0.1:27017/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dbo = db.db(<span class=\"string\">\"mydb\"</span>);</span><br><span class=\"line\">  dbo.collection(<span class=\"string\">'orders'</span>).aggregate([</span><br><span class=\"line\">    &#123; <span class=\"attr\">$lookup</span>:</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         <span class=\"keyword\">from</span>: <span class=\"string\">'products'</span>,</span><br><span class=\"line\">         localField: <span class=\"string\">'product_id'</span>,</span><br><span class=\"line\">         foreignField: <span class=\"string\">'_id'</span>,</span><br><span class=\"line\">         <span class=\"keyword\">as</span>: <span class=\"string\">'orderdetails'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    ]).toArray(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(res));</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>从上面的结果可以看到，产品集合中的匹配文档以数组的形式包含在订单集合中。</p>\n"},{"_content":"\n## 安装MySQL驱动程序\n`npm install mysql`\n\n\n## 建立连接\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n});\n```\n\n\n## 查询数据库\n\n```js\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Result: \" + result);\n  });\n});\n```\n\n## 创建数据库\n\n要在MySQL中创建数据库，请使用`CREATE DATABASE`语句：\n\n`创建一个名为“ mydb”的数据库：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  con.query(\"CREATE DATABASE mydb\", function (err, result) {\n    if (err) throw err;\n    console.log(\"Database created\");\n  });\n});\n```\n## 创建表格\n\n要在MySQL中创建表，请使用`CREATE TABLE`语句。\n确保在创建连接时定义数据库的名称。\n\n`创建一个名为“ customers”的表：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table created\");\n  });\n});\n```\n\n## primary key\n创建表时，还应为每个记录创建一个具有唯一键的列。\n\n这可以通过将列定义为`INT AUTO_INCREMENT PRIMARY KEY`来完成，该列将为每个记录插入一个唯一编号。从1开始，每条记录增加1。\n\n`创建表时创建主键：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table created\");\n  });\n});\n```\n\n如果该表已经存在，请使用ALTER TABLE关键字：\n\n`在现有表上创建主键：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table altered\");\n  });\n});\n```\n\n## 插入表格\n\n`在“customers”表中插入一条记录：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"INSERT INTO customers (name, address) VALUES ('Company Inc', 'Highway 37')\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"1 record inserted\");\n  });\n});\n```\n\n\n## 插入多条记录\n\n要插入多个记录，请创建一个包含值的数组，然后在sql中插入问号，该问号将被值数组替换：\n`INSERT INTO customers (name, address) VALUES ?`\n\n`用数据填充“客户”表：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"INSERT INTO customers (name, address) VALUES ?\";\n  var values = [\n    ['John', 'Highway 71'],\n    ['Peter', 'Lowstreet 4'],\n    ['Amy', 'Apple st 652'],\n    ['Hannah', 'Mountain 21'],\n    ['Michael', 'Valley 345'],\n    ['Sandy', 'Ocean blvd 2'],\n    ['Betty', 'Green Grass 1'],\n    ['Richard', 'Sky st 331'],\n    ['Susan', 'One way 98'],\n    ['Vicky', 'Yellow Garden 2'],\n    ['Ben', 'Park Lane 38'],\n    ['William', 'Central st 954'],\n    ['Chuck', 'Main Road 989'],\n    ['Viola', 'Sideway 1633']\n  ];\n  con.query(sql, [values], function (err, result) {\n    if (err) throw err;\n    console.log(\"Number of records inserted: \" + result.affectedRows);\n  });\n});\n```\n\n## 结果对象\n\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示：\n\n```json\n{\n  fieldCount: 0,\n  affectedRows: 14,\n  insertId: 0,\n  serverStatus: 2,\n  warningCount: 0,\n  message: '\\'Records:14  Duplicated: 0  Warnings: 0',\n  protocol41: true,\n  changedRows: 0\n}\n```\n属性值可以这样显示\n\n`返回受影响的行数`:\n```js\nconsole.log(result.affectedRows)\n```\n\n## 获取插入的ID\n\n对于具有自动递增ID字段的表，可以通过询问结果对象来获取刚插入的行的ID。\n\n**注意：为了能够获得插入的ID，只能插入一行。**\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"INSERT INTO customers (name, address) VALUES ('Michelle', 'Blue Village 1')\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"1 record inserted, ID: \" + result.insertId);\n  });\n});\n```\n\n\n# 查询表（select from table）\n\n1.要从MySQL中的表中选择数据，请使用“ SELECT”语句。\n\n`从“customers”表中选择所有记录，并显示结果对象：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**SELECT 将返回所有列**\n\n2.要仅选择表中的某些列，请使用“ SELECT”语句，后跟列名\n\n`从“customers”表中选择名称和地址，并显示返回对象：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT name, address FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n\n```\n\n结果\n```js\n[\n  { name: 'John', address: 'Highway 71'},\n  { name: 'Peter', address: 'Lowstreet 4'},\n  { name: 'Amy', address: 'Apple st 652'},\n  { name: 'Hannah', address: 'Mountain 21'},\n  { name: 'Michael', address: 'Valley 345'},\n  { name: 'Sandy', address: 'Ocean blvd 2'},\n  { name: 'Betty', address: 'Green Grass 1'},\n  { name: 'Richard', address: 'Sky st 331'},\n  { name: 'Susan', address: 'One way 98'},\n  { name: 'Vicky', address: 'Yellow Garden 2'},\n  { name: 'Ben', address: 'Park Lane 38'},\n  { name: 'William', address: 'Central st 954'},\n  { name: 'Chuck', address: 'Main Road 989'},\n  { name: 'Viola', address: 'Sideway 1633'}\n]\n```\n\n## 结果对象\n\n从上面示例的结果中可以看到，结果对象是一个包含每一行作为对象的数组。\n\n要返回例如第三条记录的地址，只需参考第三条数组对象的address属性：\n\n`返回第三条记录的地址：`\n```js\nconsole.log(result[2].address);\n```\n\n## 字段对象\n\n回调函数的第三个参数是一个数组，其中包含有关结果中每个字段的信息。\n\n`从“customers”表中选择所有记录，然后显示字段对象：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT name, address FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(fields);\n  });\n});\n```\n结果\n```js\n[\n  {\n    catalog: 'def',\n    db: 'mydb',\n    table: 'customers',\n    orgTable: 'customers',\n    name: 'name',\n    orgName: 'address',\n    charsetNr: 33,\n    length: 765,\n    type: 253,\n    flags: 0,\n    decimals: 0,\n    default: undefined,\n    zeroFill: false,\n    protocol41: true\n  },\n  {\n    catalog: 'def',\n    db: 'mydb',\n    table: 'customers',\n    orgTable: 'customers',\n    name: 'address',\n    orgName: 'address',\n    charsetNr: 33,\n    length: 765,\n    type: 253,\n    flags: 0,\n    decimals: 0,\n    default: undefined,\n    zeroFill: false,\n    protocol41: true\n  {\n]\n```\n\n# where\n\n## 选择带过滤器\n从表中选择记录时，可以使用“ WHERE”语句过滤选择：\n\n`选择地址为“ Park Lane 38”的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers WHERE address = 'Park Lane 38'\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n## 通配符\n您也可以选择以给定字母或短语开头，包含或结尾的记录。\n\n使用'％'通配符表示零个，一个或多个字符：\n\n`选择地址以字母“ S”开头的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers WHERE address LIKE 'S%'\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n## 转义查询值\n当查询值是用户提供的变量时，应转义这些值。\n\n这是为了防止SQL注入，这是破坏或滥用数据库的常见Web黑客技术。\n\nMySQL模块具有以下方法来转义查询值：\n\n`使用以下mysql.escape() 方法转义查询值：`\n```js\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE address = ' + mysql.escape(adr);\ncon.query(sql, function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n\n`通过使用占位符? 方法转义查询值：`\n```js\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE address = ?';\ncon.query(sql, [adr], function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n如果您有多个占位符，则数组按该顺序包含多个值：\n```js\nvar name = 'Amy';\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE name = ? OR address = ?';\ncon.query(sql, [name, adr], function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n\n# sort result\n\n使用ORDER BY语句对结果进行升序或降序排序。\n\n缺省情况下，ORDER BY关键字对结果进行升序排序。要按降序对结果进行排序，请使用DESC关键字。\n\n`按名称的字母顺序对结果进行排序：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers ORDER BY name\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n结果\n```js\n[\n  { id: 3, name: 'Amy', address: 'Apple st 652'},\n  { id: 11, name: 'Ben', address: 'Park Lane 38'},\n  { id: 7, name: 'Betty', address: 'Green Grass 1'},\n  { id: 13, name: 'Chuck', address: 'Main Road 989'},\n  { id: 4, name: 'Hannah', address: 'Mountain 21'},\n  { id: 1, name: 'John', address: 'Higheay 71'},\n  { id: 5, name: 'Michael', address: 'Valley 345'},\n  { id: 2, name: 'Peter', address: 'Lowstreet 4'},\n  { id: 8, name: 'Richard', address: 'Sky st 331'},\n  { id: 6, name: 'Sandy', address: 'Ocean blvd 2'},\n  { id: 9, name: 'Susan', address: 'One way 98'},\n  { id: 10, name: 'Vicky', address: 'Yellow Garden 2'},\n  { id: 14, name: 'Viola', address: 'Sideway 1633'},\n  { id: 12, name: 'William', address: 'Central st 954'}\n]\n```\n\n## 按订单排序\n\n使用DESC关键字以降序对结果进行排序。\n\n`按name的字母顺序对结果进行反向排序：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers ORDER BY name DESC\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n结果\n```js\n[\n  { id: 12, name: 'William', address: 'Central st 954'},\n  { id: 14, name: 'Viola', address: 'Sideway 1633'},\n  { id: 10, name: 'Vicky', address: 'Yellow Garden 2'},\n  { id: 9, name: 'Susan', address: 'One way 98'},\n  { id: 6, name: 'Sandy', address: 'Ocean blvd 2'},\n  { id: 8, name: 'Richard', address: 'Sky st 331'},\n  { id: 2, name: 'Peter', address: 'Lowstreet 4'},\n  { id: 5, name: 'Michael', address: 'Valley 345'},\n  { id: 1, name: 'John', address: 'Higheay 71'},\n  { id: 4, name: 'Hannah', address: 'Mountain 21'},\n  { id: 13, name: 'Chuck', address: 'Main Road 989'},\n  { id: 7, name: 'Betty', address: 'Green Grass 1'},\n  { id: 11, name: 'Ben', address: 'Park Lane 38'},\n  { id: 3, name: 'Amy', address: 'Apple st 652'}\n]\n```\n\n# delete\n\n## 删除记录\n您可以使用“ DELETE FROM”语句从现有表中删除记录：\n`删除地址为“ Mountain 21”的所有记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DELETE FROM customers WHERE address = 'Mountain 21'\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Number of records deleted: \" + result.affectedRows);\n  });\n});\n```\n**请注意DELETE语法中的WHERE子句： WHERE子句指定应删除的记录。如果省略WHERE子句，则将删除所有记录！**\n\n## 结果对象\n\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示：\n```js\n{\n  fieldCount: 0,\n  affectedRows: 1,\n  insertId: 0,\n  serverStatus: 34,\n  warningCount: 0,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n属性值可以这样显示\n`\nconsole.log(result.affectedRows)\n`\n\n# Drop Table\n\n## 删除表格\n您可以使用“ DROP TABLE”语句删除现有表：\n\n`删除表“ customers”：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DROP TABLE customers\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table deleted\");\n  });\n});\n```\n\n\n## 仅在存在时drop\n如果您要删除的表已被删除，或者由于任何其他原因不存在，则可以使用IF EXISTS关键字来避免出现错误。\n`删除表“ customers”（如果存在）：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DROP TABLE IF EXISTS customers\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n如果该表存在，则结果对象将如下所示：\n\n```js\n{\n  fieldCount: 0,\n  affectedRows: 0,\n  insertId: 0,\n  serverstatus: 2,\n  warningCount: 0,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n\n如果该表不存在，则结果对象将如下所示：\n```js\n{\n  fieldCount: 0,\n  affectedRows: 0,\n  insertId: 0,\n  serverstatus: 2,\n  warningCount: 1,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n如您所见，唯一的区别是如果表不存在，则warningCount属性设置为1。\n\n# update\n\n## update表\n您可以使用“ UPDATE”语句来更新表中的现有记录：\n\n`将地址列从“ Valley 345”覆盖为“ Canyon 123”：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result.affectedRows + \" record(s) updated\");\n  });\n});\n```\n\n**请注意UPDATE语法中的WHERE子句： WHERE子句指定应更新的记录。如果省略WHERE子句，所有记录将被更新！**\n\n## 结果对象\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示\n```js\n{\n  fieldCount: 0,\n  affectedRows: 1,\n  insertId: 0,\n  serverStatus: 34,\n  warningCount: 0,\n  message: '(Rows matched: 1 Changed: 1 Warnings: 0',\n  protocol41: true,\n  changedRows: 1\n}\n```\n\n# limit\n\n## 限制结果\n1.您可以使用“ LIMIT”语句来限制查询返回的记录数：\n\n`在“customers”表中选择前5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 5\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n## 从另一个位置开始\n2.如果要从第三条记录开始返回五条记录，则可以使用“ OFFSET”关键字：\n\n`从位置3开始，并返回接下来的5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 5 OFFSET 2\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n注意： “offset 2”表示从第三个位置开始，而不是第二个位置！\n\n## 较短的语法\n3.您还可以使用像这样的“ LIMIT 2、5”这样编写SQL语句，该语句返回与上面的偏移量示例相同的结果：\n\n`从位置3开始，并返回接下来的5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 2, 5\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**注意：数字是相反的：“ LIMIT 2、5”与“ LIMIT 5 OFFSET 2”相同**\n\n# JOIN\n\n## 联接两个或更多表\n您可以使用JOIN语句基于两个或多个表之间的相关列来合并行。\n\n考虑您有一个“customers”表和一个“production”表：\n\n使用者\n```js\n[\n  { id: 1, name: 'John', favorite_product: 154},\n  { id: 2, name: 'Peter', favorite_product: 154},\n  { id: 3, name: 'Amy', favorite_product: 155},\n  { id: 4, name: 'Hannah', favorite_product:},\n  { id: 5, name: 'Michael', favorite_product:}\n]\n```\n产品展示\n```js\n[\n  { id: 154, name: 'Chocolate Heaven' },\n  { id: 155, name: 'Tasty Lemons' },\n  { id: 156, name: 'Vanilla Dreams' }\n]\n```\n可以通过使用用户favorite_product字段和产品 id字段来组合这两个表。\n\n`选择两个表中都匹配的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT users.name AS user, products.name AS favorite FROM users JOIN products ON users.favorite_product = products.id\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**注意：您可以使用INNER JOIN代替JOIN。他们都会给你相同的结果。**\n\n## left JOIN\n如果要返回所有用户，无论他们是否拥有喜欢的产品，请使用LEFT JOIN语句：\n\n`选择所有用户及其喜爱的产品：`\n```js\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nLEFT JOIN products ON users.favorite_product = products.id\n```\n\n## right JOIN\n如果您想退回所有产品，并且将其作为收藏的用户，即使没有用户将其作为收藏，请使用RIGHT JOIN语句：\n\n`选择所有产品以及将其作为收藏的用户：`\n```js\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nRIGHT JOIN products ON users.favorite_product = products.id\n```\n结果\n```js\n[\n  { user: 'John', favorite: 'Chocolate Heaven' },\n  { user: 'Peter', favorite: 'Chocolate Heaven' },\n  { user: 'Amy', favorite: 'Tasty Lemons' },\n  { user: null, favorite: 'Vanilla Dreams' }\n]\n```\n**注意：没有喜欢的产品的汉娜（Hannah）和迈克尔（Michael）不包括在结果中。**\n\n\n","source":"_posts/NodeJS/MySQL.md","raw":"\n## 安装MySQL驱动程序\n`npm install mysql`\n\n\n## 建立连接\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n});\n```\n\n\n## 查询数据库\n\n```js\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Result: \" + result);\n  });\n});\n```\n\n## 创建数据库\n\n要在MySQL中创建数据库，请使用`CREATE DATABASE`语句：\n\n`创建一个名为“ mydb”的数据库：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  con.query(\"CREATE DATABASE mydb\", function (err, result) {\n    if (err) throw err;\n    console.log(\"Database created\");\n  });\n});\n```\n## 创建表格\n\n要在MySQL中创建表，请使用`CREATE TABLE`语句。\n确保在创建连接时定义数据库的名称。\n\n`创建一个名为“ customers”的表：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table created\");\n  });\n});\n```\n\n## primary key\n创建表时，还应为每个记录创建一个具有唯一键的列。\n\n这可以通过将列定义为`INT AUTO_INCREMENT PRIMARY KEY`来完成，该列将为每个记录插入一个唯一编号。从1开始，每条记录增加1。\n\n`创建表时创建主键：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table created\");\n  });\n});\n```\n\n如果该表已经存在，请使用ALTER TABLE关键字：\n\n`在现有表上创建主键：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table altered\");\n  });\n});\n```\n\n## 插入表格\n\n`在“customers”表中插入一条记录：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"INSERT INTO customers (name, address) VALUES ('Company Inc', 'Highway 37')\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"1 record inserted\");\n  });\n});\n```\n\n\n## 插入多条记录\n\n要插入多个记录，请创建一个包含值的数组，然后在sql中插入问号，该问号将被值数组替换：\n`INSERT INTO customers (name, address) VALUES ?`\n\n`用数据填充“客户”表：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected!\");\n  var sql = \"INSERT INTO customers (name, address) VALUES ?\";\n  var values = [\n    ['John', 'Highway 71'],\n    ['Peter', 'Lowstreet 4'],\n    ['Amy', 'Apple st 652'],\n    ['Hannah', 'Mountain 21'],\n    ['Michael', 'Valley 345'],\n    ['Sandy', 'Ocean blvd 2'],\n    ['Betty', 'Green Grass 1'],\n    ['Richard', 'Sky st 331'],\n    ['Susan', 'One way 98'],\n    ['Vicky', 'Yellow Garden 2'],\n    ['Ben', 'Park Lane 38'],\n    ['William', 'Central st 954'],\n    ['Chuck', 'Main Road 989'],\n    ['Viola', 'Sideway 1633']\n  ];\n  con.query(sql, [values], function (err, result) {\n    if (err) throw err;\n    console.log(\"Number of records inserted: \" + result.affectedRows);\n  });\n});\n```\n\n## 结果对象\n\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示：\n\n```json\n{\n  fieldCount: 0,\n  affectedRows: 14,\n  insertId: 0,\n  serverStatus: 2,\n  warningCount: 0,\n  message: '\\'Records:14  Duplicated: 0  Warnings: 0',\n  protocol41: true,\n  changedRows: 0\n}\n```\n属性值可以这样显示\n\n`返回受影响的行数`:\n```js\nconsole.log(result.affectedRows)\n```\n\n## 获取插入的ID\n\n对于具有自动递增ID字段的表，可以通过询问结果对象来获取刚插入的行的ID。\n\n**注意：为了能够获得插入的ID，只能插入一行。**\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"INSERT INTO customers (name, address) VALUES ('Michelle', 'Blue Village 1')\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"1 record inserted, ID: \" + result.insertId);\n  });\n});\n```\n\n\n# 查询表（select from table）\n\n1.要从MySQL中的表中选择数据，请使用“ SELECT”语句。\n\n`从“customers”表中选择所有记录，并显示结果对象：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**SELECT 将返回所有列**\n\n2.要仅选择表中的某些列，请使用“ SELECT”语句，后跟列名\n\n`从“customers”表中选择名称和地址，并显示返回对象：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT name, address FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n\n```\n\n结果\n```js\n[\n  { name: 'John', address: 'Highway 71'},\n  { name: 'Peter', address: 'Lowstreet 4'},\n  { name: 'Amy', address: 'Apple st 652'},\n  { name: 'Hannah', address: 'Mountain 21'},\n  { name: 'Michael', address: 'Valley 345'},\n  { name: 'Sandy', address: 'Ocean blvd 2'},\n  { name: 'Betty', address: 'Green Grass 1'},\n  { name: 'Richard', address: 'Sky st 331'},\n  { name: 'Susan', address: 'One way 98'},\n  { name: 'Vicky', address: 'Yellow Garden 2'},\n  { name: 'Ben', address: 'Park Lane 38'},\n  { name: 'William', address: 'Central st 954'},\n  { name: 'Chuck', address: 'Main Road 989'},\n  { name: 'Viola', address: 'Sideway 1633'}\n]\n```\n\n## 结果对象\n\n从上面示例的结果中可以看到，结果对象是一个包含每一行作为对象的数组。\n\n要返回例如第三条记录的地址，只需参考第三条数组对象的address属性：\n\n`返回第三条记录的地址：`\n```js\nconsole.log(result[2].address);\n```\n\n## 字段对象\n\n回调函数的第三个参数是一个数组，其中包含有关结果中每个字段的信息。\n\n`从“customers”表中选择所有记录，然后显示字段对象：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT name, address FROM customers\", function (err, result, fields) {\n    if (err) throw err;\n    console.log(fields);\n  });\n});\n```\n结果\n```js\n[\n  {\n    catalog: 'def',\n    db: 'mydb',\n    table: 'customers',\n    orgTable: 'customers',\n    name: 'name',\n    orgName: 'address',\n    charsetNr: 33,\n    length: 765,\n    type: 253,\n    flags: 0,\n    decimals: 0,\n    default: undefined,\n    zeroFill: false,\n    protocol41: true\n  },\n  {\n    catalog: 'def',\n    db: 'mydb',\n    table: 'customers',\n    orgTable: 'customers',\n    name: 'address',\n    orgName: 'address',\n    charsetNr: 33,\n    length: 765,\n    type: 253,\n    flags: 0,\n    decimals: 0,\n    default: undefined,\n    zeroFill: false,\n    protocol41: true\n  {\n]\n```\n\n# where\n\n## 选择带过滤器\n从表中选择记录时，可以使用“ WHERE”语句过滤选择：\n\n`选择地址为“ Park Lane 38”的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers WHERE address = 'Park Lane 38'\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n## 通配符\n您也可以选择以给定字母或短语开头，包含或结尾的记录。\n\n使用'％'通配符表示零个，一个或多个字符：\n\n`选择地址以字母“ S”开头的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers WHERE address LIKE 'S%'\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n## 转义查询值\n当查询值是用户提供的变量时，应转义这些值。\n\n这是为了防止SQL注入，这是破坏或滥用数据库的常见Web黑客技术。\n\nMySQL模块具有以下方法来转义查询值：\n\n`使用以下mysql.escape() 方法转义查询值：`\n```js\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE address = ' + mysql.escape(adr);\ncon.query(sql, function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n\n`通过使用占位符? 方法转义查询值：`\n```js\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE address = ?';\ncon.query(sql, [adr], function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n如果您有多个占位符，则数组按该顺序包含多个值：\n```js\nvar name = 'Amy';\nvar adr = 'Mountain 21';\nvar sql = 'SELECT * FROM customers WHERE name = ? OR address = ?';\ncon.query(sql, [name, adr], function (err, result) {\n  if (err) throw err;\n  console.log(result);\n});\n```\n\n# sort result\n\n使用ORDER BY语句对结果进行升序或降序排序。\n\n缺省情况下，ORDER BY关键字对结果进行升序排序。要按降序对结果进行排序，请使用DESC关键字。\n\n`按名称的字母顺序对结果进行排序：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers ORDER BY name\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n结果\n```js\n[\n  { id: 3, name: 'Amy', address: 'Apple st 652'},\n  { id: 11, name: 'Ben', address: 'Park Lane 38'},\n  { id: 7, name: 'Betty', address: 'Green Grass 1'},\n  { id: 13, name: 'Chuck', address: 'Main Road 989'},\n  { id: 4, name: 'Hannah', address: 'Mountain 21'},\n  { id: 1, name: 'John', address: 'Higheay 71'},\n  { id: 5, name: 'Michael', address: 'Valley 345'},\n  { id: 2, name: 'Peter', address: 'Lowstreet 4'},\n  { id: 8, name: 'Richard', address: 'Sky st 331'},\n  { id: 6, name: 'Sandy', address: 'Ocean blvd 2'},\n  { id: 9, name: 'Susan', address: 'One way 98'},\n  { id: 10, name: 'Vicky', address: 'Yellow Garden 2'},\n  { id: 14, name: 'Viola', address: 'Sideway 1633'},\n  { id: 12, name: 'William', address: 'Central st 954'}\n]\n```\n\n## 按订单排序\n\n使用DESC关键字以降序对结果进行排序。\n\n`按name的字母顺序对结果进行反向排序：`\n\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  con.query(\"SELECT * FROM customers ORDER BY name DESC\", function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n结果\n```js\n[\n  { id: 12, name: 'William', address: 'Central st 954'},\n  { id: 14, name: 'Viola', address: 'Sideway 1633'},\n  { id: 10, name: 'Vicky', address: 'Yellow Garden 2'},\n  { id: 9, name: 'Susan', address: 'One way 98'},\n  { id: 6, name: 'Sandy', address: 'Ocean blvd 2'},\n  { id: 8, name: 'Richard', address: 'Sky st 331'},\n  { id: 2, name: 'Peter', address: 'Lowstreet 4'},\n  { id: 5, name: 'Michael', address: 'Valley 345'},\n  { id: 1, name: 'John', address: 'Higheay 71'},\n  { id: 4, name: 'Hannah', address: 'Mountain 21'},\n  { id: 13, name: 'Chuck', address: 'Main Road 989'},\n  { id: 7, name: 'Betty', address: 'Green Grass 1'},\n  { id: 11, name: 'Ben', address: 'Park Lane 38'},\n  { id: 3, name: 'Amy', address: 'Apple st 652'}\n]\n```\n\n# delete\n\n## 删除记录\n您可以使用“ DELETE FROM”语句从现有表中删除记录：\n`删除地址为“ Mountain 21”的所有记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DELETE FROM customers WHERE address = 'Mountain 21'\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Number of records deleted: \" + result.affectedRows);\n  });\n});\n```\n**请注意DELETE语法中的WHERE子句： WHERE子句指定应删除的记录。如果省略WHERE子句，则将删除所有记录！**\n\n## 结果对象\n\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示：\n```js\n{\n  fieldCount: 0,\n  affectedRows: 1,\n  insertId: 0,\n  serverStatus: 34,\n  warningCount: 0,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n属性值可以这样显示\n`\nconsole.log(result.affectedRows)\n`\n\n# Drop Table\n\n## 删除表格\n您可以使用“ DROP TABLE”语句删除现有表：\n\n`删除表“ customers”：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DROP TABLE customers\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(\"Table deleted\");\n  });\n});\n```\n\n\n## 仅在存在时drop\n如果您要删除的表已被删除，或者由于任何其他原因不存在，则可以使用IF EXISTS关键字来避免出现错误。\n`删除表“ customers”（如果存在）：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"DROP TABLE IF EXISTS customers\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n如果该表存在，则结果对象将如下所示：\n\n```js\n{\n  fieldCount: 0,\n  affectedRows: 0,\n  insertId: 0,\n  serverstatus: 2,\n  warningCount: 0,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n\n如果该表不存在，则结果对象将如下所示：\n```js\n{\n  fieldCount: 0,\n  affectedRows: 0,\n  insertId: 0,\n  serverstatus: 2,\n  warningCount: 1,\n  message: '',\n  protocol41: true,\n  changedRows: 0\n}\n```\n如您所见，唯一的区别是如果表不存在，则warningCount属性设置为1。\n\n# update\n\n## update表\n您可以使用“ UPDATE”语句来更新表中的现有记录：\n\n`将地址列从“ Valley 345”覆盖为“ Canyon 123”：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result.affectedRows + \" record(s) updated\");\n  });\n});\n```\n\n**请注意UPDATE语法中的WHERE子句： WHERE子句指定应更新的记录。如果省略WHERE子句，所有记录将被更新！**\n\n## 结果对象\n执行查询时，将返回结果对象。\n\n结果对象包含有关查询如何影响表的信息。\n\n从上面的示例返回的结果对象如下所示\n```js\n{\n  fieldCount: 0,\n  affectedRows: 1,\n  insertId: 0,\n  serverStatus: 34,\n  warningCount: 0,\n  message: '(Rows matched: 1 Changed: 1 Warnings: 0',\n  protocol41: true,\n  changedRows: 1\n}\n```\n\n# limit\n\n## 限制结果\n1.您可以使用“ LIMIT”语句来限制查询返回的记录数：\n\n`在“customers”表中选择前5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 5\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n## 从另一个位置开始\n2.如果要从第三条记录开始返回五条记录，则可以使用“ OFFSET”关键字：\n\n`从位置3开始，并返回接下来的5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 5 OFFSET 2\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n注意： “offset 2”表示从第三个位置开始，而不是第二个位置！\n\n## 较短的语法\n3.您还可以使用像这样的“ LIMIT 2、5”这样编写SQL语句，该语句返回与上面的偏移量示例相同的结果：\n\n`从位置3开始，并返回接下来的5条记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT * FROM customers LIMIT 2, 5\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**注意：数字是相反的：“ LIMIT 2、5”与“ LIMIT 5 OFFSET 2”相同**\n\n# JOIN\n\n## 联接两个或更多表\n您可以使用JOIN语句基于两个或多个表之间的相关列来合并行。\n\n考虑您有一个“customers”表和一个“production”表：\n\n使用者\n```js\n[\n  { id: 1, name: 'John', favorite_product: 154},\n  { id: 2, name: 'Peter', favorite_product: 154},\n  { id: 3, name: 'Amy', favorite_product: 155},\n  { id: 4, name: 'Hannah', favorite_product:},\n  { id: 5, name: 'Michael', favorite_product:}\n]\n```\n产品展示\n```js\n[\n  { id: 154, name: 'Chocolate Heaven' },\n  { id: 155, name: 'Tasty Lemons' },\n  { id: 156, name: 'Vanilla Dreams' }\n]\n```\n可以通过使用用户favorite_product字段和产品 id字段来组合这两个表。\n\n`选择两个表中都匹配的记录：`\n```js\nvar mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"SELECT users.name AS user, products.name AS favorite FROM users JOIN products ON users.favorite_product = products.id\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result);\n  });\n});\n```\n\n**注意：您可以使用INNER JOIN代替JOIN。他们都会给你相同的结果。**\n\n## left JOIN\n如果要返回所有用户，无论他们是否拥有喜欢的产品，请使用LEFT JOIN语句：\n\n`选择所有用户及其喜爱的产品：`\n```js\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nLEFT JOIN products ON users.favorite_product = products.id\n```\n\n## right JOIN\n如果您想退回所有产品，并且将其作为收藏的用户，即使没有用户将其作为收藏，请使用RIGHT JOIN语句：\n\n`选择所有产品以及将其作为收藏的用户：`\n```js\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nRIGHT JOIN products ON users.favorite_product = products.id\n```\n结果\n```js\n[\n  { user: 'John', favorite: 'Chocolate Heaven' },\n  { user: 'Peter', favorite: 'Chocolate Heaven' },\n  { user: 'Amy', favorite: 'Tasty Lemons' },\n  { user: null, favorite: 'Vanilla Dreams' }\n]\n```\n**注意：没有喜欢的产品的汉娜（Hannah）和迈克尔（Michael）不包括在结果中。**\n\n\n","slug":"NodeJS/MySQL","published":1,"date":"2020-01-20T12:39:09.144Z","updated":"2020-01-20T14:04:54.149Z","title":"NodeJS/MySQL","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5miui9n0000gjco8jf08l0p","content":"<h2><span id=\"安装mysql驱动程序\">安装MySQL驱动程序</span></h2><p><code>npm install mysql</code></p>\n<h2><span id=\"建立连接\">建立连接</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"查询数据库\">查询数据库</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result: \"</span> + result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"创建数据库\">创建数据库</span></h2><p>要在MySQL中创建数据库，请使用<code>CREATE DATABASE</code>语句：</p>\n<p><code>创建一个名为“ mydb”的数据库：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  con.query(<span class=\"string\">\"CREATE DATABASE mydb\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Database created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2><span id=\"创建表格\">创建表格</span></h2><p>要在MySQL中创建表，请使用<code>CREATE TABLE</code>语句。<br>确保在创建连接时定义数据库的名称。</p>\n<p><code>创建一个名为“ customers”的表：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"primary-key\">primary key</span></h2><p>创建表时，还应为每个记录创建一个具有唯一键的列。</p>\n<p>这可以通过将列定义为<code>INT AUTO_INCREMENT PRIMARY KEY</code>来完成，该列将为每个记录插入一个唯一编号。从1开始，每条记录增加1。</p>\n<p><code>创建表时创建主键：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果该表已经存在，请使用ALTER TABLE关键字：</p>\n<p><code>在现有表上创建主键：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table altered\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"插入表格\">插入表格</span></h2><p><code>在“customers”表中插入一条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ('Company Inc', 'Highway 37')\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 record inserted\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"插入多条记录\">插入多条记录</span></h2><p>要插入多个记录，请创建一个包含值的数组，然后在sql中插入问号，该问号将被值数组替换：<br><code>INSERT INTO customers (name, address) VALUES ?</code></p>\n<p><code>用数据填充“客户”表：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ?\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [</span><br><span class=\"line\">    [<span class=\"string\">'John'</span>, <span class=\"string\">'Highway 71'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Peter'</span>, <span class=\"string\">'Lowstreet 4'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Amy'</span>, <span class=\"string\">'Apple st 652'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Hannah'</span>, <span class=\"string\">'Mountain 21'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Valley 345'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Sandy'</span>, <span class=\"string\">'Ocean blvd 2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Betty'</span>, <span class=\"string\">'Green Grass 1'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Richard'</span>, <span class=\"string\">'Sky st 331'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Susan'</span>, <span class=\"string\">'One way 98'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Vicky'</span>, <span class=\"string\">'Yellow Garden 2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Ben'</span>, <span class=\"string\">'Park Lane 38'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'William'</span>, <span class=\"string\">'Central st 954'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Chuck'</span>, <span class=\"string\">'Main Road 989'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Viola'</span>, <span class=\"string\">'Sideway 1633'</span>]</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  con.query(sql, [values], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of records inserted: \"</span> + result.affectedRows);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"结果对象\">结果对象</span></h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: 0,</span><br><span class=\"line\">  affectedRows: 14,</span><br><span class=\"line\">  insertId: 0,</span><br><span class=\"line\">  serverStatus: 2,</span><br><span class=\"line\">  warningCount: 0,</span><br><span class=\"line\">  message: '\\'Records:14  Duplicated: 0  Warnings: 0',</span><br><span class=\"line\">  protocol41: true,</span><br><span class=\"line\">  changedRows: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可以这样显示</p>\n<p><code>返回受影响的行数</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result.affectedRows)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"获取插入的id\">获取插入的ID</span></h2><p>对于具有自动递增ID字段的表，可以通过询问结果对象来获取刚插入的行的ID。</p>\n<p><strong>注意：为了能够获得插入的ID，只能插入一行。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ('Michelle', 'Blue Village 1')\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 record inserted, ID: \"</span> + result.insertId);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1><span id=\"查询表select-from-table\">查询表（select from table）</span></h1><p>1.要从MySQL中的表中选择数据，请使用“ SELECT”语句。</p>\n<p><code>从“customers”表中选择所有记录，并显示结果对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>SELECT 将返回所有列</strong></p>\n<p>2.要仅选择表中的某些列，请使用“ SELECT”语句，后跟列名</p>\n<p><code>从“customers”表中选择名称和地址，并显示返回对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT name, address FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"结果对象\">结果对象</span></h2><p>从上面示例的结果中可以看到，结果对象是一个包含每一行作为对象的数组。</p>\n<p>要返回例如第三条记录的地址，只需参考第三条数组对象的address属性：</p>\n<p><code>返回第三条记录的地址：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">2</span>].address);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"字段对象\">字段对象</span></h2><p>回调函数的第三个参数是一个数组，其中包含有关结果中每个字段的信息。</p>\n<p><code>从“customers”表中选择所有记录，然后显示字段对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT name, address FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fields);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    catalog: <span class=\"string\">'def'</span>,</span><br><span class=\"line\">    db: <span class=\"string\">'mydb'</span>,</span><br><span class=\"line\">    table: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    orgTable: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">    orgName: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    charsetNr: <span class=\"number\">33</span>,</span><br><span class=\"line\">    length: <span class=\"number\">765</span>,</span><br><span class=\"line\">    type: <span class=\"number\">253</span>,</span><br><span class=\"line\">    flags: <span class=\"number\">0</span>,</span><br><span class=\"line\">    decimals: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    zeroFill: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    protocol41: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    catalog: <span class=\"string\">'def'</span>,</span><br><span class=\"line\">    db: <span class=\"string\">'mydb'</span>,</span><br><span class=\"line\">    table: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    orgTable: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    orgName: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    charsetNr: <span class=\"number\">33</span>,</span><br><span class=\"line\">    length: <span class=\"number\">765</span>,</span><br><span class=\"line\">    type: <span class=\"number\">253</span>,</span><br><span class=\"line\">    flags: <span class=\"number\">0</span>,</span><br><span class=\"line\">    decimals: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    zeroFill: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    protocol41: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"where\">where</span></h1><h2><span id=\"选择带过滤器\">选择带过滤器</span></h2><p>从表中选择记录时，可以使用“ WHERE”语句过滤选择：</p>\n<p><code>选择地址为“ Park Lane 38”的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers WHERE address = 'Park Lane 38'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2><span id=\"通配符\">通配符</span></h2><p>您也可以选择以给定字母或短语开头，包含或结尾的记录。</p>\n<p>使用’％’通配符表示零个，一个或多个字符：</p>\n<p><code>选择地址以字母“ S”开头的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers WHERE address LIKE 'S%'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"转义查询值\">转义查询值</span></h2><p>当查询值是用户提供的变量时，应转义这些值。</p>\n<p>这是为了防止SQL注入，这是破坏或滥用数据库的常见Web黑客技术。</p>\n<p>MySQL模块具有以下方法来转义查询值：</p>\n<p><code>使用以下mysql.escape() 方法转义查询值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE address = '</span> + mysql.escape(adr);</span><br><span class=\"line\">con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>通过使用占位符? 方法转义查询值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE address = ?'</span>;</span><br><span class=\"line\">con.query(sql, [adr], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果您有多个占位符，则数组按该顺序包含多个值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Amy'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE name = ? OR address = ?'</span>;</span><br><span class=\"line\">con.query(sql, [name, adr], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"sort-result\">sort result</span></h1><p>使用ORDER BY语句对结果进行升序或降序排序。</p>\n<p>缺省情况下，ORDER BY关键字对结果进行升序排序。要按降序对结果进行排序，请使用DESC关键字。</p>\n<p><code>按名称的字母顺序对结果进行排序：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers ORDER BY name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Higheay 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"按订单排序\">按订单排序</span></h2><p>使用DESC关键字以降序对结果进行排序。</p>\n<p><code>按name的字母顺序对结果进行反向排序：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers ORDER BY name DESC\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Higheay 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"delete\">delete</span></h1><h2><span id=\"删除记录\">删除记录</span></h2><p>您可以使用“ DELETE FROM”语句从现有表中删除记录：<br><code>删除地址为“ Mountain 21”的所有记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DELETE FROM customers WHERE address = 'Mountain 21'\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of records deleted: \"</span> + result.affectedRows);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>请注意DELETE语法中的WHERE子句： WHERE子句指定应删除的记录。如果省略WHERE子句，则将删除所有记录！</strong></p>\n<h2><span id=\"结果对象\">结果对象</span></h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverStatus: <span class=\"number\">34</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可以这样显示<br><code>console.log(result.affectedRows)</code></p>\n<h1><span id=\"drop-table\">Drop Table</span></h1><h2><span id=\"删除表格\">删除表格</span></h2><p>您可以使用“ DROP TABLE”语句删除现有表：</p>\n<p><code>删除表“ customers”：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DROP TABLE customers\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table deleted\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"仅在存在时drop\">仅在存在时drop</span></h2><p>如果您要删除的表已被删除，或者由于任何其他原因不存在，则可以使用IF EXISTS关键字来避免出现错误。<br><code>删除表“ customers”（如果存在）：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DROP TABLE IF EXISTS customers\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果该表存在，则结果对象将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">0</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverstatus: <span class=\"number\">2</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果该表不存在，则结果对象将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">0</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverstatus: <span class=\"number\">2</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如您所见，唯一的区别是如果表不存在，则warningCount属性设置为1。</p>\n<h1><span id=\"update\">update</span></h1><h2><span id=\"update表\">update表</span></h2><p>您可以使用“ UPDATE”语句来更新表中的现有记录：</p>\n<p><code>将地址列从“ Valley 345”覆盖为“ Canyon 123”：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.affectedRows + <span class=\"string\">\" record(s) updated\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意UPDATE语法中的WHERE子句： WHERE子句指定应更新的记录。如果省略WHERE子句，所有记录将被更新！</strong></p>\n<h2><span id=\"结果对象\">结果对象</span></h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverStatus: <span class=\"number\">34</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">'(Rows matched: 1 Changed: 1 Warnings: 0'</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"limit\">limit</span></h1><h2><span id=\"限制结果\">限制结果</span></h2><p>1.您可以使用“ LIMIT”语句来限制查询返回的记录数：</p>\n<p><code>在“customers”表中选择前5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 5\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"从另一个位置开始\">从另一个位置开始</span></h2><p>2.如果要从第三条记录开始返回五条记录，则可以使用“ OFFSET”关键字：</p>\n<p><code>从位置3开始，并返回接下来的5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 5 OFFSET 2\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意： “offset 2”表示从第三个位置开始，而不是第二个位置！</p>\n<h2><span id=\"较短的语法\">较短的语法</span></h2><p>3.您还可以使用像这样的“ LIMIT 2、5”这样编写SQL语句，该语句返回与上面的偏移量示例相同的结果：</p>\n<p><code>从位置3开始，并返回接下来的5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 2, 5\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：数字是相反的：“ LIMIT 2、5”与“ LIMIT 5 OFFSET 2”相同</strong></p>\n<h1><span id=\"join\">JOIN</span></h1><h2><span id=\"联接两个或更多表\">联接两个或更多表</span></h2><p>您可以使用JOIN语句基于两个或多个表之间的相关列来合并行。</p>\n<p>考虑您有一个“customers”表和一个“production”表：</p>\n<p>使用者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">154</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">154</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">155</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">favorite_product</span>:&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">favorite_product</span>:&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>产品展示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">154</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">155</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tasty Lemons'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">156</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vanilla Dreams'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以通过使用用户favorite_product字段和产品 id字段来组合这两个表。</p>\n<p><code>选择两个表中都匹配的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT users.name AS user, products.name AS favorite FROM users JOIN products ON users.favorite_product = products.id\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：您可以使用INNER JOIN代替JOIN。他们都会给你相同的结果。</strong></p>\n<h2><span id=\"left-join\">left JOIN</span></h2><p>如果要返回所有用户，无论他们是否拥有喜欢的产品，请使用LEFT JOIN语句：</p>\n<p><code>选择所有用户及其喜爱的产品：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT users.name AS user,</span><br><span class=\"line\">products.name AS favorite</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">LEFT JOIN products ON users.favorite_product = products.id</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"right-join\">right JOIN</span></h2><p>如果您想退回所有产品，并且将其作为收藏的用户，即使没有用户将其作为收藏，请使用RIGHT JOIN语句：</p>\n<p><code>选择所有产品以及将其作为收藏的用户：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT users.name AS user,</span><br><span class=\"line\">products.name AS favorite</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">RIGHT JOIN products ON users.favorite_product = products.id</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Tasty Lemons'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"literal\">null</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Vanilla Dreams'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>注意：没有喜欢的产品的汉娜（Hannah）和迈克尔（Michael）不包括在结果中。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装MySQL驱动程序\"><a href=\"#安装MySQL驱动程序\" class=\"headerlink\" title=\"安装MySQL驱动程序\"></a>安装MySQL驱动程序</h2><p><code>npm install mysql</code></p>\n<h2 id=\"建立连接\"><a href=\"#建立连接\" class=\"headerlink\" title=\"建立连接\"></a>建立连接</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"查询数据库\"><a href=\"#查询数据库\" class=\"headerlink\" title=\"查询数据库\"></a>查询数据库</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result: \"</span> + result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>要在MySQL中创建数据库，请使用<code>CREATE DATABASE</code>语句：</p>\n<p><code>创建一个名为“ mydb”的数据库：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  con.query(<span class=\"string\">\"CREATE DATABASE mydb\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Database created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建表格\"><a href=\"#创建表格\" class=\"headerlink\" title=\"创建表格\"></a>创建表格</h2><p>要在MySQL中创建表，请使用<code>CREATE TABLE</code>语句。<br>确保在创建连接时定义数据库的名称。</p>\n<p><code>创建一个名为“ customers”的表：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"primary-key\"><a href=\"#primary-key\" class=\"headerlink\" title=\"primary key\"></a>primary key</h2><p>创建表时，还应为每个记录创建一个具有唯一键的列。</p>\n<p>这可以通过将列定义为<code>INT AUTO_INCREMENT PRIMARY KEY</code>来完成，该列将为每个记录插入一个唯一编号。从1开始，每条记录增加1。</p>\n<p><code>创建表时创建主键：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果该表已经存在，请使用ALTER TABLE关键字：</p>\n<p><code>在现有表上创建主键：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table altered\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入表格\"><a href=\"#插入表格\" class=\"headerlink\" title=\"插入表格\"></a>插入表格</h2><p><code>在“customers”表中插入一条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ('Company Inc', 'Highway 37')\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 record inserted\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"插入多条记录\"><a href=\"#插入多条记录\" class=\"headerlink\" title=\"插入多条记录\"></a>插入多条记录</h2><p>要插入多个记录，请创建一个包含值的数组，然后在sql中插入问号，该问号将被值数组替换：<br><code>INSERT INTO customers (name, address) VALUES ?</code></p>\n<p><code>用数据填充“客户”表：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Connected!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ?\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [</span><br><span class=\"line\">    [<span class=\"string\">'John'</span>, <span class=\"string\">'Highway 71'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Peter'</span>, <span class=\"string\">'Lowstreet 4'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Amy'</span>, <span class=\"string\">'Apple st 652'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Hannah'</span>, <span class=\"string\">'Mountain 21'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Valley 345'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Sandy'</span>, <span class=\"string\">'Ocean blvd 2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Betty'</span>, <span class=\"string\">'Green Grass 1'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Richard'</span>, <span class=\"string\">'Sky st 331'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Susan'</span>, <span class=\"string\">'One way 98'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Vicky'</span>, <span class=\"string\">'Yellow Garden 2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Ben'</span>, <span class=\"string\">'Park Lane 38'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'William'</span>, <span class=\"string\">'Central st 954'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Chuck'</span>, <span class=\"string\">'Main Road 989'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Viola'</span>, <span class=\"string\">'Sideway 1633'</span>]</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  con.query(sql, [values], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of records inserted: \"</span> + result.affectedRows);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果对象\"><a href=\"#结果对象\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: 0,</span><br><span class=\"line\">  affectedRows: 14,</span><br><span class=\"line\">  insertId: 0,</span><br><span class=\"line\">  serverStatus: 2,</span><br><span class=\"line\">  warningCount: 0,</span><br><span class=\"line\">  message: '\\'Records:14  Duplicated: 0  Warnings: 0',</span><br><span class=\"line\">  protocol41: true,</span><br><span class=\"line\">  changedRows: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可以这样显示</p>\n<p><code>返回受影响的行数</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result.affectedRows)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取插入的ID\"><a href=\"#获取插入的ID\" class=\"headerlink\" title=\"获取插入的ID\"></a>获取插入的ID</h2><p>对于具有自动递增ID字段的表，可以通过询问结果对象来获取刚插入的行的ID。</p>\n<p><strong>注意：为了能够获得插入的ID，只能插入一行。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"INSERT INTO customers (name, address) VALUES ('Michelle', 'Blue Village 1')\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 record inserted, ID: \"</span> + result.insertId);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"查询表（select-from-table）\"><a href=\"#查询表（select-from-table）\" class=\"headerlink\" title=\"查询表（select from table）\"></a>查询表（select from table）</h1><p>1.要从MySQL中的表中选择数据，请使用“ SELECT”语句。</p>\n<p><code>从“customers”表中选择所有记录，并显示结果对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>SELECT 将返回所有列</strong></p>\n<p>2.要仅选择表中的某些列，请使用“ SELECT”语句，后跟列名</p>\n<p><code>从“customers”表中选择名称和地址，并显示返回对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT name, address FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Highway 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果对象-1\"><a href=\"#结果对象-1\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h2><p>从上面示例的结果中可以看到，结果对象是一个包含每一行作为对象的数组。</p>\n<p>要返回例如第三条记录的地址，只需参考第三条数组对象的address属性：</p>\n<p><code>返回第三条记录的地址：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">2</span>].address);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字段对象\"><a href=\"#字段对象\" class=\"headerlink\" title=\"字段对象\"></a>字段对象</h2><p>回调函数的第三个参数是一个数组，其中包含有关结果中每个字段的信息。</p>\n<p><code>从“customers”表中选择所有记录，然后显示字段对象：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT name, address FROM customers\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fields);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    catalog: <span class=\"string\">'def'</span>,</span><br><span class=\"line\">    db: <span class=\"string\">'mydb'</span>,</span><br><span class=\"line\">    table: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    orgTable: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">    orgName: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    charsetNr: <span class=\"number\">33</span>,</span><br><span class=\"line\">    length: <span class=\"number\">765</span>,</span><br><span class=\"line\">    type: <span class=\"number\">253</span>,</span><br><span class=\"line\">    flags: <span class=\"number\">0</span>,</span><br><span class=\"line\">    decimals: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    zeroFill: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    protocol41: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    catalog: <span class=\"string\">'def'</span>,</span><br><span class=\"line\">    db: <span class=\"string\">'mydb'</span>,</span><br><span class=\"line\">    table: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    orgTable: <span class=\"string\">'customers'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    orgName: <span class=\"string\">'address'</span>,</span><br><span class=\"line\">    charsetNr: <span class=\"number\">33</span>,</span><br><span class=\"line\">    length: <span class=\"number\">765</span>,</span><br><span class=\"line\">    type: <span class=\"number\">253</span>,</span><br><span class=\"line\">    flags: <span class=\"number\">0</span>,</span><br><span class=\"line\">    decimals: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    zeroFill: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    protocol41: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h1><h2 id=\"选择带过滤器\"><a href=\"#选择带过滤器\" class=\"headerlink\" title=\"选择带过滤器\"></a>选择带过滤器</h2><p>从表中选择记录时，可以使用“ WHERE”语句过滤选择：</p>\n<p><code>选择地址为“ Park Lane 38”的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers WHERE address = 'Park Lane 38'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><p>您也可以选择以给定字母或短语开头，包含或结尾的记录。</p>\n<p>使用’％’通配符表示零个，一个或多个字符：</p>\n<p><code>选择地址以字母“ S”开头的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers WHERE address LIKE 'S%'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转义查询值\"><a href=\"#转义查询值\" class=\"headerlink\" title=\"转义查询值\"></a>转义查询值</h2><p>当查询值是用户提供的变量时，应转义这些值。</p>\n<p>这是为了防止SQL注入，这是破坏或滥用数据库的常见Web黑客技术。</p>\n<p>MySQL模块具有以下方法来转义查询值：</p>\n<p><code>使用以下mysql.escape() 方法转义查询值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE address = '</span> + mysql.escape(adr);</span><br><span class=\"line\">con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>通过使用占位符? 方法转义查询值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE address = ?'</span>;</span><br><span class=\"line\">con.query(sql, [adr], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果您有多个占位符，则数组按该顺序包含多个值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Amy'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> adr = <span class=\"string\">'Mountain 21'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sql = <span class=\"string\">'SELECT * FROM customers WHERE name = ? OR address = ?'</span>;</span><br><span class=\"line\">con.query(sql, [name, adr], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"sort-result\"><a href=\"#sort-result\" class=\"headerlink\" title=\"sort result\"></a>sort result</h1><p>使用ORDER BY语句对结果进行升序或降序排序。</p>\n<p>缺省情况下，ORDER BY关键字对结果进行升序排序。要按降序对结果进行排序，请使用DESC关键字。</p>\n<p><code>按名称的字母顺序对结果进行排序：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers ORDER BY name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Higheay 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按订单排序\"><a href=\"#按订单排序\" class=\"headerlink\" title=\"按订单排序\"></a>按订单排序</h2><p>使用DESC关键字以降序对结果进行排序。</p>\n<p><code>按name的字母顺序对结果进行反向排序：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  con.query(<span class=\"string\">\"SELECT * FROM customers ORDER BY name DESC\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">'William'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Central st 954'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Viola'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sideway 1633'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vicky'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Yellow Garden 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Susan'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'One way 98'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Sandy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Ocean blvd 2'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Richard'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Sky st 331'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Lowstreet 4'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Valley 345'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Higheay 71'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Mountain 21'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chuck'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Main Road 989'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Betty'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Green Grass 1'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Ben'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Park Lane 38'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">address</span>: <span class=\"string\">'Apple st 652'</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h1><h2 id=\"删除记录\"><a href=\"#删除记录\" class=\"headerlink\" title=\"删除记录\"></a>删除记录</h2><p>您可以使用“ DELETE FROM”语句从现有表中删除记录：<br><code>删除地址为“ Mountain 21”的所有记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DELETE FROM customers WHERE address = 'Mountain 21'\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Number of records deleted: \"</span> + result.affectedRows);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>请注意DELETE语法中的WHERE子句： WHERE子句指定应删除的记录。如果省略WHERE子句，则将删除所有记录！</strong></p>\n<h2 id=\"结果对象-2\"><a href=\"#结果对象-2\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverStatus: <span class=\"number\">34</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可以这样显示<br><code>console.log(result.affectedRows)</code></p>\n<h1 id=\"Drop-Table\"><a href=\"#Drop-Table\" class=\"headerlink\" title=\"Drop Table\"></a>Drop Table</h1><h2 id=\"删除表格\"><a href=\"#删除表格\" class=\"headerlink\" title=\"删除表格\"></a>删除表格</h2><p>您可以使用“ DROP TABLE”语句删除现有表：</p>\n<p><code>删除表“ customers”：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DROP TABLE customers\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table deleted\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"仅在存在时drop\"><a href=\"#仅在存在时drop\" class=\"headerlink\" title=\"仅在存在时drop\"></a>仅在存在时drop</h2><p>如果您要删除的表已被删除，或者由于任何其他原因不存在，则可以使用IF EXISTS关键字来避免出现错误。<br><code>删除表“ customers”（如果存在）：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"DROP TABLE IF EXISTS customers\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果该表存在，则结果对象将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">0</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverstatus: <span class=\"number\">2</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果该表不存在，则结果对象将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">0</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverstatus: <span class=\"number\">2</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">1</span>,</span><br><span class=\"line\">  message: <span class=\"string\">''</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如您所见，唯一的区别是如果表不存在，则warningCount属性设置为1。</p>\n<h1 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h1><h2 id=\"update表\"><a href=\"#update表\" class=\"headerlink\" title=\"update表\"></a>update表</h2><p>您可以使用“ UPDATE”语句来更新表中的现有记录：</p>\n<p><code>将地址列从“ Valley 345”覆盖为“ Canyon 123”：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result.affectedRows + <span class=\"string\">\" record(s) updated\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意UPDATE语法中的WHERE子句： WHERE子句指定应更新的记录。如果省略WHERE子句，所有记录将被更新！</strong></p>\n<h2 id=\"结果对象-3\"><a href=\"#结果对象-3\" class=\"headerlink\" title=\"结果对象\"></a>结果对象</h2><p>执行查询时，将返回结果对象。</p>\n<p>结果对象包含有关查询如何影响表的信息。</p>\n<p>从上面的示例返回的结果对象如下所示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fieldCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  affectedRows: <span class=\"number\">1</span>,</span><br><span class=\"line\">  insertId: <span class=\"number\">0</span>,</span><br><span class=\"line\">  serverStatus: <span class=\"number\">34</span>,</span><br><span class=\"line\">  warningCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  message: <span class=\"string\">'(Rows matched: 1 Changed: 1 Warnings: 0'</span>,</span><br><span class=\"line\">  protocol41: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  changedRows: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h1><h2 id=\"限制结果\"><a href=\"#限制结果\" class=\"headerlink\" title=\"限制结果\"></a>限制结果</h2><p>1.您可以使用“ LIMIT”语句来限制查询返回的记录数：</p>\n<p><code>在“customers”表中选择前5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 5\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从另一个位置开始\"><a href=\"#从另一个位置开始\" class=\"headerlink\" title=\"从另一个位置开始\"></a>从另一个位置开始</h2><p>2.如果要从第三条记录开始返回五条记录，则可以使用“ OFFSET”关键字：</p>\n<p><code>从位置3开始，并返回接下来的5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 5 OFFSET 2\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意： “offset 2”表示从第三个位置开始，而不是第二个位置！</p>\n<h2 id=\"较短的语法\"><a href=\"#较短的语法\" class=\"headerlink\" title=\"较短的语法\"></a>较短的语法</h2><p>3.您还可以使用像这样的“ LIMIT 2、5”这样编写SQL语句，该语句返回与上面的偏移量示例相同的结果：</p>\n<p><code>从位置3开始，并返回接下来的5条记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT * FROM customers LIMIT 2, 5\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：数字是相反的：“ LIMIT 2、5”与“ LIMIT 5 OFFSET 2”相同</strong></p>\n<h1 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h1><h2 id=\"联接两个或更多表\"><a href=\"#联接两个或更多表\" class=\"headerlink\" title=\"联接两个或更多表\"></a>联接两个或更多表</h2><p>您可以使用JOIN语句基于两个或多个表之间的相关列来合并行。</p>\n<p>考虑您有一个“customers”表和一个“production”表：</p>\n<p>使用者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">154</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">154</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">favorite_product</span>: <span class=\"number\">155</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Hannah'</span>, <span class=\"attr\">favorite_product</span>:&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">favorite_product</span>:&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>产品展示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">154</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">155</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tasty Lemons'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">156</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Vanilla Dreams'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以通过使用用户favorite_product字段和产品 id字段来组合这两个表。</p>\n<p><code>选择两个表中都匹配的记录：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = mysql.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"yourusername\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"yourpassword\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mydb\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">con.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sql = <span class=\"string\">\"SELECT users.name AS user, products.name AS favorite FROM users JOIN products ON users.favorite_product = products.id\"</span>;</span><br><span class=\"line\">  con.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：您可以使用INNER JOIN代替JOIN。他们都会给你相同的结果。</strong></p>\n<h2 id=\"left-JOIN\"><a href=\"#left-JOIN\" class=\"headerlink\" title=\"left JOIN\"></a>left JOIN</h2><p>如果要返回所有用户，无论他们是否拥有喜欢的产品，请使用LEFT JOIN语句：</p>\n<p><code>选择所有用户及其喜爱的产品：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT users.name AS user,</span><br><span class=\"line\">products.name AS favorite</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">LEFT JOIN products ON users.favorite_product = products.id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"right-JOIN\"><a href=\"#right-JOIN\" class=\"headerlink\" title=\"right JOIN\"></a>right JOIN</h2><p>如果您想退回所有产品，并且将其作为收藏的用户，即使没有用户将其作为收藏，请使用RIGHT JOIN语句：</p>\n<p><code>选择所有产品以及将其作为收藏的用户：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT users.name AS user,</span><br><span class=\"line\">products.name AS favorite</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">RIGHT JOIN products ON users.favorite_product = products.id</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'Peter'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Chocolate Heaven'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"string\">'Amy'</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Tasty Lemons'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">user</span>: <span class=\"literal\">null</span>, <span class=\"attr\">favorite</span>: <span class=\"string\">'Vanilla Dreams'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>注意：没有喜欢的产品的汉娜（Hannah）和迈克尔（Michael）不包括在结果中。</strong></p>\n"},{"_content":"href与src的区别\n\n\n页面渲染\n\n\n","source":"_posts/面试题/javascript面试题.md","raw":"href与src的区别\n\n\n页面渲染\n\n\n","slug":"面试题/javascript面试题","published":1,"date":"2020-01-20T12:35:56.130Z","updated":"2020-01-20T12:36:38.116Z","title":"面试题/javascript面试题","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5miui9r0001gjco5opx8q0z","content":"<p>href与src的区别</p>\n<p>页面渲染</p>\n","site":{"data":{}},"excerpt":"","more":"<p>href与src的区别</p>\n<p>页面渲染</p>\n"},{"_content":"`npm install mysql   //下载并安装mysql数据库驱动程序`\n\n\n","source":"_posts/eggjs/service.md","raw":"`npm install mysql   //下载并安装mysql数据库驱动程序`\n\n\n","slug":"eggjs/service","published":1,"date":"2020-01-16T11:38:11.668Z","updated":"2020-01-17T13:18:10.051Z","title":"eggjs/service","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5miui9t0002gjcocnwe2du4","content":"<p><code>npm install mysql   //下载并安装mysql数据库驱动程序</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>npm install mysql   //下载并安装mysql数据库驱动程序</code></p>\n"},{"_content":"javascript\n使用了 ECMAScript 语法规范，外加Web API, 缺一不可 （web API w3c规范）\n\nDOM操作\nBOM操作\n事件绑定\nAjax 请求等\n两者结合，即可完成浏览器端的任何操作\n\n\nnodejs\n使用了语法规范，外加nodejs API，缺一不可\n处理http, 处理文件，具体参考 http://nodejs.cn/api\n两者结合，即可完成server端的任何操作\n\n\n\nECMAScript是语法规范\nnode = ECMAScript + nodejs API\njavascript = ECMAScript + webAPI\n\n\n\n\n\n","source":"_posts/面试题/nodejs与javascript的区别.md","raw":"javascript\n使用了 ECMAScript 语法规范，外加Web API, 缺一不可 （web API w3c规范）\n\nDOM操作\nBOM操作\n事件绑定\nAjax 请求等\n两者结合，即可完成浏览器端的任何操作\n\n\nnodejs\n使用了语法规范，外加nodejs API，缺一不可\n处理http, 处理文件，具体参考 http://nodejs.cn/api\n两者结合，即可完成server端的任何操作\n\n\n\nECMAScript是语法规范\nnode = ECMAScript + nodejs API\njavascript = ECMAScript + webAPI\n\n\n\n\n\n","slug":"面试题/nodejs与javascript的区别","published":1,"date":"2020-01-19T12:48:16.979Z","updated":"2020-01-20T12:36:38.114Z","title":"面试题/nodejs与javascript的区别","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5miui9u0003gjco1v5q58a4","content":"<p>javascript<br>使用了 ECMAScript 语法规范，外加Web API, 缺一不可 （web API w3c规范）</p>\n<p>DOM操作<br>BOM操作<br>事件绑定<br>Ajax 请求等<br>两者结合，即可完成浏览器端的任何操作</p>\n<p>nodejs<br>使用了语法规范，外加nodejs API，缺一不可<br>处理http, 处理文件，具体参考 <a href=\"http://nodejs.cn/api\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/api</a><br>两者结合，即可完成server端的任何操作</p>\n<p>ECMAScript是语法规范<br>node = ECMAScript + nodejs API<br>javascript = ECMAScript + webAPI</p>\n","site":{"data":{}},"excerpt":"","more":"<p>javascript<br>使用了 ECMAScript 语法规范，外加Web API, 缺一不可 （web API w3c规范）</p>\n<p>DOM操作<br>BOM操作<br>事件绑定<br>Ajax 请求等<br>两者结合，即可完成浏览器端的任何操作</p>\n<p>nodejs<br>使用了语法规范，外加nodejs API，缺一不可<br>处理http, 处理文件，具体参考 <a href=\"http://nodejs.cn/api\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/api</a><br>两者结合，即可完成server端的任何操作</p>\n<p>ECMAScript是语法规范<br>node = ECMAScript + nodejs API<br>javascript = ECMAScript + webAPI</p>\n"},{"_content":"[root@test3] # docker run -itd --name mongo -p 27017:27017 mongo --auth\n\n    Error response from daemon: Conflict. The container name \"/mysql-server\" is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.\n\n    1.docker ps\n    2.docker ps -l\n    3.docker rm bdc8d8c475cb\n\nhttps://blog.csdn.net/972301/article/details/80915127\nhttps://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\n\n","source":"_posts/docker/mongoDBError.md","raw":"[root@test3] # docker run -itd --name mongo -p 27017:27017 mongo --auth\n\n    Error response from daemon: Conflict. The container name \"/mysql-server\" is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.\n\n    1.docker ps\n    2.docker ps -l\n    3.docker rm bdc8d8c475cb\n\nhttps://blog.csdn.net/972301/article/details/80915127\nhttps://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\n\n","slug":"docker/mongoDBError","published":1,"date":"2020-01-14T06:32:36.186Z","updated":"2020-01-21T06:07:21.488Z","title":"docker/mongoDBError","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5nh8b6v000062co3lhhcag5","content":"<p>[root@test3] # docker run -itd –name mongo -p 27017:27017 mongo –auth</p>\n<pre><code>Error response from daemon: Conflict. The container name &quot;/mysql-server&quot; is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See &apos;/usr/bin/docker-current run --help&apos;.\n\n1.docker ps\n2.docker ps -l\n3.docker rm bdc8d8c475cb</code></pre><p><a href=\"https://blog.csdn.net/972301/article/details/80915127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/972301/article/details/80915127</a><br><a href=\"https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\" target=\"_blank\" rel=\"noopener\">https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[root@test3] # docker run -itd –name mongo -p 27017:27017 mongo –auth</p>\n<pre><code>Error response from daemon: Conflict. The container name &quot;/mysql-server&quot; is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See &apos;/usr/bin/docker-current run --help&apos;.\n\n1.docker ps\n2.docker ps -l\n3.docker rm bdc8d8c475cb</code></pre><p><a href=\"https://blog.csdn.net/972301/article/details/80915127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/972301/article/details/80915127</a><br><a href=\"https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\" target=\"_blank\" rel=\"noopener\">https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/</a></p>\n"},{"_content":" Client does not support authentication protocol requested by server; consider upgrading MySQL client\n \n解决方法：\n\n`mysql -u root -p`\n\n`ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Ll123456'`\n\n`flush privileges;`\n\n相关连接：https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f\n\n","source":"_posts/docker/mysqlError.md","raw":" Client does not support authentication protocol requested by server; consider upgrading MySQL client\n \n解决方法：\n\n`mysql -u root -p`\n\n`ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Ll123456'`\n\n`flush privileges;`\n\n相关连接：https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f\n\n","slug":"docker/mysqlError","published":1,"date":"2020-01-21T06:03:45.848Z","updated":"2020-01-21T06:06:31.293Z","title":"docker/mysqlError","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5nh8b6z000162coh5518y5a","content":"<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n<p>解决方法：</p>\n<p><code>mysql -u root -p</code></p>\n<p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;Ll123456&#39;</code></p>\n<p><code>flush privileges;</code></p>\n<p>相关连接：<a href=\"https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f\" target=\"_blank\" rel=\"noopener\">https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n<p>解决方法：</p>\n<p><code>mysql -u root -p</code></p>\n<p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;Ll123456&#39;</code></p>\n<p><code>flush privileges;</code></p>\n<p>相关连接：<a href=\"https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f\" target=\"_blank\" rel=\"noopener\">https://medium.com/@nickhuang_1199/client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-98540705553f</a></p>\n"},{"_content":"error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54\n\n解决方法：\n    查看镜像\n    \n    \n`nrm ls`\n\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n","source":"_posts/gitError.md","raw":"error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54\n\n解决方法：\n    查看镜像\n    \n    \n`nrm ls`\n\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n","slug":"gitError","published":1,"date":"2020-01-26T14:06:31.001Z","updated":"2020-01-26T14:08:19.658Z","title":"gitError","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5v3m9gn00001dco7jh195rq","content":"<p>error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</p>\n<p>解决方法：<br>    查看镜像</p>\n<p><code>nrm ls</code></p>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</p>\n<p>解决方法：<br>    查看镜像</p>\n<p><code>nrm ls</code></p>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n"},{"_content":"[root@test3] # docker run -itd --name mongo -p 27017:27017 mongo --auth\n\n    Error response from daemon: Conflict. The container name \"/mysql-server\" is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.\n\n    1.docker ps\n    2.docker ps -l\n    3.docker rm bdc8d8c475cb\n\nhttps://blog.csdn.net/972301/article/details/80915127\nhttps://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\n\n","source":"_posts/docker/error.md","raw":"[root@test3] # docker run -itd --name mongo -p 27017:27017 mongo --auth\n\n    Error response from daemon: Conflict. The container name \"/mysql-server\" is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.\n\n    1.docker ps\n    2.docker ps -l\n    3.docker rm bdc8d8c475cb\n\nhttps://blog.csdn.net/972301/article/details/80915127\nhttps://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\n\n","slug":"docker/error","published":1,"date":"2020-01-14T06:32:36.000Z","updated":"2020-01-14T09:46:45.000Z","title":"docker/error","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5v3m9gt00011dcoa49nc23l","content":"<p>[root@test3] # docker run -itd –name mongo -p 27017:27017 mongo –auth</p>\n<pre><code>Error response from daemon: Conflict. The container name &quot;/mysql-server&quot; is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See &apos;/usr/bin/docker-current run --help&apos;.\n\n1.docker ps\n2.docker ps -l\n3.docker rm bdc8d8c475cb</code></pre><p><a href=\"https://blog.csdn.net/972301/article/details/80915127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/972301/article/details/80915127</a><br><a href=\"https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\" target=\"_blank\" rel=\"noopener\">https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[root@test3] # docker run -itd –name mongo -p 27017:27017 mongo –auth</p>\n<pre><code>Error response from daemon: Conflict. The container name &quot;/mysql-server&quot; is already in use by container bdc8d8c475cb86695c466d23fd7102221f2c040898c2d576f94cd06c93ca811b. You have to remove (or rename) that container to be able to reuse that name..See &apos;/usr/bin/docker-current run --help&apos;.\n\n1.docker ps\n2.docker ps -l\n3.docker rm bdc8d8c475cb</code></pre><p><a href=\"https://blog.csdn.net/972301/article/details/80915127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/972301/article/details/80915127</a><br><a href=\"https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/\" target=\"_blank\" rel=\"noopener\">https://thispointer.com/docker-how-to-stop-remove-a-running-container-by-id-or-name/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[{"name":"数据库","_id":"ck58bahrw00023yco5jbvfel2"},{"name":"kubernates","_id":"ck58bahs300063ycobqjbg4m6"},{"name":"Go","_id":"ck58bahsg000h3yco4hxwglcy"},{"name":"redis","_id":"ck58bahsh000j3yco3z3beldh"}]}}